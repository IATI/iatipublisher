"use strict";
(self["webpackChunk"] = self["webpackChunk"] || []).push([["/js/formbuilder"],{

/***/ "./resources/assets/js/scripts/DynamicField.ts":
/*!*****************************************************!*\
  !*** ./resources/assets/js/scripts/DynamicField.ts ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {



var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.DynamicField = void 0;
var jquery_1 = __importDefault(__webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"));
__webpack_require__(/*! select2 */ "./node_modules/select2/dist/js/select2.js");
var DynamicField = /** @class */function () {
  function DynamicField() {}
  /**
   * Hide and Show different form fields based on vocabulary and other types
   */
  DynamicField.prototype.hideShowFormFields = function () {
    this.humanitarianScopeHideVocabularyUri();
    this.countryBudgetHideCodeField();
    this.aidTypeVocabularyHideField();
    this.sectorVocabularyHideField();
    this.policyVocabularyHideField();
    this.recipientVocabularyHideField();
    this.sectorVocabularyHideField();
    this.tagVocabularyHideField();
    this.transactionAidTypeVocabularyHideField();
    this.indicatorReferenceHideFieldUri();
  };
  /**
   * Humanitarian Scope Form Page
   *
   * @Logic hide vocabulary-uri field based on '@vocabulary' field value
   */
  DynamicField.prototype.humanitarianScopeHideVocabularyUri = function () {
    var _this = this;
    var humanitarianScopeVocabulary = (0, jquery_1["default"])('select[id^="humanitarian_scope"][id*="[vocabulary]"]');
    if (humanitarianScopeVocabulary.length > 0) {
      // hide fields on page load
      jquery_1["default"].each(humanitarianScopeVocabulary, function (index, scope) {
        var _a;
        var val = (_a = (0, jquery_1["default"])(scope).val()) !== null && _a !== void 0 ? _a : '';
        _this.hideHumanitarianScopeField((0, jquery_1["default"])(scope), val.toString());
      });
      // hide/show fields on value change
      humanitarianScopeVocabulary.on('select2:select', function (e) {
        var val = e.params.data.id;
        var index = e.target;
        _this.hideHumanitarianScopeField((0, jquery_1["default"])(index), val);
      });
      // hide/show fields on value clear
      humanitarianScopeVocabulary.on('select2:clear', function (e) {
        var index = e.target;
        _this.hideHumanitarianScopeField((0, jquery_1["default"])(index), '');
      });
    }
  };
  // hide country budget based on vocabulary
  DynamicField.prototype.hideHumanitarianScopeField = function (index, value) {
    var humanitarianScopeHideVocabularyUri = 'input[id^="humanitarian_scope"][id*="[vocabulary_uri]"]';
    if (value === '99') {
      index.closest('.form-field-group').find(humanitarianScopeHideVocabularyUri).show().removeAttr('disabled').closest('.form-field').show();
    } else {
      index.closest('.form-field-group').find(humanitarianScopeHideVocabularyUri).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
    }
  };
  /**
   * Humanitarian Scope Form Page
   *
   * @Logic hide vocabulary-uri field based on '@vocabulary' field value
   */
  DynamicField.prototype.indicatorReferenceHideFieldUri = function () {
    var _this = this;
    var referenceVocabulary = (0, jquery_1["default"])('select[id^="reference"][id*="[vocabulary]"]');
    if (referenceVocabulary.length > 0) {
      // hide fields on page load
      jquery_1["default"].each(referenceVocabulary, function (index, scope) {
        var _a;
        var val = (_a = (0, jquery_1["default"])(scope).val()) !== null && _a !== void 0 ? _a : '';
        _this.indicatorReferenceHideField((0, jquery_1["default"])(scope), val.toString());
      });
      // hide/show fields on value change
      referenceVocabulary.on('select2:select', function (e) {
        var val = e.params.data.id;
        var index = e.target;
        _this.indicatorReferenceHideField((0, jquery_1["default"])(index), val);
      });
      // hide/show fields on value clear
      referenceVocabulary.on('select2:clear', function (e) {
        var index = e.target;
        _this.indicatorReferenceHideField((0, jquery_1["default"])(index), '');
      });
    }
  };
  // hide country budget based on vocabulary
  DynamicField.prototype.indicatorReferenceHideField = function (index, value) {
    var referenceUri = 'input[id^="reference"][id*="[indicator_uri]"]';
    if (value === '99') {
      index.closest('.form-field-group').find(referenceUri).show().removeAttr('disabled').closest('.form-field').show();
    } else {
      index.closest('.form-field-group').find(referenceUri).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
    }
  };
  /**
   * Country Budget Form Page
   *
   * @Logic show/hide 'code' field based on '@vocabulary' field value
   */
  DynamicField.prototype.countryBudgetHideCodeField = function () {
    var _this = this;
    var _a;
    var countryBudgetVocabulary = (0, jquery_1["default"])('select#country_budget_vocabulary');
    if (countryBudgetVocabulary.length > 0) {
      // hide/show on page load
      var val = (_a = countryBudgetVocabulary.val()) !== null && _a !== void 0 ? _a : '1';
      this.hideCountryBudgetField(val.toString());
      // hide/show on value change
      countryBudgetVocabulary.on('select2:select', function (e) {
        var val = e.params.data.id;
        _this.hideCountryBudgetField(val);
      });
      //hide/show based on value cleared
      countryBudgetVocabulary.on('select2:clear', function () {
        _this.hideCountryBudgetField('');
      });
    }
  };
  /**
   * Hide Country Budget Fields
   */
  DynamicField.prototype.hideCountryBudgetField = function (value) {
    var countryBudgetCodeInput = 'input[id^="budget_item"][id*="[code_text]"]',
      countryBudgetCodeSelect = 'select[id^="budget_item"][id*="[code]"]';
    if (value === '1') {
      (0, jquery_1["default"])(countryBudgetCodeSelect).val('').trigger('change').attr('disabled', 'disabled').closest('.form-field').hide();
      (0, jquery_1["default"])(countryBudgetCodeInput).removeAttr('disabled').closest('.form-field').show();
    } else {
      (0, jquery_1["default"])(countryBudgetCodeSelect).removeAttr('disabled').closest('.form-field').show();
      (0, jquery_1["default"])(countryBudgetCodeInput).val('').trigger('change').closest('.form-field').hide();
    }
  };
  /**
   * AidType Form Page
   *
   * @Logic hide vocabulary-uri and codes field based on '@vocabulary' field value
   */
  DynamicField.prototype.aidTypeVocabularyHideField = function () {
    var _this = this;
    var aidtype_vocabulary = (0, jquery_1["default"])('select[id*="default_aid_type_vocabulary"]');
    if (aidtype_vocabulary.length > 0) {
      jquery_1["default"].each(aidtype_vocabulary, function (index, item) {
        var _a;
        var data = (_a = (0, jquery_1["default"])(item).val()) !== null && _a !== void 0 ? _a : '1';
        _this.hideAidTypeSelectField((0, jquery_1["default"])(item), data.toString());
      });
      aidtype_vocabulary.on('select2:select', function (e) {
        var data = e.params.data.id;
        var target = e.target;
        _this.hideAidTypeSelectField((0, jquery_1["default"])(target), data);
      });
      aidtype_vocabulary.on('select2:clear', function (e) {
        var target = e.target;
        _this.hideAidTypeSelectField((0, jquery_1["default"])(target), '');
      });
    }
  };
  /**
   * AidType Form Page
   *
   * @Logic hide vocabulary-uri and codes field based on '@vocabulary' field value
   */
  DynamicField.prototype.transactionAidTypeVocabularyHideField = function () {
    var _this = this;
    var aidtype_vocabulary = (0, jquery_1["default"])('select[id*="aid_type_vocabulary"]');
    if (aidtype_vocabulary.length > 0) {
      jquery_1["default"].each(aidtype_vocabulary, function (index, item) {
        var _a;
        var data = (_a = (0, jquery_1["default"])(item).val()) !== null && _a !== void 0 ? _a : '1';
        _this.hideTransactionAidTypeSelectField((0, jquery_1["default"])(item), data.toString());
      });
      aidtype_vocabulary.on('select2:select', function (e) {
        var data = e.params.data.id;
        var target = e.target;
        _this.hideTransactionAidTypeSelectField((0, jquery_1["default"])(target), data);
      });
      aidtype_vocabulary.on('select2:clear', function (e) {
        var target = e.target;
        _this.hideTransactionAidTypeSelectField((0, jquery_1["default"])(target), '');
      });
    }
  };
  /**
   * Hide Aid Type Select Fields
   */
  DynamicField.prototype.hideAidTypeSelectField = function (index, value) {
    var default_aid_type = 'select[id*="[default_aid_type]"]',
      earmarking_category = 'select[id*="[earmarking_category]"]',
      earmarking_modality = 'select[id*="[earmarking_modality]"]',
      cash_and_voucher_modalities = 'select[id*="[cash_and_voucher_modalities]"]',
      case1 = 'select[id*="[earmarking_category]"],select[id*="[earmarking_modality]"],select[id*="[cash_and_voucher_modalities]"]',
      case2 = 'select[id*="[default_aid_type]"],select[id*="[earmarking_modality]"],select[id*="[cash_and_voucher_modalities]"]',
      case3 = 'select[id*="[default_aid_type]"],select[id*="[earmarking_category]"],select[id*="[cash_and_voucher_modalities]"]',
      case4 = 'select[id*="[default_aid_type]"],select[id*="[earmarking_category]"],select[id*="[earmarking_modality]"]';
    switch (value) {
      case '2':
        index.closest('.form-field-group').find(earmarking_category).show().removeAttr('disabled').closest('.form-field').show();
        index.closest('.form-field-group').find(case2).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
        break;
      case '3':
        index.closest('.form-field-group').find(earmarking_modality).show().removeAttr('disabled').closest('.form-field').show();
        index.closest('.form-field-group').find(case3).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
        break;
      case '4':
        index.closest('.form-field-group').find(cash_and_voucher_modalities).show().removeAttr('disabled').closest('.form-field').show();
        index.closest('.form-field-group').find(case4).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
        break;
      default:
        index.closest('.form-field-group').find(default_aid_type).show().removeAttr('disabled').closest('.form-field').show();
        index.closest('.form-field-group').find(case1).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
    }
  };
  /**
   * Hide Transaction Aid Type Select Fields
   */
  DynamicField.prototype.hideTransactionAidTypeSelectField = function (index, value) {
    var aid_type = 'select[id*="[aid_type_code]"]',
      earmarking_category = 'select[id*="[earmarking_category]"]',
      earmarking_modality = 'select[id*="[earmarking_modality]"]',
      cash_and_voucher_modalities = 'select[id*="[cash_and_voucher_modalities]"]',
      case1 = 'select[id*="[earmarking_category]"],select[id*="[earmarking_modality]"],select[id*="[cash_and_voucher_modalities]"]',
      case2 = 'select[id*="[aid_type_code]"],select[id*="[earmarking_modality]"],select[id*="[cash_and_voucher_modalities]"]',
      case3 = 'select[id*="[aid_type_code]"],select[id*="[earmarking_category]"],select[id*="[cash_and_voucher_modalities]"]',
      case4 = 'select[id*="[aid_type_code]"],select[id*="[earmarking_category]"],select[id*="[earmarking_modality]"]';
    switch (value) {
      case '2':
        index.closest('.form-field-group').find(earmarking_category).show().removeAttr('disabled').closest('.form-field').show();
        index.closest('.form-field-group').find(case2).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
        break;
      case '3':
        index.closest('.form-field-group').find(earmarking_modality).show().removeAttr('disabled').closest('.form-field').show();
        index.closest('.form-field-group').find(case3).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
        break;
      case '4':
        index.closest('.form-field-group').find(cash_and_voucher_modalities).show().removeAttr('disabled').closest('.form-field').show();
        index.closest('.form-field-group').find(case4).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
        break;
      default:
        index.closest('.form-field-group').find(aid_type).show().removeAttr('disabled').closest('.form-field').show();
        index.closest('.form-field-group').find(case1).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
    }
  };
  /**
   * Policy Marker Form Page
   *
   * @Logic hide vocabulary-uri and codes field based on '@vocabulary' field value
   */
  DynamicField.prototype.policyVocabularyHideField = function () {
    var _this = this;
    var policymaker_vocabulary = (0, jquery_1["default"])('select[id*="policy_marker_vocabulary"]');
    if (policymaker_vocabulary.length > 0) {
      jquery_1["default"].each(policymaker_vocabulary, function (index, policy_marker) {
        var _a;
        var data = (_a = (0, jquery_1["default"])(policy_marker).val()) !== null && _a !== void 0 ? _a : '1';
        _this.hidePolicyMakerField((0, jquery_1["default"])(policy_marker), data.toString());
      });
      policymaker_vocabulary.on('select2:select', function (e) {
        var data = e.params.data.id;
        var target = e.target;
        _this.hidePolicyMakerField((0, jquery_1["default"])(target), data);
      });
      policymaker_vocabulary.on('select2:clear', function (e) {
        var target = e.target;
        _this.hidePolicyMakerField((0, jquery_1["default"])(target), '99');
      });
    }
  };
  /**
   * Hides Policy Marker Form Fields
   */
  DynamicField.prototype.hidePolicyMakerField = function (index, value) {
    var case1_show = 'select[id*="[policy_marker]"]',
      case2_show = 'input[id*="[policy_marker_text]"],input[id*="[vocabulary_uri]"]',
      case1 = 'input[id*="[policy_marker_text]"],input[id*="[vocabulary_uri]"]',
      case2 = 'select[id*="[policy_marker]"]';
    switch (value) {
      case '1':
        index.closest('.form-field-group').find(case1_show).show().removeAttr('disabled').closest('.form-field').show();
        index.closest('.form-field-group').find(case1).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
        break;
      case '99':
      default:
        index.closest('.form-field-group').find(case2_show).show().removeAttr('disabled').closest('.form-field').show();
        index.closest('.form-field-group').find(case2).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
    }
  };
  /**
   * Sector Form Page
   *
   * @Logic hide vocabulary-uri and codes field based on '@vocabulary' field value
   */
  DynamicField.prototype.sectorVocabularyHideField = function () {
    var _this = this;
    var sector_vocabulary = (0, jquery_1["default"])('select[id*="sector_vocabulary"]');
    if (sector_vocabulary.length > 0) {
      jquery_1["default"].each(sector_vocabulary, function (index, sector) {
        var _a;
        var data = (_a = (0, jquery_1["default"])(sector).val()) !== null && _a !== void 0 ? _a : '1';
        _this.hideSectorField((0, jquery_1["default"])(sector), data.toString());
      });
      sector_vocabulary.on('select2:select', function (e) {
        var data = e.params.data.id;
        var target = e.target;
        _this.hideSectorField((0, jquery_1["default"])(target), data);
      });
      sector_vocabulary.on('select2:clear', function (e) {
        var target = e.target;
        _this.hideSectorField((0, jquery_1["default"])(target), '');
      });
    }
  };
  /**
   * Hide Sector Form fields
   */
  DynamicField.prototype.hideSectorField = function (index, value) {
    var case1_show = 'select[id*="[code]"]',
      case2_show = 'select[id*="[category_code]"]',
      case7_show = 'select[id*="[sdg_goal]"]',
      case8_show = 'select[id*="[sdg_target]"]',
      case98_99_show = 'input[id*="[text]"],input[id*="[vocabulary_uri]"]',
      default_show = 'input[id*="[text]"]',
      case1 = 'select[id*="[category_code]"],select[id*="[sdg_goal]"],select[id*="[sdg_target]"],input[id*="[vocabulary_uri]"],input[id*="[text]"]',
      case2 = 'input[id*="[vocabulary_uri]"],select[id*="[sdg_goal]"],select[id*="[sdg_target]"],select[id*="[code]"],input[id*="[text]"]',
      case7 = 'input[id*="[vocabulary_uri]"],select[id*="[category_code]"],select[id*="[sdg_target]"],select[id*="[code]"],input[id*="[text]"]',
      case8 = 'input[id*="[vocabulary_uri]"],select[id*="[category_code]"],select[id*="[sdg_goal]"],select[id*="[code]"],input[id*="[text]"]',
      case98_99 = 'select[id*="[category_code]"],select[id*="[sdg_goal]"],select[id*="[sdg_target]"],select[id*="[code]"]',
      default_hide = 'select[id*="[category_code]"],select[id*="[sdg_goal]"],select[id*="[sdg_target]"],select[id*="[code]"],input[id*="[vocabulary_uri]"]';
    switch (value) {
      case '1':
        index.closest('.form-field-group').find(case1_show).show().removeAttr('disabled').closest('.form-field').show();
        index.closest('.form-field-group').find(case1).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
        break;
      case '2':
        index.closest('.form-field-group').find(case2_show).show().removeAttr('disabled').closest('.form-field').show();
        index.closest('.form-field-group').find(case2).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
        break;
      case '7':
        index.closest('.form-field-group').find(case7_show).show().removeAttr('disabled').closest('.form-field').show();
        index.closest('.form-field-group').find(case7).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
        break;
      case '8':
        index.closest('.form-field-group').find(case8_show).show().removeAttr('disabled').closest('.form-field').show();
        index.closest('.form-field-group').find(case8).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
        break;
      case '98':
        index.closest('.form-field-group').find(case98_99_show).show().removeAttr('disabled').closest('.form-field').show();
        index.closest('.form-field-group').find(case98_99).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
        break;
      case '99':
        index.closest('.form-field-group').find(case98_99_show).show().removeAttr('disabled').closest('.form-field').show();
        index.closest('.form-field-group').find(case98_99).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
        break;
      default:
        index.closest('.form-field-group').find(default_show).show().removeAttr('disabled').closest('.form-field').show();
        index.closest('.form-field-group').find(default_hide).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
    }
  };
  /**
   *  Recipient Vocabulary Form Page
   *
   * @Logic hide vocabulary-uri and codes field based on '@vocabulary' field value
   */
  DynamicField.prototype.recipientVocabularyHideField = function () {
    var _this = this;
    var region_vocabulary = (0, jquery_1["default"])('select[id*="region_vocabulary"]');
    if (region_vocabulary.length > 0) {
      jquery_1["default"].each(region_vocabulary, function (index, region_vocab) {
        var _a;
        var data = (_a = (0, jquery_1["default"])(region_vocab).val()) !== null && _a !== void 0 ? _a : '1';
        _this.hideRecipientRegionField((0, jquery_1["default"])(region_vocab), data.toString());
      });
      region_vocabulary.on('select2:select', function (e) {
        var data = e.params.data.id;
        var target = e.target;
        _this.hideRecipientRegionField((0, jquery_1["default"])(target), data);
      });
      region_vocabulary.on('select2:clear', function (e) {
        var target = e.target;
        _this.hideRecipientRegionField((0, jquery_1["default"])(target), '');
      });
    }
  };
  /**
   * Hides Recipient Region Form Fields
   */
  DynamicField.prototype.hideRecipientRegionField = function (index, value) {
    var case1_show = 'select[id*="[region_code]"]',
      case2_show = 'input[id*="[custom_code]"], input[id*="[code]"]',
      case99_show = 'input[id*="[custom_code]"],input[id*="[vocabulary_uri]"], input[id*="[code]"]',
      case1 = 'input[id*="[custom_code]"],input[id*="[vocabulary_uri]"],input[id*="[code]"]',
      case2 = 'select[id*="[region_code]"],input[id*="[vocabulary_uri]"]',
      case99 = 'select[id*="[region_code]"]';
    switch (value) {
      case '1':
        index.closest('.form-field-group').find(case1_show).show().removeAttr('disabled').closest('.form-field').show();
        index.closest('.form-field-group').find(case1).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
        break;
      case '2':
        index.closest('.form-field-group').find(case2_show).show().removeAttr('disabled').closest('.form-field').show();
        index.closest('.form-field-group').find(case2).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
        break;
      case '99':
        index.closest('.form-field-group').find(case99_show).show().removeAttr('disabled').closest('.form-field').show();
        index.closest('.form-field-group').find(case99).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
        break;
      default:
        index.closest('.form-field-group').find(case2_show).show().removeAttr('disabled').closest('.form-field').show();
        index.closest('.form-field-group').find(case2).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
    }
  };
  /**
   * Updates Activity identifier
   */
  DynamicField.prototype.updateActivityIdentifier = function () {
    var activity_identifier = (0, jquery_1["default"])('#activity_identifier');
    if (activity_identifier.length > 0) {
      activity_identifier.on('keyup', function () {
        (0, jquery_1["default"])('#iati_identifier_text').val((0, jquery_1["default"])('.identifier').attr('activity_identifier') + "-".concat((0, jquery_1["default"])(this).val()));
      });
    }
  };
  /**
   * Tag Form Page
   *
   * @Logic hide vocabulary-uri and codes field based on '@vocabulary' field value
   */
  DynamicField.prototype.tagVocabularyHideField = function () {
    var _this = this;
    var tag_vocabulary = (0, jquery_1["default"])('select[id*="tag_vocabulary"]');
    if (tag_vocabulary.length > 0) {
      jquery_1["default"].each(tag_vocabulary, function (index, tag) {
        var _a;
        var data = (_a = (0, jquery_1["default"])(tag).val()) !== null && _a !== void 0 ? _a : '1';
        _this.hideTagField((0, jquery_1["default"])(tag), data.toString());
      });
      tag_vocabulary.on('select2:select', function (e) {
        var data = e.params.data.id;
        var target = e.target;
        _this.hideTagField((0, jquery_1["default"])(target), data);
      });
      tag_vocabulary.on('select2:clear', function (e) {
        var target = e.target;
        _this.hideTagField((0, jquery_1["default"])(target), '');
      });
    }
  };
  /**
   * Hide Tag Form fields
   */
  DynamicField.prototype.hideTagField = function (index, value) {
    var case1_show = 'input[id*="[tag_text]"]',
      case2_show = 'select[id*="[goals_tag_code]"]',
      case3_show = 'select[id*="[targets_tag_code]"]',
      case99_show = 'input[id*="[tag_text]"], input[id*="[vocabulary_uri]"]',
      case1 = 'select[id*="[goals_tag_code]"],select[id*="[targets_tag_code]"],input[id*="[vocabulary_uri]"]',
      case2 = 'input[id*="[vocabulary_uri]"],select[id*="[targets_tag_code]"],select[id*="[targets_tag_code]"],input[id*="[tag_text]"]',
      case3 = 'input[id*="[vocabulary_uri]"],select[id*="[goals_tag_code]"],input[id*="[tag_text]"]',
      case99 = 'select[id*="[goals_tag_code]"],select[id*="[targets_tag_code]"]';
    switch (value) {
      case '1':
        index.closest('.form-field-group').find(case1_show).show().removeAttr('disabled').closest('.form-field').show();
        index.closest('.form-field-group').find(case1).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
        break;
      case '2':
        index.closest('.form-field-group').find(case2_show).show().removeAttr('disabled').closest('.form-field').show();
        index.closest('.form-field-group').find(case2).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
        break;
      case '3':
        index.closest('.form-field-group').find(case3_show).show().removeAttr('disabled').closest('.form-field').show();
        index.closest('.form-field-group').find(case3).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
        break;
      case '99':
        index.closest('.form-field-group').find(case99_show).show().removeAttr('disabled').closest('.form-field').show();
        index.closest('.form-field-group').find(case99).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
        break;
      default:
        index.closest('.form-field-group').find(case1_show).show().removeAttr('disabled').closest('.form-field').show();
        index.closest('.form-field-group').find(case1).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
    }
  };
  return DynamicField;
}();
exports.DynamicField = DynamicField;

/***/ }),

/***/ "./resources/assets/js/scripts/formbuilder.ts":
/*!****************************************************!*\
  !*** ./resources/assets/js/scripts/formbuilder.ts ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {



var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
var axios_1 = __importDefault(__webpack_require__(/*! axios */ "./node_modules/axios/dist/browser/axios.cjs"));
var jquery_1 = __importDefault(__webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"));
__webpack_require__(/*! select2 */ "./node_modules/select2/dist/js/select2.js");
var DynamicField_1 = __webpack_require__(/*! ./DynamicField */ "./resources/assets/js/scripts/DynamicField.ts");
var dynamicField = new DynamicField_1.DynamicField();
var FormBuilder = /** @class */function () {
  function FormBuilder() {}
  // adds new collection of sub-element
  FormBuilder.prototype.addForm = function (ev) {
    ev.preventDefault();
    var target = ev.target;
    var container = (0, jquery_1["default"])(target).attr('form_type') ? (0, jquery_1["default"])(".collection-container[form_type ='".concat((0, jquery_1["default"])(target).attr('form_type'), "']")) : (0, jquery_1["default"])('.collection-container');
    var count = (0, jquery_1["default"])(target).attr('child_count') ? parseInt((0, jquery_1["default"])(target).attr('child_count')) + 1 : (0, jquery_1["default"])(target).parent().find('.form-child-body').length;
    var parent_count = (0, jquery_1["default"])(target).attr('parent_count') ? parseInt((0, jquery_1["default"])(target).attr('parent_count')) : (0, jquery_1["default"])(target).parents('.multi-form').index() - 1;
    var wrapper_parent_count = (0, jquery_1["default"])(target).attr('wrapped_parent_count') ? parseInt((0, jquery_1["default"])(target).attr('wrapped_parent_count')) : (0, jquery_1["default"])(target).parents('.wrapped-child-body').index() - 1;
    var proto = container.data('prototype').replace(/__PARENT_NAME__/g, parent_count);
    if ((0, jquery_1["default"])(target).attr('has_child_collection')) {
      proto = proto.replace(/__WRAPPER_NAME__/g, count);
      proto = proto.replace(/__NAME__/g, 0);
    } else {
      proto = proto.replace(/__NAME__/g, count);
      proto = proto.replace(/__WRAPPER_NAME__/g, wrapper_parent_count);
    }
    (0, jquery_1["default"])(target).prev().append((0, jquery_1["default"])(proto));
    if ((0, jquery_1["default"])(target).attr('has_child_collection')) {
      (0, jquery_1["default"])(target).prev('.subelement').children('.wrapped-child-body').last().find('.add_to_collection').attr('wrapped_parent_count', count);
      (0, jquery_1["default"])(target).prev('.subelement').children('.wrapped-child-body').last().find('.add_to_collection').attr('parent_count', parent_count);
    }
    (0, jquery_1["default"])(target).prev().find('.wrapped-child-body').last().find('.add_to_collection').attr('wrapper_parent_count', wrapper_parent_count !== null && wrapper_parent_count !== void 0 ? wrapper_parent_count : 0);
    if ((0, jquery_1["default"])(target).attr('form_type')) {
      (0, jquery_1["default"])(target).prev().last().find('.select2').select2({
        placeholder: 'Select an option',
        allowClear: true
      });
      (0, jquery_1["default"])(this).find('.sub-attribute').wrapAll((0, jquery_1["default"])('<div class="form-field-group flex flex-wrap rounded-br-lg border-y border-r border-spring-50 sub-attribute-wrapper"></div>'));
      (0, jquery_1["default"])(target).prev('.subelement').children('.wrapped-child-body').last().find('.sub-attribute').wrapAll((0, jquery_1["default"])('<div class="form-field-group flex flex-wrap rounded-br-lg border-y border-r border-spring-50 sub-attribute-wrapper mt-6"></div>'));
    } else {
      (0, jquery_1["default"])(target).parent().find('.form-child-body').last().find('.select2').select2({
        placeholder: 'Select an option',
        allowClear: true
      });
    }
    (0, jquery_1["default"])(target).attr('child_count', count);
    dynamicField.aidTypeVocabularyHideField();
    dynamicField.sectorVocabularyHideField();
  };
  // adds parent collection
  FormBuilder.prototype.addParentForm = function (ev) {
    ev.preventDefault();
    var target = ev.target;
    var container = (0, jquery_1["default"])(target).attr('form_type') ? (0, jquery_1["default"])(".parent-collection[form_type ='".concat((0, jquery_1["default"])(target).attr('form_type'), "']")) : (0, jquery_1["default"])('.parent-collection');
    var count = (0, jquery_1["default"])(target).attr('parent_count') ? parseInt((0, jquery_1["default"])(target).attr('parent_count')) + 1 : ((0, jquery_1["default"])(target).prev().find('.multi-form').length ? (0, jquery_1["default"])(target).prev().find('.multi-form').length : (0, jquery_1["default"])(target).prev().find('.wrapped-child-body').length) + 1;
    var proto = container.data('prototype').replace(/__PARENT_NAME__/g, count);
    proto = proto.replace(/__NAME__/g, 0);
    (0, jquery_1["default"])(target).prev().append((0, jquery_1["default"])(proto));
    (0, jquery_1["default"])(target).prev().find('.multi-form').last().find('.select2').select2({
      placeholder: 'Select an option',
      allowClear: true
    });
    (0, jquery_1["default"])(target).prev().find('.multi-form').last().find('.add_to_collection').attr('parent_count', count);
    this.addWrapperOnAdd(target);
    (0, jquery_1["default"])(target).attr('parent_count', count);
    dynamicField.humanitarianScopeHideVocabularyUri();
    dynamicField.countryBudgetHideCodeField();
    dynamicField.sectorVocabularyHideField();
    dynamicField.recipientVocabularyHideField();
    dynamicField.policyVocabularyHideField();
    dynamicField.tagVocabularyHideField();
    dynamicField.transactionAidTypeVocabularyHideField();
    dynamicField.indicatorReferenceHideFieldUri();
  };
  // deletes collection
  FormBuilder.prototype.deleteForm = function (ev) {
    ev.preventDefault();
    var target = ev.target;
    var collectionLength = (0, jquery_1["default"])('.multi-form').length ? (0, jquery_1["default"])(target).closest('.subelement').find('.form-child-body').length : (0, jquery_1["default"])('.form-child-body').length;
    var count = (0, jquery_1["default"])('.add_to_collection').attr('child_count') ? parseInt((0, jquery_1["default"])('.add_to_collection').attr('child_count')) + 1 : collectionLength;
    (0, jquery_1["default"])('.add_to_collection').attr('child_count', count);
    if (collectionLength > 1) {
      var tg = (0, jquery_1["default"])(target).closest('.form-child-body');
      tg.next('.error').remove();
      tg.remove();
    }
  };
  // deletes parent collection
  FormBuilder.prototype.deleteParentForm = function (ev) {
    ev.preventDefault();
    var target = ev.target;
    var collectionLength = (0, jquery_1["default"])('.subelement').length;
    var count = (0, jquery_1["default"])('.add_to_parent').attr('child_count') ? parseInt((0, jquery_1["default"])('.add_to_parent').attr('child_count')) + 1 : collectionLength;
    (0, jquery_1["default"])('.add_to_parent').attr('child_count', count);
    (0, jquery_1["default"])('.add_to_parent').attr('parent_count', count);
    if (collectionLength > 2) {
      (0, jquery_1["default"])(target).parent().remove();
    }
  };
  //add wrapper div around the attributes
  FormBuilder.prototype.addWrapper = function () {
    (0, jquery_1["default"])('.multi-form').each(function () {
      (0, jquery_1["default"])(this).find('.attribute').wrapAll((0, jquery_1["default"])('<div class="form-field-group flex flex-wrap rounded-br-lg border-y border-r border-spring-50 attribute-wrapper mb-4"></div>'));
    });
    (0, jquery_1["default"])('.subelement').find('.wrapped-child-body').each(function () {
      (0, jquery_1["default"])(this).find('.sub-attribute').wrapAll((0, jquery_1["default"])('<div class="form-field-group flex flex-wrap rounded-br-lg border-y border-r border-spring-50 sub-attribute-wrapper mb-4"></div>'));
    });
    var formField = (0, jquery_1["default"])('form>.form-field');
    if (formField.length > 0) {
      formField.wrapAll('<div class="form-field-group-outer grid xl:grid-cols-2 mb-6 -mx-3 gap-y-6"></div>');
    }
  };
  FormBuilder.prototype.addWrapperOnAdd = function (target) {
    (0, jquery_1["default"])(target).prev().find('.multi-form').last().find('.attribute').wrapAll((0, jquery_1["default"])('<div class="form-field-group grid xl:grid-cols-2 rounded-br-lg border-y border-r border-spring-50 attribute-wrapper mb-4"></div>'));
    (0, jquery_1["default"])(target).prev().find('.multi-form').last().find('.subelement').find('.wrapped-child-body').each(function () {
      (0, jquery_1["default"])(this).find('.sub-attribute').wrapAll((0, jquery_1["default"])('<div class="form-field-group flex flex-wrap rounded-br-lg border-y border-r border-spring-50 sub-attribute-wrapper mb-4"></div>'));
    });
  };
  FormBuilder.prototype.textAreaHeight = function (ev) {
    var target = ev.target;
    var height = target.scrollHeight;
    (0, jquery_1["default"])(target).css('height', height);
  };
  FormBuilder.prototype.addToCollection = function () {
    var _this = this;
    (0, jquery_1["default"])('body').on('click', '.add_to_collection', function (event) {
      if ((0, jquery_1["default"])(event.target).hasClass('add-icon')) {
        event.stopPropagation();
        (0, jquery_1["default"])(event.target).parent('button').trigger('click');
      } else {
        _this.addForm(event);
      }
    });
    (0, jquery_1["default"])('.add_to_parent').on('click', function (event) {
      if ((0, jquery_1["default"])(event.target).hasClass('add-icon')) {
        event.stopPropagation();
        (0, jquery_1["default"])(event.target).parent('button').trigger('click');
      } else {
        _this.addParentForm(event);
      }
    });
  };
  FormBuilder.prototype.deleteCollection = function () {
    var _this = this;
    var deleteConfirmation = (0, jquery_1["default"])('.delete-confirmation'),
      cancelPopup = '.cancel-popup',
      deleteConfirm = '.delete-confirm';
    var deleteIndex = {},
      childOrParent = '';
    (0, jquery_1["default"])('body').on('click', '.delete', function (event) {
      deleteConfirmation.fadeIn();
      deleteIndex = event;
      childOrParent = 'child';
    });
    (0, jquery_1["default"])('body').on('click', cancelPopup, function () {
      deleteConfirmation.fadeOut();
      deleteIndex = {};
      childOrParent = '';
    });
    (0, jquery_1["default"])('body').on('click', deleteConfirm, function () {
      if (childOrParent === 'child') {
        _this.deleteForm(deleteIndex);
      } else if (childOrParent === 'parent') {
        _this.deleteParentForm(deleteIndex);
      }
      deleteConfirmation.fadeOut();
      deleteIndex = {};
      childOrParent = '';
    });
    (0, jquery_1["default"])('body').on('click', '.delete-parent', function (event) {
      deleteConfirmation.fadeIn();
      deleteIndex = event;
      childOrParent = 'parent';
    });
    (0, jquery_1["default"])('.select2').select2({
      placeholder: 'Select an option',
      allowClear: true
    });
    // update format on change of document link
    (0, jquery_1["default"])('body').on('change', 'input[id*="[url]"]', function () {
      var _this = this;
      var _a;
      var filePath = ((_a = (0, jquery_1["default"])(this).val()) !== null && _a !== void 0 ? _a : '').toString();
      var document = (0, jquery_1["default"])(this).closest('.form-field-group').find('input[id*="[document]"]').val();
      var url = "/mimetype?url=".concat(filePath, "&type=url");
      (0, jquery_1["default"])(this).closest('.form-field').find('.text-danger').remove();
      if (filePath !== '') {
        axios_1["default"].get(url).then(function (response) {
          if (response.data.success) {
            var format = response.data.data.mimetype;
            (0, jquery_1["default"])(_this).closest('.form-field-group').find('select[id*="[format]"]').val(format).trigger('change');
          } else {
            (0, jquery_1["default"])(_this).closest('.form-field').find('.text-danger').remove();
            (0, jquery_1["default"])(_this).closest('.form-field').append("<div class='text-danger error'>" + response.data.message + '</div>');
            (0, jquery_1["default"])(_this).closest('.form-field-group').find('select[id*="[format]"]').val('').trigger('change');
          }
          (0, jquery_1["default"])(_this).closest('.form-field-group').find('input[id*="[document]"]').val('').trigger('change');
        });
      } else if (!document || document === '') {
        (0, jquery_1["default"])(this).closest('.form-field-group').find('select[id*="[format]"]').val('').trigger('change');
      }
    });
    (0, jquery_1["default"])('body').on('change', 'input[id*="[document]"]', function () {
      var _this = this;
      var _a;
      var filePath = ((_a = (0, jquery_1["default"])(this).val()) !== null && _a !== void 0 ? _a : '').toString();
      var url = "/mimetype?url=".concat(filePath, "&&type=document");
      var fileUrl = (0, jquery_1["default"])(this).closest('.form-field-group').find('input[id*="[url]"]').val();
      (0, jquery_1["default"])(this).closest('.form-field').find('.text-danger').remove();
      if (filePath !== '') {
        axios_1["default"].get(url).then(function (response) {
          if (response.data.success) {
            var format = response.data.data.mimetype;
            (0, jquery_1["default"])(_this).closest('.form-field-group').find('select[id*="[format]"]').val(format).trigger('change');
          } else {
            (0, jquery_1["default"])(_this).closest('.form-field-group').find('select[id*="[format]"]').val('').trigger('change');
          }
        });
        (0, jquery_1["default"])(this).closest('.form-field-group').find('input[id*="[url]"]').val('').trigger('change');
      } else if (!fileUrl || fileUrl === '') {
        (0, jquery_1["default"])(this).closest('.form-field-group').find('select[id*="[format]"]').val('').trigger('change');
      }
    });
  };
  return FormBuilder;
}();
(0, jquery_1["default"])(function () {
  var formBuilder = new FormBuilder();
  formBuilder.addWrapper();
  dynamicField.hideShowFormFields();
  dynamicField.updateActivityIdentifier();
  formBuilder.addToCollection();
  formBuilder.deleteCollection();
  /**
   * Text area height on typing
   */
  var textAreaTarget = (0, jquery_1["default"])('textarea.form__input');
  if (textAreaTarget.length > 0) {
    (0, jquery_1["default"])('body').on('input', 'textarea.form__input', function (event) {
      formBuilder.textAreaHeight(event);
    });
  }
  (0, jquery_1["default"])('body').on('select2:open', '.select2', function () {
    var select_search = document.querySelector('.select2-search__field');
    if (select_search) {
      select_search.focus();
    }
  });
  /**
   * checks registration agency, country and registration number to deduce identifier
   */
  updateRegistrationAgency((0, jquery_1["default"])('#organization_country'));
  (0, jquery_1["default"])('#organisation_identifier').attr('disabled', 'disabled');
  function updateRegistrationAgency(country) {
    var endpoint = country.val() ? '/organisation/agency/' + country.val() : '/organisation/agency/';
    jquery_1["default"].ajax({
      url: endpoint
    }).then(function (response) {
      var _a;
      var current_val = (_a = (0, jquery_1["default"])('#organization_registration_agency').val()) !== null && _a !== void 0 ? _a : '';
      var val = false;
      (0, jquery_1["default"])('#organization_registration_agency').empty();
      for (var data in response.data) {
        if (data === current_val) {
          val = true;
        }
        (0, jquery_1["default"])('#organization_registration_agency').append(new Option(response.data[data], data, true, true)).val('').trigger('change');
      }
      (0, jquery_1["default"])('#organization_registration_agency').val(val ? current_val : '').trigger('change');
    });
  }
  (0, jquery_1["default"])('body').on('select2:select', '#organization_country', function () {
    updateRegistrationAgency((0, jquery_1["default"])(this));
  });
  (0, jquery_1["default"])('body').on('select2:clear', '#organization_country', function () {
    updateRegistrationAgency((0, jquery_1["default"])(this));
  });
  (0, jquery_1["default"])('body').on('select2:select', '#organization_registration_agency', function () {
    var identifier = (0, jquery_1["default"])(this).val() + '-' + (0, jquery_1["default"])('#registration_number').val();
    (0, jquery_1["default"])('#organisation_identifier').val(identifier);
  });
  (0, jquery_1["default"])('body').on('select2:clear', '#organization_registration_agency', function () {
    var identifier = '-' + (0, jquery_1["default"])('#registration_number').val();
    (0, jquery_1["default"])('#organisation_identifier').val(identifier);
  });
  (0, jquery_1["default"])('body').on('keyup', '#registration_number', function () {
    var identifier = (0, jquery_1["default"])('#organization_registration_agency').val() + '-' + (0, jquery_1["default"])(this).val();
    (0, jquery_1["default"])('#organisation_identifier').val(identifier);
  });
  // add class to title of collection when validation error occurs on collection level
  var subelement = document.querySelectorAll('.subelement');
  for (var i = 0; i < subelement.length; i++) {
    var title = subelement[i].querySelector('.control-label');
    var errorContainer = subelement[i].querySelector('.collection_error');
    var childCount = errorContainer === null || errorContainer === void 0 ? void 0 : errorContainer.childElementCount;
    if (childCount && childCount > 0) {
      title === null || title === void 0 ? void 0 : title.classList.add('error-title');
    }
  }
  // Adding cursor not allowed to <select> where elementJsonSchema read_only : true
  var readOnlySelects = document.querySelectorAll('select.cursor-not-allowed');
  for (var i = 0; i < readOnlySelects.length; i++) {
    var select = readOnlySelects[i];
    var selectElementParentWrapper = select.nextSibling;
    var selectElementParent = selectElementParentWrapper === null || selectElementParentWrapper === void 0 ? void 0 : selectElementParentWrapper.firstChild;
    var selectElement = selectElementParent === null || selectElementParent === void 0 ? void 0 : selectElementParent.firstChild;
    if (selectElement) {
      selectElement.style.cursor = 'not-allowed';
    }
  }
  function handleInitialFormLoad() {
    var allCollapsable = document.querySelectorAll('.collapsable');
    allCollapsable.forEach(function (element) {
      var htmlElement = element;
      var buttonInfo = getButtonInfo(htmlElement);
      var hideButton = renderHideButton(htmlElement, buttonInfo);
      /** Click hide button if all values in this collapsable item is empty*/
      if (!hasNonEmptyFields(htmlElement)) {
        hideButton.click();
      }
    });
  }
  function hasNonEmptyFields(element) {
    // Check if any input, select, or textarea inside the element has a value
    var inputs = element.querySelectorAll('input, select, textarea');
    return Array.from(inputs).some(function (input) {
      if (input instanceof HTMLInputElement || input instanceof HTMLSelectElement || input instanceof HTMLTextAreaElement) {
        return input.value.trim() !== '';
      }
      return false;
    });
  }
  function handleNewAdditionsToFormViaMutatorsAndObservers() {
    var observer = new MutationObserver(function (mutationsList) {
      for (var _i = 0, mutationsList_1 = mutationsList; _i < mutationsList_1.length; _i++) {
        var mutation = mutationsList_1[_i];
        if (mutation.type === 'childList') {
          var addedNodes = Array.from(mutation.addedNodes);
          addedNodes.forEach(function (node) {
            // Check if the added node is an HTMLElement
            if (node instanceof HTMLElement) {
              node.querySelectorAll('.collapsable').forEach(function (element) {
                var htmlElement = element;
                var buttonInfo = getButtonInfo(htmlElement);
                renderHideButton(htmlElement, buttonInfo);
              });
              var newCollapseButtons = node.querySelectorAll('.collapsable-hide-button');
              newCollapseButtons.forEach(function (button) {
                var buttonElement = button;
                buttonElement.click();
              });
            }
          });
        }
      }
    });
    observer.observe(document.body, {
      childList: true,
      subtree: true
    });
  }
  function getButtonInfo(collapsableItem) {
    var addButton = collapsableItem.nextElementSibling;
    if (addButton && addButton.tagName.toLowerCase() === 'button') {
      return {
        dom: addButton,
        relation: 'sibling'
      };
    }
    addButton = collapsableItem.querySelector('button.add_more');
    if (addButton) {
      return {
        dom: addButton,
        relation: 'child'
      };
    }
    return {
      dom: null,
      relation: 'none'
    };
  }
  function renderHideButton(collapsableItem, buttonInfo) {
    var hideButton = document.createElement('button');
    hideButton.className = 'absolute top-0 right-0 bg-spring-50 text-white px-2 collapsable-hide-button';
    hideButton.textContent = 'Hide';
    hideButton.setAttribute('type', 'button');
    var handleHideButtonClick = function handleHideButtonClick() {
      hideElement(hideButtonHolder);
      hideElement(buttonInfo.dom);
      renderPlaceholderCard(collapsableItem, buttonInfo);
    };
    var hideButtonHolder = null;
    if (buttonInfo.dom === null) {
      hideButtonHolder = Array.from(collapsableItem.children).find(function (child) {
        return child.tagName === 'DIV';
      });
    } else if (buttonInfo.relation === 'child') {
      hideButtonHolder = buttonInfo.dom.parentElement;
    } else {
      var previousSibling_1 = buttonInfo.dom.previousElementSibling;
      hideButtonHolder = Array.from((previousSibling_1 === null || previousSibling_1 === void 0 ? void 0 : previousSibling_1.children) || []).find(function (child) {
        return child.tagName === 'DIV';
      });
      if (hideButtonHolder) {
        hideButton.addEventListener('click', function () {
          Array.from(previousSibling_1.children).forEach(function (child) {
            if (child.tagName !== 'LABEL' && !child.classList.contains('collapsable-placeholder')) {
              hideElement(child);
            }
          });
          hideElement(buttonInfo.dom);
        });
      }
    }
    if (hideButtonHolder) {
      hideButtonHolder.classList.add('relative');
      hideButton.addEventListener('click', handleHideButtonClick);
      hideButtonHolder.appendChild(hideButton);
    }
    return hideButton;
  }
  function renderPlaceholderCard(collapsableItem, buttonInfo) {
    var placeholderDiv = createPlaceholderDiv();
    var displayName = getDisplayName(collapsableItem, buttonInfo);
    placeholderDiv.innerHTML = "You can expand the optional <strong>".concat(displayName, "</strong> field by clicking here.");
    if (buttonInfo.dom === null) {
      handleNoButtonInfo(collapsableItem, placeholderDiv);
    } else if (buttonInfo.relation === 'child') {
      handleChildRelation(collapsableItem, placeholderDiv);
    } else {
      handleSiblingRelation(collapsableItem, buttonInfo, placeholderDiv);
    }
    collapsableItem.appendChild(placeholderDiv);
  }
  function createPlaceholderDiv() {
    var placeholderDiv = document.createElement('div');
    placeholderDiv.classList.add('border-x', 'border-y', 'border-spring-50', 'px-6', 'py-6', 'text-sm', 'text-n-40', 'cursor-pointer', 'collapsable-placeholder');
    return placeholderDiv;
  }
  function getDisplayName(collapsableItem, buttonInfo) {
    var _a, _b;
    var displayNameLabel = buttonInfo.dom ? (_a = buttonInfo.dom.previousElementSibling) === null || _a === void 0 ? void 0 : _a.querySelector('label') : collapsableItem.querySelector('label');
    var displayName = (_b = displayNameLabel === null || displayNameLabel === void 0 ? void 0 : displayNameLabel.innerText) !== null && _b !== void 0 ? _b : 'element';
    return getFirstWordFromText(displayName);
  }
  function handleNoButtonInfo(collapsableItem, placeholderDiv) {
    adjustBorders(collapsableItem, 'border-l');
    adjustPadding(collapsableItem, 'pb-11');
    addPlaceholderClickListener(collapsableItem, placeholderDiv);
  }
  function handleChildRelation(collapsableItem, placeholderDiv) {
    adjustBorders(collapsableItem, 'border-l');
    adjustPadding(collapsableItem, 'pb-11');
    addPlaceholderClickListener(collapsableItem, placeholderDiv);
  }
  function handleSiblingRelation(collapsableItem, buttonInfo, placeholderDiv) {
    var _a;
    placeholderDiv.classList.add('mb-6');
    (_a = buttonInfo.dom) === null || _a === void 0 ? void 0 : _a.classList.add('mb-6');
    adjustBorders(collapsableItem, 'border-l');
    adjustPadding(collapsableItem, 'pb-11');
    addPlaceholderClickListener(collapsableItem, placeholderDiv, buttonInfo);
  }
  function adjustBorders(collapsableItem, borderClass) {
    if (collapsableItem.classList.contains(borderClass)) {
      console.log('here', collapsableItem);
      collapsableItem.classList.add("".concat(borderClass, "-was-here"));
      collapsableItem.classList.remove(borderClass);
    } else {
      console.log('maru', collapsableItem);
    }
  }
  function adjustPadding(collapsableItem, paddingClass) {
    if (collapsableItem.classList.contains(paddingClass)) {
      collapsableItem.classList.add("".concat(paddingClass, "-was-here"));
      collapsableItem.classList.remove(paddingClass);
    }
  }
  function addPlaceholderClickListener(collapsableItem, placeholderDiv, buttonInfo) {
    placeholderDiv.addEventListener('click', function () {
      if (collapsableItem.classList.contains('border-l-was-here')) {
        collapsableItem.classList.add('border-l');
        collapsableItem.classList.remove('border-l-was-here');
      }
      if (collapsableItem.classList.contains('pb-11-was-here')) {
        collapsableItem.classList.add('pb-11');
        collapsableItem.classList.remove('pb-11-was-here');
      }
      revealHiddenElements(collapsableItem);
      if (buttonInfo === null || buttonInfo === void 0 ? void 0 : buttonInfo.dom) {
        buttonInfo.dom.classList.remove('collapsable-hide');
      }
      removeElement(placeholderDiv);
    });
  }
  function getFirstWordFromText(text) {
    var trimmedText = text.trim();
    var words = trimmedText.split(/\s+/);
    return words[0];
  }
  function revealHiddenElements(collapsableItem) {
    collapsableItem.querySelectorAll('.collapsable-hide').forEach(function (element) {
      element.classList.remove('collapsable-hide');
    });
  }
  function hideElement(element) {
    var _a;
    (_a = element === null || element === void 0 ? void 0 : element.classList) === null || _a === void 0 ? void 0 : _a.add('collapsable-hide');
  }
  function removeElement(element) {
    element.remove();
  }
  handleInitialFormLoad();
  handleNewAdditionsToFormViaMutatorsAndObservers();
});

/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ __webpack_require__.O(0, ["/js/vendor"], () => (__webpack_exec__("./resources/assets/js/scripts/formbuilder.ts")));
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ }
]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QztBQUNyRCxDQUFDLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2pzL3NjcmlwdHMvRHluYW1pY0ZpZWxkLnRzIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9hc3NldHMvanMvc2NyaXB0cy9mb3JtYnVpbGRlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRHluYW1pY0ZpZWxkID0gdm9pZCAwO1xudmFyIGpxdWVyeV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJqcXVlcnlcIikpO1xucmVxdWlyZShcInNlbGVjdDJcIik7XG52YXIgRHluYW1pY0ZpZWxkID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIER5bmFtaWNGaWVsZCgpIHtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSGlkZSBhbmQgU2hvdyBkaWZmZXJlbnQgZm9ybSBmaWVsZHMgYmFzZWQgb24gdm9jYWJ1bGFyeSBhbmQgb3RoZXIgdHlwZXNcbiAgICAgKi9cbiAgICBEeW5hbWljRmllbGQucHJvdG90eXBlLmhpZGVTaG93Rm9ybUZpZWxkcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5odW1hbml0YXJpYW5TY29wZUhpZGVWb2NhYnVsYXJ5VXJpKCk7XG4gICAgICAgIHRoaXMuY291bnRyeUJ1ZGdldEhpZGVDb2RlRmllbGQoKTtcbiAgICAgICAgdGhpcy5haWRUeXBlVm9jYWJ1bGFyeUhpZGVGaWVsZCgpO1xuICAgICAgICB0aGlzLnNlY3RvclZvY2FidWxhcnlIaWRlRmllbGQoKTtcbiAgICAgICAgdGhpcy5wb2xpY3lWb2NhYnVsYXJ5SGlkZUZpZWxkKCk7XG4gICAgICAgIHRoaXMucmVjaXBpZW50Vm9jYWJ1bGFyeUhpZGVGaWVsZCgpO1xuICAgICAgICB0aGlzLnNlY3RvclZvY2FidWxhcnlIaWRlRmllbGQoKTtcbiAgICAgICAgdGhpcy50YWdWb2NhYnVsYXJ5SGlkZUZpZWxkKCk7XG4gICAgICAgIHRoaXMudHJhbnNhY3Rpb25BaWRUeXBlVm9jYWJ1bGFyeUhpZGVGaWVsZCgpO1xuICAgICAgICB0aGlzLmluZGljYXRvclJlZmVyZW5jZUhpZGVGaWVsZFVyaSgpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogSHVtYW5pdGFyaWFuIFNjb3BlIEZvcm0gUGFnZVxuICAgICAqXG4gICAgICogQExvZ2ljIGhpZGUgdm9jYWJ1bGFyeS11cmkgZmllbGQgYmFzZWQgb24gJ0B2b2NhYnVsYXJ5JyBmaWVsZCB2YWx1ZVxuICAgICAqL1xuICAgIER5bmFtaWNGaWVsZC5wcm90b3R5cGUuaHVtYW5pdGFyaWFuU2NvcGVIaWRlVm9jYWJ1bGFyeVVyaSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGh1bWFuaXRhcmlhblNjb3BlVm9jYWJ1bGFyeSA9ICgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnc2VsZWN0W2lkXj1cImh1bWFuaXRhcmlhbl9zY29wZVwiXVtpZCo9XCJbdm9jYWJ1bGFyeV1cIl0nKTtcbiAgICAgICAgaWYgKGh1bWFuaXRhcmlhblNjb3BlVm9jYWJ1bGFyeS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAvLyBoaWRlIGZpZWxkcyBvbiBwYWdlIGxvYWRcbiAgICAgICAgICAgIGpxdWVyeV8xLmRlZmF1bHQuZWFjaChodW1hbml0YXJpYW5TY29wZVZvY2FidWxhcnksIGZ1bmN0aW9uIChpbmRleCwgc2NvcGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgdmFyIHZhbCA9IChfYSA9ICgwLCBqcXVlcnlfMS5kZWZhdWx0KShzY29wZSkudmFsKCkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICcnO1xuICAgICAgICAgICAgICAgIF90aGlzLmhpZGVIdW1hbml0YXJpYW5TY29wZUZpZWxkKCgwLCBqcXVlcnlfMS5kZWZhdWx0KShzY29wZSksIHZhbC50b1N0cmluZygpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gaGlkZS9zaG93IGZpZWxkcyBvbiB2YWx1ZSBjaGFuZ2VcbiAgICAgICAgICAgIGh1bWFuaXRhcmlhblNjb3BlVm9jYWJ1bGFyeS5vbignc2VsZWN0MjpzZWxlY3QnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIHZhciB2YWwgPSBlLnBhcmFtcy5kYXRhLmlkO1xuICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IGUudGFyZ2V0O1xuICAgICAgICAgICAgICAgIF90aGlzLmhpZGVIdW1hbml0YXJpYW5TY29wZUZpZWxkKCgwLCBqcXVlcnlfMS5kZWZhdWx0KShpbmRleCksIHZhbCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIGhpZGUvc2hvdyBmaWVsZHMgb24gdmFsdWUgY2xlYXJcbiAgICAgICAgICAgIGh1bWFuaXRhcmlhblNjb3BlVm9jYWJ1bGFyeS5vbignc2VsZWN0MjpjbGVhcicsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gZS50YXJnZXQ7XG4gICAgICAgICAgICAgICAgX3RoaXMuaGlkZUh1bWFuaXRhcmlhblNjb3BlRmllbGQoKDAsIGpxdWVyeV8xLmRlZmF1bHQpKGluZGV4KSwgJycpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIGhpZGUgY291bnRyeSBidWRnZXQgYmFzZWQgb24gdm9jYWJ1bGFyeVxuICAgIER5bmFtaWNGaWVsZC5wcm90b3R5cGUuaGlkZUh1bWFuaXRhcmlhblNjb3BlRmllbGQgPSBmdW5jdGlvbiAoaW5kZXgsIHZhbHVlKSB7XG4gICAgICAgIHZhciBodW1hbml0YXJpYW5TY29wZUhpZGVWb2NhYnVsYXJ5VXJpID0gJ2lucHV0W2lkXj1cImh1bWFuaXRhcmlhbl9zY29wZVwiXVtpZCo9XCJbdm9jYWJ1bGFyeV91cmldXCJdJztcbiAgICAgICAgaWYgKHZhbHVlID09PSAnOTknKSB7XG4gICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZC1ncm91cCcpXG4gICAgICAgICAgICAgICAgLmZpbmQoaHVtYW5pdGFyaWFuU2NvcGVIaWRlVm9jYWJ1bGFyeVVyaSlcbiAgICAgICAgICAgICAgICAuc2hvdygpXG4gICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2Rpc2FibGVkJylcbiAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQnKVxuICAgICAgICAgICAgICAgIC5zaG93KCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZC1ncm91cCcpXG4gICAgICAgICAgICAgICAgLmZpbmQoaHVtYW5pdGFyaWFuU2NvcGVIaWRlVm9jYWJ1bGFyeVVyaSlcbiAgICAgICAgICAgICAgICAudmFsKCcnKVxuICAgICAgICAgICAgICAgIC50cmlnZ2VyKCdjaGFuZ2UnKVxuICAgICAgICAgICAgICAgIC5oaWRlKClcbiAgICAgICAgICAgICAgICAuYXR0cignZGlzYWJsZWQnLCAnZGlzYWJsZWQnKVxuICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgLmhpZGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogSHVtYW5pdGFyaWFuIFNjb3BlIEZvcm0gUGFnZVxuICAgICAqXG4gICAgICogQExvZ2ljIGhpZGUgdm9jYWJ1bGFyeS11cmkgZmllbGQgYmFzZWQgb24gJ0B2b2NhYnVsYXJ5JyBmaWVsZCB2YWx1ZVxuICAgICAqL1xuICAgIER5bmFtaWNGaWVsZC5wcm90b3R5cGUuaW5kaWNhdG9yUmVmZXJlbmNlSGlkZUZpZWxkVXJpID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgcmVmZXJlbmNlVm9jYWJ1bGFyeSA9ICgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnc2VsZWN0W2lkXj1cInJlZmVyZW5jZVwiXVtpZCo9XCJbdm9jYWJ1bGFyeV1cIl0nKTtcbiAgICAgICAgaWYgKHJlZmVyZW5jZVZvY2FidWxhcnkubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgLy8gaGlkZSBmaWVsZHMgb24gcGFnZSBsb2FkXG4gICAgICAgICAgICBqcXVlcnlfMS5kZWZhdWx0LmVhY2gocmVmZXJlbmNlVm9jYWJ1bGFyeSwgZnVuY3Rpb24gKGluZGV4LCBzY29wZSkge1xuICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICB2YXIgdmFsID0gKF9hID0gKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHNjb3BlKS52YWwoKSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJyc7XG4gICAgICAgICAgICAgICAgX3RoaXMuaW5kaWNhdG9yUmVmZXJlbmNlSGlkZUZpZWxkKCgwLCBqcXVlcnlfMS5kZWZhdWx0KShzY29wZSksIHZhbC50b1N0cmluZygpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gaGlkZS9zaG93IGZpZWxkcyBvbiB2YWx1ZSBjaGFuZ2VcbiAgICAgICAgICAgIHJlZmVyZW5jZVZvY2FidWxhcnkub24oJ3NlbGVjdDI6c2VsZWN0JywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdmFsID0gZS5wYXJhbXMuZGF0YS5pZDtcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBlLnRhcmdldDtcbiAgICAgICAgICAgICAgICBfdGhpcy5pbmRpY2F0b3JSZWZlcmVuY2VIaWRlRmllbGQoKDAsIGpxdWVyeV8xLmRlZmF1bHQpKGluZGV4KSwgdmFsKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gaGlkZS9zaG93IGZpZWxkcyBvbiB2YWx1ZSBjbGVhclxuICAgICAgICAgICAgcmVmZXJlbmNlVm9jYWJ1bGFyeS5vbignc2VsZWN0MjpjbGVhcicsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gZS50YXJnZXQ7XG4gICAgICAgICAgICAgICAgX3RoaXMuaW5kaWNhdG9yUmVmZXJlbmNlSGlkZUZpZWxkKCgwLCBqcXVlcnlfMS5kZWZhdWx0KShpbmRleCksICcnKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvLyBoaWRlIGNvdW50cnkgYnVkZ2V0IGJhc2VkIG9uIHZvY2FidWxhcnlcbiAgICBEeW5hbWljRmllbGQucHJvdG90eXBlLmluZGljYXRvclJlZmVyZW5jZUhpZGVGaWVsZCA9IGZ1bmN0aW9uIChpbmRleCwgdmFsdWUpIHtcbiAgICAgICAgdmFyIHJlZmVyZW5jZVVyaSA9ICdpbnB1dFtpZF49XCJyZWZlcmVuY2VcIl1baWQqPVwiW2luZGljYXRvcl91cmldXCJdJztcbiAgICAgICAgaWYgKHZhbHVlID09PSAnOTknKSB7XG4gICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZC1ncm91cCcpXG4gICAgICAgICAgICAgICAgLmZpbmQocmVmZXJlbmNlVXJpKVxuICAgICAgICAgICAgICAgIC5zaG93KClcbiAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignZGlzYWJsZWQnKVxuICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgLnNob3coKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAuZmluZChyZWZlcmVuY2VVcmkpXG4gICAgICAgICAgICAgICAgLnZhbCgnJylcbiAgICAgICAgICAgICAgICAudHJpZ2dlcignY2hhbmdlJylcbiAgICAgICAgICAgICAgICAuaGlkZSgpXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2Rpc2FibGVkJywgJ2Rpc2FibGVkJylcbiAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQnKVxuICAgICAgICAgICAgICAgIC5oaWRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENvdW50cnkgQnVkZ2V0IEZvcm0gUGFnZVxuICAgICAqXG4gICAgICogQExvZ2ljIHNob3cvaGlkZSAnY29kZScgZmllbGQgYmFzZWQgb24gJ0B2b2NhYnVsYXJ5JyBmaWVsZCB2YWx1ZVxuICAgICAqL1xuICAgIER5bmFtaWNGaWVsZC5wcm90b3R5cGUuY291bnRyeUJ1ZGdldEhpZGVDb2RlRmllbGQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdmFyIGNvdW50cnlCdWRnZXRWb2NhYnVsYXJ5ID0gKDAsIGpxdWVyeV8xLmRlZmF1bHQpKCdzZWxlY3QjY291bnRyeV9idWRnZXRfdm9jYWJ1bGFyeScpO1xuICAgICAgICBpZiAoY291bnRyeUJ1ZGdldFZvY2FidWxhcnkubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgLy8gaGlkZS9zaG93IG9uIHBhZ2UgbG9hZFxuICAgICAgICAgICAgdmFyIHZhbCA9IChfYSA9IGNvdW50cnlCdWRnZXRWb2NhYnVsYXJ5LnZhbCgpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAnMSc7XG4gICAgICAgICAgICB0aGlzLmhpZGVDb3VudHJ5QnVkZ2V0RmllbGQodmFsLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgLy8gaGlkZS9zaG93IG9uIHZhbHVlIGNoYW5nZVxuICAgICAgICAgICAgY291bnRyeUJ1ZGdldFZvY2FidWxhcnkub24oJ3NlbGVjdDI6c2VsZWN0JywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdmFsID0gZS5wYXJhbXMuZGF0YS5pZDtcbiAgICAgICAgICAgICAgICBfdGhpcy5oaWRlQ291bnRyeUJ1ZGdldEZpZWxkKHZhbCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vaGlkZS9zaG93IGJhc2VkIG9uIHZhbHVlIGNsZWFyZWRcbiAgICAgICAgICAgIGNvdW50cnlCdWRnZXRWb2NhYnVsYXJ5Lm9uKCdzZWxlY3QyOmNsZWFyJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF90aGlzLmhpZGVDb3VudHJ5QnVkZ2V0RmllbGQoJycpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEhpZGUgQ291bnRyeSBCdWRnZXQgRmllbGRzXG4gICAgICovXG4gICAgRHluYW1pY0ZpZWxkLnByb3RvdHlwZS5oaWRlQ291bnRyeUJ1ZGdldEZpZWxkID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBjb3VudHJ5QnVkZ2V0Q29kZUlucHV0ID0gJ2lucHV0W2lkXj1cImJ1ZGdldF9pdGVtXCJdW2lkKj1cIltjb2RlX3RleHRdXCJdJywgY291bnRyeUJ1ZGdldENvZGVTZWxlY3QgPSAnc2VsZWN0W2lkXj1cImJ1ZGdldF9pdGVtXCJdW2lkKj1cIltjb2RlXVwiXSc7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gJzEnKSB7XG4gICAgICAgICAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoY291bnRyeUJ1ZGdldENvZGVTZWxlY3QpXG4gICAgICAgICAgICAgICAgLnZhbCgnJylcbiAgICAgICAgICAgICAgICAudHJpZ2dlcignY2hhbmdlJylcbiAgICAgICAgICAgICAgICAuYXR0cignZGlzYWJsZWQnLCAnZGlzYWJsZWQnKVxuICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgLmhpZGUoKTtcbiAgICAgICAgICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KShjb3VudHJ5QnVkZ2V0Q29kZUlucHV0KVxuICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkJylcbiAgICAgICAgICAgICAgICAuc2hvdygpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKGNvdW50cnlCdWRnZXRDb2RlU2VsZWN0KVxuICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkJylcbiAgICAgICAgICAgICAgICAuc2hvdygpO1xuICAgICAgICAgICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKGNvdW50cnlCdWRnZXRDb2RlSW5wdXQpXG4gICAgICAgICAgICAgICAgLnZhbCgnJylcbiAgICAgICAgICAgICAgICAudHJpZ2dlcignY2hhbmdlJylcbiAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQnKVxuICAgICAgICAgICAgICAgIC5oaWRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEFpZFR5cGUgRm9ybSBQYWdlXG4gICAgICpcbiAgICAgKiBATG9naWMgaGlkZSB2b2NhYnVsYXJ5LXVyaSBhbmQgY29kZXMgZmllbGQgYmFzZWQgb24gJ0B2b2NhYnVsYXJ5JyBmaWVsZCB2YWx1ZVxuICAgICAqL1xuICAgIER5bmFtaWNGaWVsZC5wcm90b3R5cGUuYWlkVHlwZVZvY2FidWxhcnlIaWRlRmllbGQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBhaWR0eXBlX3ZvY2FidWxhcnkgPSAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoJ3NlbGVjdFtpZCo9XCJkZWZhdWx0X2FpZF90eXBlX3ZvY2FidWxhcnlcIl0nKTtcbiAgICAgICAgaWYgKGFpZHR5cGVfdm9jYWJ1bGFyeS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBqcXVlcnlfMS5kZWZhdWx0LmVhY2goYWlkdHlwZV92b2NhYnVsYXJ5LCBmdW5jdGlvbiAoaW5kZXgsIGl0ZW0pIHtcbiAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSAoX2EgPSAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoaXRlbSkudmFsKCkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICcxJztcbiAgICAgICAgICAgICAgICBfdGhpcy5oaWRlQWlkVHlwZVNlbGVjdEZpZWxkKCgwLCBqcXVlcnlfMS5kZWZhdWx0KShpdGVtKSwgZGF0YS50b1N0cmluZygpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYWlkdHlwZV92b2NhYnVsYXJ5Lm9uKCdzZWxlY3QyOnNlbGVjdCcsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSBlLnBhcmFtcy5kYXRhLmlkO1xuICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSBlLnRhcmdldDtcbiAgICAgICAgICAgICAgICBfdGhpcy5oaWRlQWlkVHlwZVNlbGVjdEZpZWxkKCgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0YXJnZXQpLCBkYXRhKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYWlkdHlwZV92b2NhYnVsYXJ5Lm9uKCdzZWxlY3QyOmNsZWFyJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gZS50YXJnZXQ7XG4gICAgICAgICAgICAgICAgX3RoaXMuaGlkZUFpZFR5cGVTZWxlY3RGaWVsZCgoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGFyZ2V0KSwgJycpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEFpZFR5cGUgRm9ybSBQYWdlXG4gICAgICpcbiAgICAgKiBATG9naWMgaGlkZSB2b2NhYnVsYXJ5LXVyaSBhbmQgY29kZXMgZmllbGQgYmFzZWQgb24gJ0B2b2NhYnVsYXJ5JyBmaWVsZCB2YWx1ZVxuICAgICAqL1xuICAgIER5bmFtaWNGaWVsZC5wcm90b3R5cGUudHJhbnNhY3Rpb25BaWRUeXBlVm9jYWJ1bGFyeUhpZGVGaWVsZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGFpZHR5cGVfdm9jYWJ1bGFyeSA9ICgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnc2VsZWN0W2lkKj1cImFpZF90eXBlX3ZvY2FidWxhcnlcIl0nKTtcbiAgICAgICAgaWYgKGFpZHR5cGVfdm9jYWJ1bGFyeS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBqcXVlcnlfMS5kZWZhdWx0LmVhY2goYWlkdHlwZV92b2NhYnVsYXJ5LCBmdW5jdGlvbiAoaW5kZXgsIGl0ZW0pIHtcbiAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSAoX2EgPSAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoaXRlbSkudmFsKCkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICcxJztcbiAgICAgICAgICAgICAgICBfdGhpcy5oaWRlVHJhbnNhY3Rpb25BaWRUeXBlU2VsZWN0RmllbGQoKDAsIGpxdWVyeV8xLmRlZmF1bHQpKGl0ZW0pLCBkYXRhLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBhaWR0eXBlX3ZvY2FidWxhcnkub24oJ3NlbGVjdDI6c2VsZWN0JywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IGUucGFyYW1zLmRhdGEuaWQ7XG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IGUudGFyZ2V0O1xuICAgICAgICAgICAgICAgIF90aGlzLmhpZGVUcmFuc2FjdGlvbkFpZFR5cGVTZWxlY3RGaWVsZCgoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGFyZ2V0KSwgZGF0YSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGFpZHR5cGVfdm9jYWJ1bGFyeS5vbignc2VsZWN0MjpjbGVhcicsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IGUudGFyZ2V0O1xuICAgICAgICAgICAgICAgIF90aGlzLmhpZGVUcmFuc2FjdGlvbkFpZFR5cGVTZWxlY3RGaWVsZCgoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGFyZ2V0KSwgJycpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEhpZGUgQWlkIFR5cGUgU2VsZWN0IEZpZWxkc1xuICAgICAqL1xuICAgIER5bmFtaWNGaWVsZC5wcm90b3R5cGUuaGlkZUFpZFR5cGVTZWxlY3RGaWVsZCA9IGZ1bmN0aW9uIChpbmRleCwgdmFsdWUpIHtcbiAgICAgICAgdmFyIGRlZmF1bHRfYWlkX3R5cGUgPSAnc2VsZWN0W2lkKj1cIltkZWZhdWx0X2FpZF90eXBlXVwiXScsIGVhcm1hcmtpbmdfY2F0ZWdvcnkgPSAnc2VsZWN0W2lkKj1cIltlYXJtYXJraW5nX2NhdGVnb3J5XVwiXScsIGVhcm1hcmtpbmdfbW9kYWxpdHkgPSAnc2VsZWN0W2lkKj1cIltlYXJtYXJraW5nX21vZGFsaXR5XVwiXScsIGNhc2hfYW5kX3ZvdWNoZXJfbW9kYWxpdGllcyA9ICdzZWxlY3RbaWQqPVwiW2Nhc2hfYW5kX3ZvdWNoZXJfbW9kYWxpdGllc11cIl0nLCBjYXNlMSA9ICdzZWxlY3RbaWQqPVwiW2Vhcm1hcmtpbmdfY2F0ZWdvcnldXCJdLHNlbGVjdFtpZCo9XCJbZWFybWFya2luZ19tb2RhbGl0eV1cIl0sc2VsZWN0W2lkKj1cIltjYXNoX2FuZF92b3VjaGVyX21vZGFsaXRpZXNdXCJdJywgY2FzZTIgPSAnc2VsZWN0W2lkKj1cIltkZWZhdWx0X2FpZF90eXBlXVwiXSxzZWxlY3RbaWQqPVwiW2Vhcm1hcmtpbmdfbW9kYWxpdHldXCJdLHNlbGVjdFtpZCo9XCJbY2FzaF9hbmRfdm91Y2hlcl9tb2RhbGl0aWVzXVwiXScsIGNhc2UzID0gJ3NlbGVjdFtpZCo9XCJbZGVmYXVsdF9haWRfdHlwZV1cIl0sc2VsZWN0W2lkKj1cIltlYXJtYXJraW5nX2NhdGVnb3J5XVwiXSxzZWxlY3RbaWQqPVwiW2Nhc2hfYW5kX3ZvdWNoZXJfbW9kYWxpdGllc11cIl0nLCBjYXNlNCA9ICdzZWxlY3RbaWQqPVwiW2RlZmF1bHRfYWlkX3R5cGVdXCJdLHNlbGVjdFtpZCo9XCJbZWFybWFya2luZ19jYXRlZ29yeV1cIl0sc2VsZWN0W2lkKj1cIltlYXJtYXJraW5nX21vZGFsaXR5XVwiXSc7XG4gICAgICAgIHN3aXRjaCAodmFsdWUpIHtcbiAgICAgICAgICAgIGNhc2UgJzInOlxuICAgICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZC1ncm91cCcpXG4gICAgICAgICAgICAgICAgICAgIC5maW5kKGVhcm1hcmtpbmdfY2F0ZWdvcnkpXG4gICAgICAgICAgICAgICAgICAgIC5zaG93KClcbiAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2Rpc2FibGVkJylcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkJylcbiAgICAgICAgICAgICAgICAgICAgLnNob3coKTtcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQtZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAuZmluZChjYXNlMilcbiAgICAgICAgICAgICAgICAgICAgLnZhbCgnJylcbiAgICAgICAgICAgICAgICAgICAgLnRyaWdnZXIoJ2NoYW5nZScpXG4gICAgICAgICAgICAgICAgICAgIC5oaWRlKClcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2Rpc2FibGVkJywgJ2Rpc2FibGVkJylcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkJylcbiAgICAgICAgICAgICAgICAgICAgLmhpZGUoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJzMnOlxuICAgICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZC1ncm91cCcpXG4gICAgICAgICAgICAgICAgICAgIC5maW5kKGVhcm1hcmtpbmdfbW9kYWxpdHkpXG4gICAgICAgICAgICAgICAgICAgIC5zaG93KClcbiAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2Rpc2FibGVkJylcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkJylcbiAgICAgICAgICAgICAgICAgICAgLnNob3coKTtcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQtZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAuZmluZChjYXNlMylcbiAgICAgICAgICAgICAgICAgICAgLnZhbCgnJylcbiAgICAgICAgICAgICAgICAgICAgLnRyaWdnZXIoJ2NoYW5nZScpXG4gICAgICAgICAgICAgICAgICAgIC5oaWRlKClcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2Rpc2FibGVkJywgJ2Rpc2FibGVkJylcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkJylcbiAgICAgICAgICAgICAgICAgICAgLmhpZGUoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJzQnOlxuICAgICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZC1ncm91cCcpXG4gICAgICAgICAgICAgICAgICAgIC5maW5kKGNhc2hfYW5kX3ZvdWNoZXJfbW9kYWxpdGllcylcbiAgICAgICAgICAgICAgICAgICAgLnNob3coKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignZGlzYWJsZWQnKVxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQnKVxuICAgICAgICAgICAgICAgICAgICAuc2hvdygpO1xuICAgICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZC1ncm91cCcpXG4gICAgICAgICAgICAgICAgICAgIC5maW5kKGNhc2U0KVxuICAgICAgICAgICAgICAgICAgICAudmFsKCcnKVxuICAgICAgICAgICAgICAgICAgICAudHJpZ2dlcignY2hhbmdlJylcbiAgICAgICAgICAgICAgICAgICAgLmhpZGUoKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignZGlzYWJsZWQnLCAnZGlzYWJsZWQnKVxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQnKVxuICAgICAgICAgICAgICAgICAgICAuaGlkZSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQtZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAuZmluZChkZWZhdWx0X2FpZF90eXBlKVxuICAgICAgICAgICAgICAgICAgICAuc2hvdygpXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5zaG93KCk7XG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoY2FzZTEpXG4gICAgICAgICAgICAgICAgICAgIC52YWwoJycpXG4gICAgICAgICAgICAgICAgICAgIC50cmlnZ2VyKCdjaGFuZ2UnKVxuICAgICAgICAgICAgICAgICAgICAuaGlkZSgpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5oaWRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEhpZGUgVHJhbnNhY3Rpb24gQWlkIFR5cGUgU2VsZWN0IEZpZWxkc1xuICAgICAqL1xuICAgIER5bmFtaWNGaWVsZC5wcm90b3R5cGUuaGlkZVRyYW5zYWN0aW9uQWlkVHlwZVNlbGVjdEZpZWxkID0gZnVuY3Rpb24gKGluZGV4LCB2YWx1ZSkge1xuICAgICAgICB2YXIgYWlkX3R5cGUgPSAnc2VsZWN0W2lkKj1cIlthaWRfdHlwZV9jb2RlXVwiXScsIGVhcm1hcmtpbmdfY2F0ZWdvcnkgPSAnc2VsZWN0W2lkKj1cIltlYXJtYXJraW5nX2NhdGVnb3J5XVwiXScsIGVhcm1hcmtpbmdfbW9kYWxpdHkgPSAnc2VsZWN0W2lkKj1cIltlYXJtYXJraW5nX21vZGFsaXR5XVwiXScsIGNhc2hfYW5kX3ZvdWNoZXJfbW9kYWxpdGllcyA9ICdzZWxlY3RbaWQqPVwiW2Nhc2hfYW5kX3ZvdWNoZXJfbW9kYWxpdGllc11cIl0nLCBjYXNlMSA9ICdzZWxlY3RbaWQqPVwiW2Vhcm1hcmtpbmdfY2F0ZWdvcnldXCJdLHNlbGVjdFtpZCo9XCJbZWFybWFya2luZ19tb2RhbGl0eV1cIl0sc2VsZWN0W2lkKj1cIltjYXNoX2FuZF92b3VjaGVyX21vZGFsaXRpZXNdXCJdJywgY2FzZTIgPSAnc2VsZWN0W2lkKj1cIlthaWRfdHlwZV9jb2RlXVwiXSxzZWxlY3RbaWQqPVwiW2Vhcm1hcmtpbmdfbW9kYWxpdHldXCJdLHNlbGVjdFtpZCo9XCJbY2FzaF9hbmRfdm91Y2hlcl9tb2RhbGl0aWVzXVwiXScsIGNhc2UzID0gJ3NlbGVjdFtpZCo9XCJbYWlkX3R5cGVfY29kZV1cIl0sc2VsZWN0W2lkKj1cIltlYXJtYXJraW5nX2NhdGVnb3J5XVwiXSxzZWxlY3RbaWQqPVwiW2Nhc2hfYW5kX3ZvdWNoZXJfbW9kYWxpdGllc11cIl0nLCBjYXNlNCA9ICdzZWxlY3RbaWQqPVwiW2FpZF90eXBlX2NvZGVdXCJdLHNlbGVjdFtpZCo9XCJbZWFybWFya2luZ19jYXRlZ29yeV1cIl0sc2VsZWN0W2lkKj1cIltlYXJtYXJraW5nX21vZGFsaXR5XVwiXSc7XG4gICAgICAgIHN3aXRjaCAodmFsdWUpIHtcbiAgICAgICAgICAgIGNhc2UgJzInOlxuICAgICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZC1ncm91cCcpXG4gICAgICAgICAgICAgICAgICAgIC5maW5kKGVhcm1hcmtpbmdfY2F0ZWdvcnkpXG4gICAgICAgICAgICAgICAgICAgIC5zaG93KClcbiAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2Rpc2FibGVkJylcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkJylcbiAgICAgICAgICAgICAgICAgICAgLnNob3coKTtcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQtZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAuZmluZChjYXNlMilcbiAgICAgICAgICAgICAgICAgICAgLnZhbCgnJylcbiAgICAgICAgICAgICAgICAgICAgLnRyaWdnZXIoJ2NoYW5nZScpXG4gICAgICAgICAgICAgICAgICAgIC5oaWRlKClcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2Rpc2FibGVkJywgJ2Rpc2FibGVkJylcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkJylcbiAgICAgICAgICAgICAgICAgICAgLmhpZGUoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJzMnOlxuICAgICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZC1ncm91cCcpXG4gICAgICAgICAgICAgICAgICAgIC5maW5kKGVhcm1hcmtpbmdfbW9kYWxpdHkpXG4gICAgICAgICAgICAgICAgICAgIC5zaG93KClcbiAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2Rpc2FibGVkJylcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkJylcbiAgICAgICAgICAgICAgICAgICAgLnNob3coKTtcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQtZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAuZmluZChjYXNlMylcbiAgICAgICAgICAgICAgICAgICAgLnZhbCgnJylcbiAgICAgICAgICAgICAgICAgICAgLnRyaWdnZXIoJ2NoYW5nZScpXG4gICAgICAgICAgICAgICAgICAgIC5oaWRlKClcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2Rpc2FibGVkJywgJ2Rpc2FibGVkJylcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkJylcbiAgICAgICAgICAgICAgICAgICAgLmhpZGUoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJzQnOlxuICAgICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZC1ncm91cCcpXG4gICAgICAgICAgICAgICAgICAgIC5maW5kKGNhc2hfYW5kX3ZvdWNoZXJfbW9kYWxpdGllcylcbiAgICAgICAgICAgICAgICAgICAgLnNob3coKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignZGlzYWJsZWQnKVxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQnKVxuICAgICAgICAgICAgICAgICAgICAuc2hvdygpO1xuICAgICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZC1ncm91cCcpXG4gICAgICAgICAgICAgICAgICAgIC5maW5kKGNhc2U0KVxuICAgICAgICAgICAgICAgICAgICAudmFsKCcnKVxuICAgICAgICAgICAgICAgICAgICAudHJpZ2dlcignY2hhbmdlJylcbiAgICAgICAgICAgICAgICAgICAgLmhpZGUoKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignZGlzYWJsZWQnLCAnZGlzYWJsZWQnKVxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQnKVxuICAgICAgICAgICAgICAgICAgICAuaGlkZSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQtZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAuZmluZChhaWRfdHlwZSlcbiAgICAgICAgICAgICAgICAgICAgLnNob3coKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignZGlzYWJsZWQnKVxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQnKVxuICAgICAgICAgICAgICAgICAgICAuc2hvdygpO1xuICAgICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZC1ncm91cCcpXG4gICAgICAgICAgICAgICAgICAgIC5maW5kKGNhc2UxKVxuICAgICAgICAgICAgICAgICAgICAudmFsKCcnKVxuICAgICAgICAgICAgICAgICAgICAudHJpZ2dlcignY2hhbmdlJylcbiAgICAgICAgICAgICAgICAgICAgLmhpZGUoKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignZGlzYWJsZWQnLCAnZGlzYWJsZWQnKVxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQnKVxuICAgICAgICAgICAgICAgICAgICAuaGlkZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBQb2xpY3kgTWFya2VyIEZvcm0gUGFnZVxuICAgICAqXG4gICAgICogQExvZ2ljIGhpZGUgdm9jYWJ1bGFyeS11cmkgYW5kIGNvZGVzIGZpZWxkIGJhc2VkIG9uICdAdm9jYWJ1bGFyeScgZmllbGQgdmFsdWVcbiAgICAgKi9cbiAgICBEeW5hbWljRmllbGQucHJvdG90eXBlLnBvbGljeVZvY2FidWxhcnlIaWRlRmllbGQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBwb2xpY3ltYWtlcl92b2NhYnVsYXJ5ID0gKDAsIGpxdWVyeV8xLmRlZmF1bHQpKCdzZWxlY3RbaWQqPVwicG9saWN5X21hcmtlcl92b2NhYnVsYXJ5XCJdJyk7XG4gICAgICAgIGlmIChwb2xpY3ltYWtlcl92b2NhYnVsYXJ5Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGpxdWVyeV8xLmRlZmF1bHQuZWFjaChwb2xpY3ltYWtlcl92b2NhYnVsYXJ5LCBmdW5jdGlvbiAoaW5kZXgsIHBvbGljeV9tYXJrZXIpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSAoX2EgPSAoMCwganF1ZXJ5XzEuZGVmYXVsdCkocG9saWN5X21hcmtlcikudmFsKCkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICcxJztcbiAgICAgICAgICAgICAgICBfdGhpcy5oaWRlUG9saWN5TWFrZXJGaWVsZCgoMCwganF1ZXJ5XzEuZGVmYXVsdCkocG9saWN5X21hcmtlciksIGRhdGEudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHBvbGljeW1ha2VyX3ZvY2FidWxhcnkub24oJ3NlbGVjdDI6c2VsZWN0JywgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IGUucGFyYW1zLmRhdGEuaWQ7XG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IGUudGFyZ2V0O1xuICAgICAgICAgICAgICAgIF90aGlzLmhpZGVQb2xpY3lNYWtlckZpZWxkKCgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0YXJnZXQpLCBkYXRhKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcG9saWN5bWFrZXJfdm9jYWJ1bGFyeS5vbignc2VsZWN0MjpjbGVhcicsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IGUudGFyZ2V0O1xuICAgICAgICAgICAgICAgIF90aGlzLmhpZGVQb2xpY3lNYWtlckZpZWxkKCgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0YXJnZXQpLCAnOTknKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBIaWRlcyBQb2xpY3kgTWFya2VyIEZvcm0gRmllbGRzXG4gICAgICovXG4gICAgRHluYW1pY0ZpZWxkLnByb3RvdHlwZS5oaWRlUG9saWN5TWFrZXJGaWVsZCA9IGZ1bmN0aW9uIChpbmRleCwgdmFsdWUpIHtcbiAgICAgICAgdmFyIGNhc2UxX3Nob3cgPSAnc2VsZWN0W2lkKj1cIltwb2xpY3lfbWFya2VyXVwiXScsIGNhc2UyX3Nob3cgPSAnaW5wdXRbaWQqPVwiW3BvbGljeV9tYXJrZXJfdGV4dF1cIl0saW5wdXRbaWQqPVwiW3ZvY2FidWxhcnlfdXJpXVwiXScsIGNhc2UxID0gJ2lucHV0W2lkKj1cIltwb2xpY3lfbWFya2VyX3RleHRdXCJdLGlucHV0W2lkKj1cIlt2b2NhYnVsYXJ5X3VyaV1cIl0nLCBjYXNlMiA9ICdzZWxlY3RbaWQqPVwiW3BvbGljeV9tYXJrZXJdXCJdJztcbiAgICAgICAgc3dpdGNoICh2YWx1ZSkge1xuICAgICAgICAgICAgY2FzZSAnMSc6XG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoY2FzZTFfc2hvdylcbiAgICAgICAgICAgICAgICAgICAgLnNob3coKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignZGlzYWJsZWQnKVxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQnKVxuICAgICAgICAgICAgICAgICAgICAuc2hvdygpO1xuICAgICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZC1ncm91cCcpXG4gICAgICAgICAgICAgICAgICAgIC5maW5kKGNhc2UxKVxuICAgICAgICAgICAgICAgICAgICAudmFsKCcnKVxuICAgICAgICAgICAgICAgICAgICAudHJpZ2dlcignY2hhbmdlJylcbiAgICAgICAgICAgICAgICAgICAgLmhpZGUoKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignZGlzYWJsZWQnLCAnZGlzYWJsZWQnKVxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQnKVxuICAgICAgICAgICAgICAgICAgICAuaGlkZSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnOTknOlxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQtZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAuZmluZChjYXNlMl9zaG93KVxuICAgICAgICAgICAgICAgICAgICAuc2hvdygpXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5zaG93KCk7XG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoY2FzZTIpXG4gICAgICAgICAgICAgICAgICAgIC52YWwoJycpXG4gICAgICAgICAgICAgICAgICAgIC50cmlnZ2VyKCdjaGFuZ2UnKVxuICAgICAgICAgICAgICAgICAgICAuaGlkZSgpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5oaWRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNlY3RvciBGb3JtIFBhZ2VcbiAgICAgKlxuICAgICAqIEBMb2dpYyBoaWRlIHZvY2FidWxhcnktdXJpIGFuZCBjb2RlcyBmaWVsZCBiYXNlZCBvbiAnQHZvY2FidWxhcnknIGZpZWxkIHZhbHVlXG4gICAgICovXG4gICAgRHluYW1pY0ZpZWxkLnByb3RvdHlwZS5zZWN0b3JWb2NhYnVsYXJ5SGlkZUZpZWxkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgc2VjdG9yX3ZvY2FidWxhcnkgPSAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoJ3NlbGVjdFtpZCo9XCJzZWN0b3Jfdm9jYWJ1bGFyeVwiXScpO1xuICAgICAgICBpZiAoc2VjdG9yX3ZvY2FidWxhcnkubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAganF1ZXJ5XzEuZGVmYXVsdC5lYWNoKHNlY3Rvcl92b2NhYnVsYXJ5LCBmdW5jdGlvbiAoaW5kZXgsIHNlY3Rvcikge1xuICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IChfYSA9ICgwLCBqcXVlcnlfMS5kZWZhdWx0KShzZWN0b3IpLnZhbCgpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAnMSc7XG4gICAgICAgICAgICAgICAgX3RoaXMuaGlkZVNlY3RvckZpZWxkKCgwLCBqcXVlcnlfMS5kZWZhdWx0KShzZWN0b3IpLCBkYXRhLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBzZWN0b3Jfdm9jYWJ1bGFyeS5vbignc2VsZWN0MjpzZWxlY3QnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIHZhciBkYXRhID0gZS5wYXJhbXMuZGF0YS5pZDtcbiAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gZS50YXJnZXQ7XG4gICAgICAgICAgICAgICAgX3RoaXMuaGlkZVNlY3RvckZpZWxkKCgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0YXJnZXQpLCBkYXRhKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc2VjdG9yX3ZvY2FidWxhcnkub24oJ3NlbGVjdDI6Y2xlYXInLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSBlLnRhcmdldDtcbiAgICAgICAgICAgICAgICBfdGhpcy5oaWRlU2VjdG9yRmllbGQoKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRhcmdldCksICcnKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBIaWRlIFNlY3RvciBGb3JtIGZpZWxkc1xuICAgICAqL1xuICAgIER5bmFtaWNGaWVsZC5wcm90b3R5cGUuaGlkZVNlY3RvckZpZWxkID0gZnVuY3Rpb24gKGluZGV4LCB2YWx1ZSkge1xuICAgICAgICB2YXIgY2FzZTFfc2hvdyA9ICdzZWxlY3RbaWQqPVwiW2NvZGVdXCJdJywgY2FzZTJfc2hvdyA9ICdzZWxlY3RbaWQqPVwiW2NhdGVnb3J5X2NvZGVdXCJdJywgY2FzZTdfc2hvdyA9ICdzZWxlY3RbaWQqPVwiW3NkZ19nb2FsXVwiXScsIGNhc2U4X3Nob3cgPSAnc2VsZWN0W2lkKj1cIltzZGdfdGFyZ2V0XVwiXScsIGNhc2U5OF85OV9zaG93ID0gJ2lucHV0W2lkKj1cIlt0ZXh0XVwiXSxpbnB1dFtpZCo9XCJbdm9jYWJ1bGFyeV91cmldXCJdJywgZGVmYXVsdF9zaG93ID0gJ2lucHV0W2lkKj1cIlt0ZXh0XVwiXScsIGNhc2UxID0gJ3NlbGVjdFtpZCo9XCJbY2F0ZWdvcnlfY29kZV1cIl0sc2VsZWN0W2lkKj1cIltzZGdfZ29hbF1cIl0sc2VsZWN0W2lkKj1cIltzZGdfdGFyZ2V0XVwiXSxpbnB1dFtpZCo9XCJbdm9jYWJ1bGFyeV91cmldXCJdLGlucHV0W2lkKj1cIlt0ZXh0XVwiXScsIGNhc2UyID0gJ2lucHV0W2lkKj1cIlt2b2NhYnVsYXJ5X3VyaV1cIl0sc2VsZWN0W2lkKj1cIltzZGdfZ29hbF1cIl0sc2VsZWN0W2lkKj1cIltzZGdfdGFyZ2V0XVwiXSxzZWxlY3RbaWQqPVwiW2NvZGVdXCJdLGlucHV0W2lkKj1cIlt0ZXh0XVwiXScsIGNhc2U3ID0gJ2lucHV0W2lkKj1cIlt2b2NhYnVsYXJ5X3VyaV1cIl0sc2VsZWN0W2lkKj1cIltjYXRlZ29yeV9jb2RlXVwiXSxzZWxlY3RbaWQqPVwiW3NkZ190YXJnZXRdXCJdLHNlbGVjdFtpZCo9XCJbY29kZV1cIl0saW5wdXRbaWQqPVwiW3RleHRdXCJdJywgY2FzZTggPSAnaW5wdXRbaWQqPVwiW3ZvY2FidWxhcnlfdXJpXVwiXSxzZWxlY3RbaWQqPVwiW2NhdGVnb3J5X2NvZGVdXCJdLHNlbGVjdFtpZCo9XCJbc2RnX2dvYWxdXCJdLHNlbGVjdFtpZCo9XCJbY29kZV1cIl0saW5wdXRbaWQqPVwiW3RleHRdXCJdJywgY2FzZTk4Xzk5ID0gJ3NlbGVjdFtpZCo9XCJbY2F0ZWdvcnlfY29kZV1cIl0sc2VsZWN0W2lkKj1cIltzZGdfZ29hbF1cIl0sc2VsZWN0W2lkKj1cIltzZGdfdGFyZ2V0XVwiXSxzZWxlY3RbaWQqPVwiW2NvZGVdXCJdJywgZGVmYXVsdF9oaWRlID0gJ3NlbGVjdFtpZCo9XCJbY2F0ZWdvcnlfY29kZV1cIl0sc2VsZWN0W2lkKj1cIltzZGdfZ29hbF1cIl0sc2VsZWN0W2lkKj1cIltzZGdfdGFyZ2V0XVwiXSxzZWxlY3RbaWQqPVwiW2NvZGVdXCJdLGlucHV0W2lkKj1cIlt2b2NhYnVsYXJ5X3VyaV1cIl0nO1xuICAgICAgICBzd2l0Y2ggKHZhbHVlKSB7XG4gICAgICAgICAgICBjYXNlICcxJzpcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQtZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAuZmluZChjYXNlMV9zaG93KVxuICAgICAgICAgICAgICAgICAgICAuc2hvdygpXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5zaG93KCk7XG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoY2FzZTEpXG4gICAgICAgICAgICAgICAgICAgIC52YWwoJycpXG4gICAgICAgICAgICAgICAgICAgIC50cmlnZ2VyKCdjaGFuZ2UnKVxuICAgICAgICAgICAgICAgICAgICAuaGlkZSgpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5oaWRlKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICcyJzpcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQtZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAuZmluZChjYXNlMl9zaG93KVxuICAgICAgICAgICAgICAgICAgICAuc2hvdygpXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5zaG93KCk7XG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoY2FzZTIpXG4gICAgICAgICAgICAgICAgICAgIC52YWwoJycpXG4gICAgICAgICAgICAgICAgICAgIC50cmlnZ2VyKCdjaGFuZ2UnKVxuICAgICAgICAgICAgICAgICAgICAuaGlkZSgpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5oaWRlKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICc3JzpcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQtZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAuZmluZChjYXNlN19zaG93KVxuICAgICAgICAgICAgICAgICAgICAuc2hvdygpXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5zaG93KCk7XG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoY2FzZTcpXG4gICAgICAgICAgICAgICAgICAgIC52YWwoJycpXG4gICAgICAgICAgICAgICAgICAgIC50cmlnZ2VyKCdjaGFuZ2UnKVxuICAgICAgICAgICAgICAgICAgICAuaGlkZSgpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5oaWRlKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICc4JzpcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQtZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAuZmluZChjYXNlOF9zaG93KVxuICAgICAgICAgICAgICAgICAgICAuc2hvdygpXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5zaG93KCk7XG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoY2FzZTgpXG4gICAgICAgICAgICAgICAgICAgIC52YWwoJycpXG4gICAgICAgICAgICAgICAgICAgIC50cmlnZ2VyKCdjaGFuZ2UnKVxuICAgICAgICAgICAgICAgICAgICAuaGlkZSgpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5oaWRlKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICc5OCc6XG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoY2FzZTk4Xzk5X3Nob3cpXG4gICAgICAgICAgICAgICAgICAgIC5zaG93KClcbiAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2Rpc2FibGVkJylcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkJylcbiAgICAgICAgICAgICAgICAgICAgLnNob3coKTtcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQtZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAuZmluZChjYXNlOThfOTkpXG4gICAgICAgICAgICAgICAgICAgIC52YWwoJycpXG4gICAgICAgICAgICAgICAgICAgIC50cmlnZ2VyKCdjaGFuZ2UnKVxuICAgICAgICAgICAgICAgICAgICAuaGlkZSgpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5oaWRlKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICc5OSc6XG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoY2FzZTk4Xzk5X3Nob3cpXG4gICAgICAgICAgICAgICAgICAgIC5zaG93KClcbiAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2Rpc2FibGVkJylcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkJylcbiAgICAgICAgICAgICAgICAgICAgLnNob3coKTtcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQtZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAuZmluZChjYXNlOThfOTkpXG4gICAgICAgICAgICAgICAgICAgIC52YWwoJycpXG4gICAgICAgICAgICAgICAgICAgIC50cmlnZ2VyKCdjaGFuZ2UnKVxuICAgICAgICAgICAgICAgICAgICAuaGlkZSgpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5oaWRlKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZC1ncm91cCcpXG4gICAgICAgICAgICAgICAgICAgIC5maW5kKGRlZmF1bHRfc2hvdylcbiAgICAgICAgICAgICAgICAgICAgLnNob3coKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignZGlzYWJsZWQnKVxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQnKVxuICAgICAgICAgICAgICAgICAgICAuc2hvdygpO1xuICAgICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZC1ncm91cCcpXG4gICAgICAgICAgICAgICAgICAgIC5maW5kKGRlZmF1bHRfaGlkZSlcbiAgICAgICAgICAgICAgICAgICAgLnZhbCgnJylcbiAgICAgICAgICAgICAgICAgICAgLnRyaWdnZXIoJ2NoYW5nZScpXG4gICAgICAgICAgICAgICAgICAgIC5oaWRlKClcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2Rpc2FibGVkJywgJ2Rpc2FibGVkJylcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkJylcbiAgICAgICAgICAgICAgICAgICAgLmhpZGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogIFJlY2lwaWVudCBWb2NhYnVsYXJ5IEZvcm0gUGFnZVxuICAgICAqXG4gICAgICogQExvZ2ljIGhpZGUgdm9jYWJ1bGFyeS11cmkgYW5kIGNvZGVzIGZpZWxkIGJhc2VkIG9uICdAdm9jYWJ1bGFyeScgZmllbGQgdmFsdWVcbiAgICAgKi9cbiAgICBEeW5hbWljRmllbGQucHJvdG90eXBlLnJlY2lwaWVudFZvY2FidWxhcnlIaWRlRmllbGQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciByZWdpb25fdm9jYWJ1bGFyeSA9ICgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnc2VsZWN0W2lkKj1cInJlZ2lvbl92b2NhYnVsYXJ5XCJdJyk7XG4gICAgICAgIGlmIChyZWdpb25fdm9jYWJ1bGFyeS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBqcXVlcnlfMS5kZWZhdWx0LmVhY2gocmVnaW9uX3ZvY2FidWxhcnksIGZ1bmN0aW9uIChpbmRleCwgcmVnaW9uX3ZvY2FiKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgIHZhciBkYXRhID0gKF9hID0gKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHJlZ2lvbl92b2NhYikudmFsKCkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICcxJztcbiAgICAgICAgICAgICAgICBfdGhpcy5oaWRlUmVjaXBpZW50UmVnaW9uRmllbGQoKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHJlZ2lvbl92b2NhYiksIGRhdGEudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJlZ2lvbl92b2NhYnVsYXJ5Lm9uKCdzZWxlY3QyOnNlbGVjdCcsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSBlLnBhcmFtcy5kYXRhLmlkO1xuICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSBlLnRhcmdldDtcbiAgICAgICAgICAgICAgICBfdGhpcy5oaWRlUmVjaXBpZW50UmVnaW9uRmllbGQoKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRhcmdldCksIGRhdGEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZWdpb25fdm9jYWJ1bGFyeS5vbignc2VsZWN0MjpjbGVhcicsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IGUudGFyZ2V0O1xuICAgICAgICAgICAgICAgIF90aGlzLmhpZGVSZWNpcGllbnRSZWdpb25GaWVsZCgoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGFyZ2V0KSwgJycpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEhpZGVzIFJlY2lwaWVudCBSZWdpb24gRm9ybSBGaWVsZHNcbiAgICAgKi9cbiAgICBEeW5hbWljRmllbGQucHJvdG90eXBlLmhpZGVSZWNpcGllbnRSZWdpb25GaWVsZCA9IGZ1bmN0aW9uIChpbmRleCwgdmFsdWUpIHtcbiAgICAgICAgdmFyIGNhc2UxX3Nob3cgPSAnc2VsZWN0W2lkKj1cIltyZWdpb25fY29kZV1cIl0nLCBjYXNlMl9zaG93ID0gJ2lucHV0W2lkKj1cIltjdXN0b21fY29kZV1cIl0sIGlucHV0W2lkKj1cIltjb2RlXVwiXScsIGNhc2U5OV9zaG93ID0gJ2lucHV0W2lkKj1cIltjdXN0b21fY29kZV1cIl0saW5wdXRbaWQqPVwiW3ZvY2FidWxhcnlfdXJpXVwiXSwgaW5wdXRbaWQqPVwiW2NvZGVdXCJdJywgY2FzZTEgPSAnaW5wdXRbaWQqPVwiW2N1c3RvbV9jb2RlXVwiXSxpbnB1dFtpZCo9XCJbdm9jYWJ1bGFyeV91cmldXCJdLGlucHV0W2lkKj1cIltjb2RlXVwiXScsIGNhc2UyID0gJ3NlbGVjdFtpZCo9XCJbcmVnaW9uX2NvZGVdXCJdLGlucHV0W2lkKj1cIlt2b2NhYnVsYXJ5X3VyaV1cIl0nLCBjYXNlOTkgPSAnc2VsZWN0W2lkKj1cIltyZWdpb25fY29kZV1cIl0nO1xuICAgICAgICBzd2l0Y2ggKHZhbHVlKSB7XG4gICAgICAgICAgICBjYXNlICcxJzpcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQtZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAuZmluZChjYXNlMV9zaG93KVxuICAgICAgICAgICAgICAgICAgICAuc2hvdygpXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5zaG93KCk7XG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoY2FzZTEpXG4gICAgICAgICAgICAgICAgICAgIC52YWwoJycpXG4gICAgICAgICAgICAgICAgICAgIC50cmlnZ2VyKCdjaGFuZ2UnKVxuICAgICAgICAgICAgICAgICAgICAuaGlkZSgpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5oaWRlKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICcyJzpcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQtZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAuZmluZChjYXNlMl9zaG93KVxuICAgICAgICAgICAgICAgICAgICAuc2hvdygpXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5zaG93KCk7XG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoY2FzZTIpXG4gICAgICAgICAgICAgICAgICAgIC52YWwoJycpXG4gICAgICAgICAgICAgICAgICAgIC50cmlnZ2VyKCdjaGFuZ2UnKVxuICAgICAgICAgICAgICAgICAgICAuaGlkZSgpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5oaWRlKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICc5OSc6XG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoY2FzZTk5X3Nob3cpXG4gICAgICAgICAgICAgICAgICAgIC5zaG93KClcbiAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2Rpc2FibGVkJylcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkJylcbiAgICAgICAgICAgICAgICAgICAgLnNob3coKTtcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQtZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAuZmluZChjYXNlOTkpXG4gICAgICAgICAgICAgICAgICAgIC52YWwoJycpXG4gICAgICAgICAgICAgICAgICAgIC50cmlnZ2VyKCdjaGFuZ2UnKVxuICAgICAgICAgICAgICAgICAgICAuaGlkZSgpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5oaWRlKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZC1ncm91cCcpXG4gICAgICAgICAgICAgICAgICAgIC5maW5kKGNhc2UyX3Nob3cpXG4gICAgICAgICAgICAgICAgICAgIC5zaG93KClcbiAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2Rpc2FibGVkJylcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkJylcbiAgICAgICAgICAgICAgICAgICAgLnNob3coKTtcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQtZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAuZmluZChjYXNlMilcbiAgICAgICAgICAgICAgICAgICAgLnZhbCgnJylcbiAgICAgICAgICAgICAgICAgICAgLnRyaWdnZXIoJ2NoYW5nZScpXG4gICAgICAgICAgICAgICAgICAgIC5oaWRlKClcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2Rpc2FibGVkJywgJ2Rpc2FibGVkJylcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkJylcbiAgICAgICAgICAgICAgICAgICAgLmhpZGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogVXBkYXRlcyBBY3Rpdml0eSBpZGVudGlmaWVyXG4gICAgICovXG4gICAgRHluYW1pY0ZpZWxkLnByb3RvdHlwZS51cGRhdGVBY3Rpdml0eUlkZW50aWZpZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhY3Rpdml0eV9pZGVudGlmaWVyID0gKDAsIGpxdWVyeV8xLmRlZmF1bHQpKCcjYWN0aXZpdHlfaWRlbnRpZmllcicpO1xuICAgICAgICBpZiAoYWN0aXZpdHlfaWRlbnRpZmllci5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBhY3Rpdml0eV9pZGVudGlmaWVyLm9uKCdrZXl1cCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoJyNpYXRpX2lkZW50aWZpZXJfdGV4dCcpLnZhbCgoMCwganF1ZXJ5XzEuZGVmYXVsdCkoJy5pZGVudGlmaWVyJykuYXR0cignYWN0aXZpdHlfaWRlbnRpZmllcicpICsgXCItXCIuY29uY2F0KCgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0aGlzKS52YWwoKSkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFRhZyBGb3JtIFBhZ2VcbiAgICAgKlxuICAgICAqIEBMb2dpYyBoaWRlIHZvY2FidWxhcnktdXJpIGFuZCBjb2RlcyBmaWVsZCBiYXNlZCBvbiAnQHZvY2FidWxhcnknIGZpZWxkIHZhbHVlXG4gICAgICovXG4gICAgRHluYW1pY0ZpZWxkLnByb3RvdHlwZS50YWdWb2NhYnVsYXJ5SGlkZUZpZWxkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgdGFnX3ZvY2FidWxhcnkgPSAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoJ3NlbGVjdFtpZCo9XCJ0YWdfdm9jYWJ1bGFyeVwiXScpO1xuICAgICAgICBpZiAodGFnX3ZvY2FidWxhcnkubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAganF1ZXJ5XzEuZGVmYXVsdC5lYWNoKHRhZ192b2NhYnVsYXJ5LCBmdW5jdGlvbiAoaW5kZXgsIHRhZykge1xuICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IChfYSA9ICgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0YWcpLnZhbCgpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAnMSc7XG4gICAgICAgICAgICAgICAgX3RoaXMuaGlkZVRhZ0ZpZWxkKCgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0YWcpLCBkYXRhLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0YWdfdm9jYWJ1bGFyeS5vbignc2VsZWN0MjpzZWxlY3QnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIHZhciBkYXRhID0gZS5wYXJhbXMuZGF0YS5pZDtcbiAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gZS50YXJnZXQ7XG4gICAgICAgICAgICAgICAgX3RoaXMuaGlkZVRhZ0ZpZWxkKCgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0YXJnZXQpLCBkYXRhKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGFnX3ZvY2FidWxhcnkub24oJ3NlbGVjdDI6Y2xlYXInLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSBlLnRhcmdldDtcbiAgICAgICAgICAgICAgICBfdGhpcy5oaWRlVGFnRmllbGQoKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRhcmdldCksICcnKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBIaWRlIFRhZyBGb3JtIGZpZWxkc1xuICAgICAqL1xuICAgIER5bmFtaWNGaWVsZC5wcm90b3R5cGUuaGlkZVRhZ0ZpZWxkID0gZnVuY3Rpb24gKGluZGV4LCB2YWx1ZSkge1xuICAgICAgICB2YXIgY2FzZTFfc2hvdyA9ICdpbnB1dFtpZCo9XCJbdGFnX3RleHRdXCJdJywgY2FzZTJfc2hvdyA9ICdzZWxlY3RbaWQqPVwiW2dvYWxzX3RhZ19jb2RlXVwiXScsIGNhc2UzX3Nob3cgPSAnc2VsZWN0W2lkKj1cIlt0YXJnZXRzX3RhZ19jb2RlXVwiXScsIGNhc2U5OV9zaG93ID0gJ2lucHV0W2lkKj1cIlt0YWdfdGV4dF1cIl0sIGlucHV0W2lkKj1cIlt2b2NhYnVsYXJ5X3VyaV1cIl0nLCBjYXNlMSA9ICdzZWxlY3RbaWQqPVwiW2dvYWxzX3RhZ19jb2RlXVwiXSxzZWxlY3RbaWQqPVwiW3RhcmdldHNfdGFnX2NvZGVdXCJdLGlucHV0W2lkKj1cIlt2b2NhYnVsYXJ5X3VyaV1cIl0nLCBjYXNlMiA9ICdpbnB1dFtpZCo9XCJbdm9jYWJ1bGFyeV91cmldXCJdLHNlbGVjdFtpZCo9XCJbdGFyZ2V0c190YWdfY29kZV1cIl0sc2VsZWN0W2lkKj1cIlt0YXJnZXRzX3RhZ19jb2RlXVwiXSxpbnB1dFtpZCo9XCJbdGFnX3RleHRdXCJdJywgY2FzZTMgPSAnaW5wdXRbaWQqPVwiW3ZvY2FidWxhcnlfdXJpXVwiXSxzZWxlY3RbaWQqPVwiW2dvYWxzX3RhZ19jb2RlXVwiXSxpbnB1dFtpZCo9XCJbdGFnX3RleHRdXCJdJywgY2FzZTk5ID0gJ3NlbGVjdFtpZCo9XCJbZ29hbHNfdGFnX2NvZGVdXCJdLHNlbGVjdFtpZCo9XCJbdGFyZ2V0c190YWdfY29kZV1cIl0nO1xuICAgICAgICBzd2l0Y2ggKHZhbHVlKSB7XG4gICAgICAgICAgICBjYXNlICcxJzpcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQtZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAuZmluZChjYXNlMV9zaG93KVxuICAgICAgICAgICAgICAgICAgICAuc2hvdygpXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5zaG93KCk7XG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoY2FzZTEpXG4gICAgICAgICAgICAgICAgICAgIC52YWwoJycpXG4gICAgICAgICAgICAgICAgICAgIC50cmlnZ2VyKCdjaGFuZ2UnKVxuICAgICAgICAgICAgICAgICAgICAuaGlkZSgpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5oaWRlKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICcyJzpcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQtZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAuZmluZChjYXNlMl9zaG93KVxuICAgICAgICAgICAgICAgICAgICAuc2hvdygpXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5zaG93KCk7XG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoY2FzZTIpXG4gICAgICAgICAgICAgICAgICAgIC52YWwoJycpXG4gICAgICAgICAgICAgICAgICAgIC50cmlnZ2VyKCdjaGFuZ2UnKVxuICAgICAgICAgICAgICAgICAgICAuaGlkZSgpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5oaWRlKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICczJzpcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQtZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAuZmluZChjYXNlM19zaG93KVxuICAgICAgICAgICAgICAgICAgICAuc2hvdygpXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5zaG93KCk7XG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoY2FzZTMpXG4gICAgICAgICAgICAgICAgICAgIC52YWwoJycpXG4gICAgICAgICAgICAgICAgICAgIC50cmlnZ2VyKCdjaGFuZ2UnKVxuICAgICAgICAgICAgICAgICAgICAuaGlkZSgpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5oaWRlKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICc5OSc6XG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoY2FzZTk5X3Nob3cpXG4gICAgICAgICAgICAgICAgICAgIC5zaG93KClcbiAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2Rpc2FibGVkJylcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkJylcbiAgICAgICAgICAgICAgICAgICAgLnNob3coKTtcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQtZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAuZmluZChjYXNlOTkpXG4gICAgICAgICAgICAgICAgICAgIC52YWwoJycpXG4gICAgICAgICAgICAgICAgICAgIC50cmlnZ2VyKCdjaGFuZ2UnKVxuICAgICAgICAgICAgICAgICAgICAuaGlkZSgpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5oaWRlKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZC1ncm91cCcpXG4gICAgICAgICAgICAgICAgICAgIC5maW5kKGNhc2UxX3Nob3cpXG4gICAgICAgICAgICAgICAgICAgIC5zaG93KClcbiAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2Rpc2FibGVkJylcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkJylcbiAgICAgICAgICAgICAgICAgICAgLnNob3coKTtcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQtZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAuZmluZChjYXNlMSlcbiAgICAgICAgICAgICAgICAgICAgLnZhbCgnJylcbiAgICAgICAgICAgICAgICAgICAgLnRyaWdnZXIoJ2NoYW5nZScpXG4gICAgICAgICAgICAgICAgICAgIC5oaWRlKClcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2Rpc2FibGVkJywgJ2Rpc2FibGVkJylcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkJylcbiAgICAgICAgICAgICAgICAgICAgLmhpZGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIER5bmFtaWNGaWVsZDtcbn0oKSk7XG5leHBvcnRzLkR5bmFtaWNGaWVsZCA9IER5bmFtaWNGaWVsZDtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGF4aW9zXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImF4aW9zXCIpKTtcbnZhciBqcXVlcnlfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwianF1ZXJ5XCIpKTtcbnJlcXVpcmUoXCJzZWxlY3QyXCIpO1xudmFyIER5bmFtaWNGaWVsZF8xID0gcmVxdWlyZShcIi4vRHluYW1pY0ZpZWxkXCIpO1xudmFyIGR5bmFtaWNGaWVsZCA9IG5ldyBEeW5hbWljRmllbGRfMS5EeW5hbWljRmllbGQoKTtcbnZhciBGb3JtQnVpbGRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBGb3JtQnVpbGRlcigpIHtcbiAgICB9XG4gICAgLy8gYWRkcyBuZXcgY29sbGVjdGlvbiBvZiBzdWItZWxlbWVudFxuICAgIEZvcm1CdWlsZGVyLnByb3RvdHlwZS5hZGRGb3JtID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHZhciB0YXJnZXQgPSBldi50YXJnZXQ7XG4gICAgICAgIHZhciBjb250YWluZXIgPSAoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGFyZ2V0KS5hdHRyKCdmb3JtX3R5cGUnKVxuICAgICAgICAgICAgPyAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoXCIuY29sbGVjdGlvbi1jb250YWluZXJbZm9ybV90eXBlID0nXCIuY29uY2F0KCgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0YXJnZXQpLmF0dHIoJ2Zvcm1fdHlwZScpLCBcIiddXCIpKVxuICAgICAgICAgICAgOiAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoJy5jb2xsZWN0aW9uLWNvbnRhaW5lcicpO1xuICAgICAgICB2YXIgY291bnQgPSAoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGFyZ2V0KS5hdHRyKCdjaGlsZF9jb3VudCcpXG4gICAgICAgICAgICA/IHBhcnNlSW50KCgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0YXJnZXQpLmF0dHIoJ2NoaWxkX2NvdW50JykpICsgMVxuICAgICAgICAgICAgOiAoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGFyZ2V0KS5wYXJlbnQoKS5maW5kKCcuZm9ybS1jaGlsZC1ib2R5JykubGVuZ3RoO1xuICAgICAgICB2YXIgcGFyZW50X2NvdW50ID0gKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRhcmdldCkuYXR0cigncGFyZW50X2NvdW50JylcbiAgICAgICAgICAgID8gcGFyc2VJbnQoKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRhcmdldCkuYXR0cigncGFyZW50X2NvdW50JykpXG4gICAgICAgICAgICA6ICgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0YXJnZXQpLnBhcmVudHMoJy5tdWx0aS1mb3JtJykuaW5kZXgoKSAtIDE7XG4gICAgICAgIHZhciB3cmFwcGVyX3BhcmVudF9jb3VudCA9ICgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0YXJnZXQpLmF0dHIoJ3dyYXBwZWRfcGFyZW50X2NvdW50JylcbiAgICAgICAgICAgID8gcGFyc2VJbnQoKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRhcmdldCkuYXR0cignd3JhcHBlZF9wYXJlbnRfY291bnQnKSlcbiAgICAgICAgICAgIDogKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRhcmdldCkucGFyZW50cygnLndyYXBwZWQtY2hpbGQtYm9keScpLmluZGV4KCkgLSAxO1xuICAgICAgICB2YXIgcHJvdG8gPSBjb250YWluZXJcbiAgICAgICAgICAgIC5kYXRhKCdwcm90b3R5cGUnKVxuICAgICAgICAgICAgLnJlcGxhY2UoL19fUEFSRU5UX05BTUVfXy9nLCBwYXJlbnRfY291bnQpO1xuICAgICAgICBpZiAoKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRhcmdldCkuYXR0cignaGFzX2NoaWxkX2NvbGxlY3Rpb24nKSkge1xuICAgICAgICAgICAgcHJvdG8gPSBwcm90by5yZXBsYWNlKC9fX1dSQVBQRVJfTkFNRV9fL2csIGNvdW50KTtcbiAgICAgICAgICAgIHByb3RvID0gcHJvdG8ucmVwbGFjZSgvX19OQU1FX18vZywgMCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwcm90byA9IHByb3RvLnJlcGxhY2UoL19fTkFNRV9fL2csIGNvdW50KTtcbiAgICAgICAgICAgIHByb3RvID0gcHJvdG8ucmVwbGFjZSgvX19XUkFQUEVSX05BTUVfXy9nLCB3cmFwcGVyX3BhcmVudF9jb3VudCk7XG4gICAgICAgIH1cbiAgICAgICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRhcmdldCkucHJldigpLmFwcGVuZCgoMCwganF1ZXJ5XzEuZGVmYXVsdCkocHJvdG8pKTtcbiAgICAgICAgaWYgKCgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0YXJnZXQpLmF0dHIoJ2hhc19jaGlsZF9jb2xsZWN0aW9uJykpIHtcbiAgICAgICAgICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0YXJnZXQpXG4gICAgICAgICAgICAgICAgLnByZXYoJy5zdWJlbGVtZW50JylcbiAgICAgICAgICAgICAgICAuY2hpbGRyZW4oJy53cmFwcGVkLWNoaWxkLWJvZHknKVxuICAgICAgICAgICAgICAgIC5sYXN0KClcbiAgICAgICAgICAgICAgICAuZmluZCgnLmFkZF90b19jb2xsZWN0aW9uJylcbiAgICAgICAgICAgICAgICAuYXR0cignd3JhcHBlZF9wYXJlbnRfY291bnQnLCBjb3VudCk7XG4gICAgICAgICAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGFyZ2V0KVxuICAgICAgICAgICAgICAgIC5wcmV2KCcuc3ViZWxlbWVudCcpXG4gICAgICAgICAgICAgICAgLmNoaWxkcmVuKCcud3JhcHBlZC1jaGlsZC1ib2R5JylcbiAgICAgICAgICAgICAgICAubGFzdCgpXG4gICAgICAgICAgICAgICAgLmZpbmQoJy5hZGRfdG9fY29sbGVjdGlvbicpXG4gICAgICAgICAgICAgICAgLmF0dHIoJ3BhcmVudF9jb3VudCcsIHBhcmVudF9jb3VudCk7XG4gICAgICAgIH1cbiAgICAgICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRhcmdldClcbiAgICAgICAgICAgIC5wcmV2KClcbiAgICAgICAgICAgIC5maW5kKCcud3JhcHBlZC1jaGlsZC1ib2R5JylcbiAgICAgICAgICAgIC5sYXN0KClcbiAgICAgICAgICAgIC5maW5kKCcuYWRkX3RvX2NvbGxlY3Rpb24nKVxuICAgICAgICAgICAgLmF0dHIoJ3dyYXBwZXJfcGFyZW50X2NvdW50Jywgd3JhcHBlcl9wYXJlbnRfY291bnQgIT09IG51bGwgJiYgd3JhcHBlcl9wYXJlbnRfY291bnQgIT09IHZvaWQgMCA/IHdyYXBwZXJfcGFyZW50X2NvdW50IDogMCk7XG4gICAgICAgIGlmICgoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGFyZ2V0KS5hdHRyKCdmb3JtX3R5cGUnKSkge1xuICAgICAgICAgICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRhcmdldCkucHJldigpLmxhc3QoKS5maW5kKCcuc2VsZWN0MicpLnNlbGVjdDIoe1xuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAnU2VsZWN0IGFuIG9wdGlvbicsXG4gICAgICAgICAgICAgICAgYWxsb3dDbGVhcjogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRoaXMpXG4gICAgICAgICAgICAgICAgLmZpbmQoJy5zdWItYXR0cmlidXRlJylcbiAgICAgICAgICAgICAgICAud3JhcEFsbCgoMCwganF1ZXJ5XzEuZGVmYXVsdCkoJzxkaXYgY2xhc3M9XCJmb3JtLWZpZWxkLWdyb3VwIGZsZXggZmxleC13cmFwIHJvdW5kZWQtYnItbGcgYm9yZGVyLXkgYm9yZGVyLXIgYm9yZGVyLXNwcmluZy01MCBzdWItYXR0cmlidXRlLXdyYXBwZXJcIj48L2Rpdj4nKSk7XG4gICAgICAgICAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGFyZ2V0KVxuICAgICAgICAgICAgICAgIC5wcmV2KCcuc3ViZWxlbWVudCcpXG4gICAgICAgICAgICAgICAgLmNoaWxkcmVuKCcud3JhcHBlZC1jaGlsZC1ib2R5JylcbiAgICAgICAgICAgICAgICAubGFzdCgpXG4gICAgICAgICAgICAgICAgLmZpbmQoJy5zdWItYXR0cmlidXRlJylcbiAgICAgICAgICAgICAgICAud3JhcEFsbCgoMCwganF1ZXJ5XzEuZGVmYXVsdCkoJzxkaXYgY2xhc3M9XCJmb3JtLWZpZWxkLWdyb3VwIGZsZXggZmxleC13cmFwIHJvdW5kZWQtYnItbGcgYm9yZGVyLXkgYm9yZGVyLXIgYm9yZGVyLXNwcmluZy01MCBzdWItYXR0cmlidXRlLXdyYXBwZXIgbXQtNlwiPjwvZGl2PicpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0YXJnZXQpXG4gICAgICAgICAgICAgICAgLnBhcmVudCgpXG4gICAgICAgICAgICAgICAgLmZpbmQoJy5mb3JtLWNoaWxkLWJvZHknKVxuICAgICAgICAgICAgICAgIC5sYXN0KClcbiAgICAgICAgICAgICAgICAuZmluZCgnLnNlbGVjdDInKVxuICAgICAgICAgICAgICAgIC5zZWxlY3QyKHtcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJ1NlbGVjdCBhbiBvcHRpb24nLFxuICAgICAgICAgICAgICAgIGFsbG93Q2xlYXI6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGFyZ2V0KS5hdHRyKCdjaGlsZF9jb3VudCcsIGNvdW50KTtcbiAgICAgICAgZHluYW1pY0ZpZWxkLmFpZFR5cGVWb2NhYnVsYXJ5SGlkZUZpZWxkKCk7XG4gICAgICAgIGR5bmFtaWNGaWVsZC5zZWN0b3JWb2NhYnVsYXJ5SGlkZUZpZWxkKCk7XG4gICAgfTtcbiAgICAvLyBhZGRzIHBhcmVudCBjb2xsZWN0aW9uXG4gICAgRm9ybUJ1aWxkZXIucHJvdG90eXBlLmFkZFBhcmVudEZvcm0gPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdmFyIHRhcmdldCA9IGV2LnRhcmdldDtcbiAgICAgICAgdmFyIGNvbnRhaW5lciA9ICgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0YXJnZXQpLmF0dHIoJ2Zvcm1fdHlwZScpXG4gICAgICAgICAgICA/ICgwLCBqcXVlcnlfMS5kZWZhdWx0KShcIi5wYXJlbnQtY29sbGVjdGlvbltmb3JtX3R5cGUgPSdcIi5jb25jYXQoKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRhcmdldCkuYXR0cignZm9ybV90eXBlJyksIFwiJ11cIikpXG4gICAgICAgICAgICA6ICgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnLnBhcmVudC1jb2xsZWN0aW9uJyk7XG4gICAgICAgIHZhciBjb3VudCA9ICgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0YXJnZXQpLmF0dHIoJ3BhcmVudF9jb3VudCcpXG4gICAgICAgICAgICA/IHBhcnNlSW50KCgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0YXJnZXQpLmF0dHIoJ3BhcmVudF9jb3VudCcpKSArIDFcbiAgICAgICAgICAgIDogKCgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0YXJnZXQpLnByZXYoKS5maW5kKCcubXVsdGktZm9ybScpLmxlbmd0aFxuICAgICAgICAgICAgICAgID8gKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRhcmdldCkucHJldigpLmZpbmQoJy5tdWx0aS1mb3JtJykubGVuZ3RoXG4gICAgICAgICAgICAgICAgOiAoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGFyZ2V0KS5wcmV2KCkuZmluZCgnLndyYXBwZWQtY2hpbGQtYm9keScpLmxlbmd0aCkgKyAxO1xuICAgICAgICB2YXIgcHJvdG8gPSBjb250YWluZXIuZGF0YSgncHJvdG90eXBlJykucmVwbGFjZSgvX19QQVJFTlRfTkFNRV9fL2csIGNvdW50KTtcbiAgICAgICAgcHJvdG8gPSBwcm90by5yZXBsYWNlKC9fX05BTUVfXy9nLCAwKTtcbiAgICAgICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRhcmdldCkucHJldigpLmFwcGVuZCgoMCwganF1ZXJ5XzEuZGVmYXVsdCkocHJvdG8pKTtcbiAgICAgICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRhcmdldCkucHJldigpLmZpbmQoJy5tdWx0aS1mb3JtJykubGFzdCgpLmZpbmQoJy5zZWxlY3QyJykuc2VsZWN0Mih7XG4gICAgICAgICAgICBwbGFjZWhvbGRlcjogJ1NlbGVjdCBhbiBvcHRpb24nLFxuICAgICAgICAgICAgYWxsb3dDbGVhcjogdHJ1ZSxcbiAgICAgICAgfSk7XG4gICAgICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0YXJnZXQpXG4gICAgICAgICAgICAucHJldigpXG4gICAgICAgICAgICAuZmluZCgnLm11bHRpLWZvcm0nKVxuICAgICAgICAgICAgLmxhc3QoKVxuICAgICAgICAgICAgLmZpbmQoJy5hZGRfdG9fY29sbGVjdGlvbicpXG4gICAgICAgICAgICAuYXR0cigncGFyZW50X2NvdW50JywgY291bnQpO1xuICAgICAgICB0aGlzLmFkZFdyYXBwZXJPbkFkZCh0YXJnZXQpO1xuICAgICAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGFyZ2V0KS5hdHRyKCdwYXJlbnRfY291bnQnLCBjb3VudCk7XG4gICAgICAgIGR5bmFtaWNGaWVsZC5odW1hbml0YXJpYW5TY29wZUhpZGVWb2NhYnVsYXJ5VXJpKCk7XG4gICAgICAgIGR5bmFtaWNGaWVsZC5jb3VudHJ5QnVkZ2V0SGlkZUNvZGVGaWVsZCgpO1xuICAgICAgICBkeW5hbWljRmllbGQuc2VjdG9yVm9jYWJ1bGFyeUhpZGVGaWVsZCgpO1xuICAgICAgICBkeW5hbWljRmllbGQucmVjaXBpZW50Vm9jYWJ1bGFyeUhpZGVGaWVsZCgpO1xuICAgICAgICBkeW5hbWljRmllbGQucG9saWN5Vm9jYWJ1bGFyeUhpZGVGaWVsZCgpO1xuICAgICAgICBkeW5hbWljRmllbGQudGFnVm9jYWJ1bGFyeUhpZGVGaWVsZCgpO1xuICAgICAgICBkeW5hbWljRmllbGQudHJhbnNhY3Rpb25BaWRUeXBlVm9jYWJ1bGFyeUhpZGVGaWVsZCgpO1xuICAgICAgICBkeW5hbWljRmllbGQuaW5kaWNhdG9yUmVmZXJlbmNlSGlkZUZpZWxkVXJpKCk7XG4gICAgfTtcbiAgICAvLyBkZWxldGVzIGNvbGxlY3Rpb25cbiAgICBGb3JtQnVpbGRlci5wcm90b3R5cGUuZGVsZXRlRm9ybSA9IGZ1bmN0aW9uIChldikge1xuICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB2YXIgdGFyZ2V0ID0gZXYudGFyZ2V0O1xuICAgICAgICB2YXIgY29sbGVjdGlvbkxlbmd0aCA9ICgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnLm11bHRpLWZvcm0nKS5sZW5ndGhcbiAgICAgICAgICAgID8gKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRhcmdldCkuY2xvc2VzdCgnLnN1YmVsZW1lbnQnKS5maW5kKCcuZm9ybS1jaGlsZC1ib2R5JykubGVuZ3RoXG4gICAgICAgICAgICA6ICgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnLmZvcm0tY2hpbGQtYm9keScpLmxlbmd0aDtcbiAgICAgICAgdmFyIGNvdW50ID0gKDAsIGpxdWVyeV8xLmRlZmF1bHQpKCcuYWRkX3RvX2NvbGxlY3Rpb24nKS5hdHRyKCdjaGlsZF9jb3VudCcpXG4gICAgICAgICAgICA/IHBhcnNlSW50KCgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnLmFkZF90b19jb2xsZWN0aW9uJykuYXR0cignY2hpbGRfY291bnQnKSkgKyAxXG4gICAgICAgICAgICA6IGNvbGxlY3Rpb25MZW5ndGg7XG4gICAgICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnLmFkZF90b19jb2xsZWN0aW9uJykuYXR0cignY2hpbGRfY291bnQnLCBjb3VudCk7XG4gICAgICAgIGlmIChjb2xsZWN0aW9uTGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgdmFyIHRnID0gKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRhcmdldCkuY2xvc2VzdCgnLmZvcm0tY2hpbGQtYm9keScpO1xuICAgICAgICAgICAgdGcubmV4dCgnLmVycm9yJykucmVtb3ZlKCk7XG4gICAgICAgICAgICB0Zy5yZW1vdmUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLy8gZGVsZXRlcyBwYXJlbnQgY29sbGVjdGlvblxuICAgIEZvcm1CdWlsZGVyLnByb3RvdHlwZS5kZWxldGVQYXJlbnRGb3JtID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHZhciB0YXJnZXQgPSBldi50YXJnZXQ7XG4gICAgICAgIHZhciBjb2xsZWN0aW9uTGVuZ3RoID0gKDAsIGpxdWVyeV8xLmRlZmF1bHQpKCcuc3ViZWxlbWVudCcpLmxlbmd0aDtcbiAgICAgICAgdmFyIGNvdW50ID0gKDAsIGpxdWVyeV8xLmRlZmF1bHQpKCcuYWRkX3RvX3BhcmVudCcpLmF0dHIoJ2NoaWxkX2NvdW50JylcbiAgICAgICAgICAgID8gcGFyc2VJbnQoKDAsIGpxdWVyeV8xLmRlZmF1bHQpKCcuYWRkX3RvX3BhcmVudCcpLmF0dHIoJ2NoaWxkX2NvdW50JykpICsgMVxuICAgICAgICAgICAgOiBjb2xsZWN0aW9uTGVuZ3RoO1xuICAgICAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoJy5hZGRfdG9fcGFyZW50JykuYXR0cignY2hpbGRfY291bnQnLCBjb3VudCk7XG4gICAgICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnLmFkZF90b19wYXJlbnQnKS5hdHRyKCdwYXJlbnRfY291bnQnLCBjb3VudCk7XG4gICAgICAgIGlmIChjb2xsZWN0aW9uTGVuZ3RoID4gMikge1xuICAgICAgICAgICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRhcmdldCkucGFyZW50KCkucmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vYWRkIHdyYXBwZXIgZGl2IGFyb3VuZCB0aGUgYXR0cmlidXRlc1xuICAgIEZvcm1CdWlsZGVyLnByb3RvdHlwZS5hZGRXcmFwcGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoJy5tdWx0aS1mb3JtJykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGhpcylcbiAgICAgICAgICAgICAgICAuZmluZCgnLmF0dHJpYnV0ZScpXG4gICAgICAgICAgICAgICAgLndyYXBBbGwoKDAsIGpxdWVyeV8xLmRlZmF1bHQpKCc8ZGl2IGNsYXNzPVwiZm9ybS1maWVsZC1ncm91cCBmbGV4IGZsZXgtd3JhcCByb3VuZGVkLWJyLWxnIGJvcmRlci15IGJvcmRlci1yIGJvcmRlci1zcHJpbmctNTAgYXR0cmlidXRlLXdyYXBwZXIgbWItNFwiPjwvZGl2PicpKTtcbiAgICAgICAgfSk7XG4gICAgICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnLnN1YmVsZW1lbnQnKVxuICAgICAgICAgICAgLmZpbmQoJy53cmFwcGVkLWNoaWxkLWJvZHknKVxuICAgICAgICAgICAgLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRoaXMpXG4gICAgICAgICAgICAgICAgLmZpbmQoJy5zdWItYXR0cmlidXRlJylcbiAgICAgICAgICAgICAgICAud3JhcEFsbCgoMCwganF1ZXJ5XzEuZGVmYXVsdCkoJzxkaXYgY2xhc3M9XCJmb3JtLWZpZWxkLWdyb3VwIGZsZXggZmxleC13cmFwIHJvdW5kZWQtYnItbGcgYm9yZGVyLXkgYm9yZGVyLXIgYm9yZGVyLXNwcmluZy01MCBzdWItYXR0cmlidXRlLXdyYXBwZXIgbWItNFwiPjwvZGl2PicpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBmb3JtRmllbGQgPSAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoJ2Zvcm0+LmZvcm0tZmllbGQnKTtcbiAgICAgICAgaWYgKGZvcm1GaWVsZC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBmb3JtRmllbGQud3JhcEFsbCgnPGRpdiBjbGFzcz1cImZvcm0tZmllbGQtZ3JvdXAtb3V0ZXIgZ3JpZCB4bDpncmlkLWNvbHMtMiBtYi02IC1teC0zIGdhcC15LTZcIj48L2Rpdj4nKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgRm9ybUJ1aWxkZXIucHJvdG90eXBlLmFkZFdyYXBwZXJPbkFkZCA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRhcmdldClcbiAgICAgICAgICAgIC5wcmV2KClcbiAgICAgICAgICAgIC5maW5kKCcubXVsdGktZm9ybScpXG4gICAgICAgICAgICAubGFzdCgpXG4gICAgICAgICAgICAuZmluZCgnLmF0dHJpYnV0ZScpXG4gICAgICAgICAgICAud3JhcEFsbCgoMCwganF1ZXJ5XzEuZGVmYXVsdCkoJzxkaXYgY2xhc3M9XCJmb3JtLWZpZWxkLWdyb3VwIGdyaWQgeGw6Z3JpZC1jb2xzLTIgcm91bmRlZC1ici1sZyBib3JkZXIteSBib3JkZXItciBib3JkZXItc3ByaW5nLTUwIGF0dHJpYnV0ZS13cmFwcGVyIG1iLTRcIj48L2Rpdj4nKSk7XG4gICAgICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0YXJnZXQpXG4gICAgICAgICAgICAucHJldigpXG4gICAgICAgICAgICAuZmluZCgnLm11bHRpLWZvcm0nKVxuICAgICAgICAgICAgLmxhc3QoKVxuICAgICAgICAgICAgLmZpbmQoJy5zdWJlbGVtZW50JylcbiAgICAgICAgICAgIC5maW5kKCcud3JhcHBlZC1jaGlsZC1ib2R5JylcbiAgICAgICAgICAgIC5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0aGlzKVxuICAgICAgICAgICAgICAgIC5maW5kKCcuc3ViLWF0dHJpYnV0ZScpXG4gICAgICAgICAgICAgICAgLndyYXBBbGwoKDAsIGpxdWVyeV8xLmRlZmF1bHQpKCc8ZGl2IGNsYXNzPVwiZm9ybS1maWVsZC1ncm91cCBmbGV4IGZsZXgtd3JhcCByb3VuZGVkLWJyLWxnIGJvcmRlci15IGJvcmRlci1yIGJvcmRlci1zcHJpbmctNTAgc3ViLWF0dHJpYnV0ZS13cmFwcGVyIG1iLTRcIj48L2Rpdj4nKSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgRm9ybUJ1aWxkZXIucHJvdG90eXBlLnRleHRBcmVhSGVpZ2h0ID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgIHZhciB0YXJnZXQgPSBldi50YXJnZXQ7XG4gICAgICAgIHZhciBoZWlnaHQgPSB0YXJnZXQuc2Nyb2xsSGVpZ2h0O1xuICAgICAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGFyZ2V0KS5jc3MoJ2hlaWdodCcsIGhlaWdodCk7XG4gICAgfTtcbiAgICBGb3JtQnVpbGRlci5wcm90b3R5cGUuYWRkVG9Db2xsZWN0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoJ2JvZHknKS5vbignY2xpY2snLCAnLmFkZF90b19jb2xsZWN0aW9uJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICBpZiAoKDAsIGpxdWVyeV8xLmRlZmF1bHQpKGV2ZW50LnRhcmdldCkuaGFzQ2xhc3MoJ2FkZC1pY29uJykpIHtcbiAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoZXZlbnQudGFyZ2V0KVxuICAgICAgICAgICAgICAgICAgICAucGFyZW50KCdidXR0b24nKVxuICAgICAgICAgICAgICAgICAgICAudHJpZ2dlcignY2xpY2snKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIF90aGlzLmFkZEZvcm0oZXZlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKCcuYWRkX3RvX3BhcmVudCcpLm9uKCdjbGljaycsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgaWYgKCgwLCBqcXVlcnlfMS5kZWZhdWx0KShldmVudC50YXJnZXQpLmhhc0NsYXNzKCdhZGQtaWNvbicpKSB7XG4gICAgICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKGV2ZW50LnRhcmdldClcbiAgICAgICAgICAgICAgICAgICAgLnBhcmVudCgnYnV0dG9uJylcbiAgICAgICAgICAgICAgICAgICAgLnRyaWdnZXIoJ2NsaWNrJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5hZGRQYXJlbnRGb3JtKGV2ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBGb3JtQnVpbGRlci5wcm90b3R5cGUuZGVsZXRlQ29sbGVjdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGRlbGV0ZUNvbmZpcm1hdGlvbiA9ICgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnLmRlbGV0ZS1jb25maXJtYXRpb24nKSwgY2FuY2VsUG9wdXAgPSAnLmNhbmNlbC1wb3B1cCcsIGRlbGV0ZUNvbmZpcm0gPSAnLmRlbGV0ZS1jb25maXJtJztcbiAgICAgICAgdmFyIGRlbGV0ZUluZGV4ID0ge30sIGNoaWxkT3JQYXJlbnQgPSAnJztcbiAgICAgICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKCdib2R5Jykub24oJ2NsaWNrJywgJy5kZWxldGUnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIGRlbGV0ZUNvbmZpcm1hdGlvbi5mYWRlSW4oKTtcbiAgICAgICAgICAgIGRlbGV0ZUluZGV4ID0gZXZlbnQ7XG4gICAgICAgICAgICBjaGlsZE9yUGFyZW50ID0gJ2NoaWxkJztcbiAgICAgICAgfSk7XG4gICAgICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnYm9keScpLm9uKCdjbGljaycsIGNhbmNlbFBvcHVwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBkZWxldGVDb25maXJtYXRpb24uZmFkZU91dCgpO1xuICAgICAgICAgICAgZGVsZXRlSW5kZXggPSB7fTtcbiAgICAgICAgICAgIGNoaWxkT3JQYXJlbnQgPSAnJztcbiAgICAgICAgfSk7XG4gICAgICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnYm9keScpLm9uKCdjbGljaycsIGRlbGV0ZUNvbmZpcm0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChjaGlsZE9yUGFyZW50ID09PSAnY2hpbGQnKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuZGVsZXRlRm9ybShkZWxldGVJbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGlsZE9yUGFyZW50ID09PSAncGFyZW50Jykge1xuICAgICAgICAgICAgICAgIF90aGlzLmRlbGV0ZVBhcmVudEZvcm0oZGVsZXRlSW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVsZXRlQ29uZmlybWF0aW9uLmZhZGVPdXQoKTtcbiAgICAgICAgICAgIGRlbGV0ZUluZGV4ID0ge307XG4gICAgICAgICAgICBjaGlsZE9yUGFyZW50ID0gJyc7XG4gICAgICAgIH0pO1xuICAgICAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoJ2JvZHknKS5vbignY2xpY2snLCAnLmRlbGV0ZS1wYXJlbnQnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIGRlbGV0ZUNvbmZpcm1hdGlvbi5mYWRlSW4oKTtcbiAgICAgICAgICAgIGRlbGV0ZUluZGV4ID0gZXZlbnQ7XG4gICAgICAgICAgICBjaGlsZE9yUGFyZW50ID0gJ3BhcmVudCc7XG4gICAgICAgIH0pO1xuICAgICAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoJy5zZWxlY3QyJykuc2VsZWN0Mih7XG4gICAgICAgICAgICBwbGFjZWhvbGRlcjogJ1NlbGVjdCBhbiBvcHRpb24nLFxuICAgICAgICAgICAgYWxsb3dDbGVhcjogdHJ1ZSxcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIHVwZGF0ZSBmb3JtYXQgb24gY2hhbmdlIG9mIGRvY3VtZW50IGxpbmtcbiAgICAgICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKCdib2R5Jykub24oJ2NoYW5nZScsICdpbnB1dFtpZCo9XCJbdXJsXVwiXScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICB2YXIgZmlsZVBhdGggPSAoKF9hID0gKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRoaXMpLnZhbCgpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAnJykudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIHZhciBkb2N1bWVudCA9ICgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0aGlzKVxuICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZC1ncm91cCcpXG4gICAgICAgICAgICAgICAgLmZpbmQoJ2lucHV0W2lkKj1cIltkb2N1bWVudF1cIl0nKVxuICAgICAgICAgICAgICAgIC52YWwoKTtcbiAgICAgICAgICAgIHZhciB1cmwgPSBcIi9taW1ldHlwZT91cmw9XCIuY29uY2F0KGZpbGVQYXRoLCBcIiZ0eXBlPXVybFwiKTtcbiAgICAgICAgICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0aGlzKS5jbG9zZXN0KCcuZm9ybS1maWVsZCcpLmZpbmQoJy50ZXh0LWRhbmdlcicpLnJlbW92ZSgpO1xuICAgICAgICAgICAgaWYgKGZpbGVQYXRoICE9PSAnJykge1xuICAgICAgICAgICAgICAgIGF4aW9zXzEuZGVmYXVsdC5nZXQodXJsKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5zdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZm9ybWF0ID0gcmVzcG9uc2UuZGF0YS5kYXRhLm1pbWV0eXBlO1xuICAgICAgICAgICAgICAgICAgICAgICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKF90aGlzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZC1ncm91cCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZpbmQoJ3NlbGVjdFtpZCo9XCJbZm9ybWF0XVwiXScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnZhbChmb3JtYXQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRyaWdnZXIoJ2NoYW5nZScpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKF90aGlzKS5jbG9zZXN0KCcuZm9ybS1maWVsZCcpLmZpbmQoJy50ZXh0LWRhbmdlcicpLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKF90aGlzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZChcIjxkaXYgY2xhc3M9J3RleHQtZGFuZ2VyIGVycm9yJz5cIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UuZGF0YS5tZXNzYWdlICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPC9kaXY+Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoX3RoaXMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmluZCgnc2VsZWN0W2lkKj1cIltmb3JtYXRdXCJdJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudmFsKCcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50cmlnZ2VyKCdjaGFuZ2UnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoX3RoaXMpXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQtZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmZpbmQoJ2lucHV0W2lkKj1cIltkb2N1bWVudF1cIl0nKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnZhbCgnJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC50cmlnZ2VyKCdjaGFuZ2UnKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKCFkb2N1bWVudCB8fCBkb2N1bWVudCA9PT0gJycpIHtcbiAgICAgICAgICAgICAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGhpcylcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoJ3NlbGVjdFtpZCo9XCJbZm9ybWF0XVwiXScpXG4gICAgICAgICAgICAgICAgICAgIC52YWwoJycpXG4gICAgICAgICAgICAgICAgICAgIC50cmlnZ2VyKCdjaGFuZ2UnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnYm9keScpLm9uKCdjaGFuZ2UnLCAnaW5wdXRbaWQqPVwiW2RvY3VtZW50XVwiXScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICB2YXIgZmlsZVBhdGggPSAoKF9hID0gKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRoaXMpLnZhbCgpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAnJykudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIHZhciB1cmwgPSBcIi9taW1ldHlwZT91cmw9XCIuY29uY2F0KGZpbGVQYXRoLCBcIiYmdHlwZT1kb2N1bWVudFwiKTtcbiAgICAgICAgICAgIHZhciBmaWxlVXJsID0gKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRoaXMpXG4gICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAuZmluZCgnaW5wdXRbaWQqPVwiW3VybF1cIl0nKVxuICAgICAgICAgICAgICAgIC52YWwoKTtcbiAgICAgICAgICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0aGlzKS5jbG9zZXN0KCcuZm9ybS1maWVsZCcpLmZpbmQoJy50ZXh0LWRhbmdlcicpLnJlbW92ZSgpO1xuICAgICAgICAgICAgaWYgKGZpbGVQYXRoICE9PSAnJykge1xuICAgICAgICAgICAgICAgIGF4aW9zXzEuZGVmYXVsdC5nZXQodXJsKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5zdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZm9ybWF0ID0gcmVzcG9uc2UuZGF0YS5kYXRhLm1pbWV0eXBlO1xuICAgICAgICAgICAgICAgICAgICAgICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKF90aGlzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZC1ncm91cCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZpbmQoJ3NlbGVjdFtpZCo9XCJbZm9ybWF0XVwiXScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnZhbChmb3JtYXQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRyaWdnZXIoJ2NoYW5nZScpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKF90aGlzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZC1ncm91cCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZpbmQoJ3NlbGVjdFtpZCo9XCJbZm9ybWF0XVwiXScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnZhbCgnJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudHJpZ2dlcignY2hhbmdlJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGhpcylcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoJ2lucHV0W2lkKj1cIlt1cmxdXCJdJylcbiAgICAgICAgICAgICAgICAgICAgLnZhbCgnJylcbiAgICAgICAgICAgICAgICAgICAgLnRyaWdnZXIoJ2NoYW5nZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoIWZpbGVVcmwgfHwgZmlsZVVybCA9PT0gJycpIHtcbiAgICAgICAgICAgICAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGhpcylcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoJ3NlbGVjdFtpZCo9XCJbZm9ybWF0XVwiXScpXG4gICAgICAgICAgICAgICAgICAgIC52YWwoJycpXG4gICAgICAgICAgICAgICAgICAgIC50cmlnZ2VyKCdjaGFuZ2UnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gRm9ybUJ1aWxkZXI7XG59KCkpO1xuKDAsIGpxdWVyeV8xLmRlZmF1bHQpKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZm9ybUJ1aWxkZXIgPSBuZXcgRm9ybUJ1aWxkZXIoKTtcbiAgICBmb3JtQnVpbGRlci5hZGRXcmFwcGVyKCk7XG4gICAgZHluYW1pY0ZpZWxkLmhpZGVTaG93Rm9ybUZpZWxkcygpO1xuICAgIGR5bmFtaWNGaWVsZC51cGRhdGVBY3Rpdml0eUlkZW50aWZpZXIoKTtcbiAgICBmb3JtQnVpbGRlci5hZGRUb0NvbGxlY3Rpb24oKTtcbiAgICBmb3JtQnVpbGRlci5kZWxldGVDb2xsZWN0aW9uKCk7XG4gICAgLyoqXG4gICAgICogVGV4dCBhcmVhIGhlaWdodCBvbiB0eXBpbmdcbiAgICAgKi9cbiAgICB2YXIgdGV4dEFyZWFUYXJnZXQgPSAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoJ3RleHRhcmVhLmZvcm1fX2lucHV0Jyk7XG4gICAgaWYgKHRleHRBcmVhVGFyZ2V0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKCdib2R5Jykub24oJ2lucHV0JywgJ3RleHRhcmVhLmZvcm1fX2lucHV0JywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICBmb3JtQnVpbGRlci50ZXh0QXJlYUhlaWdodChldmVudCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoJ2JvZHknKS5vbignc2VsZWN0MjpvcGVuJywgJy5zZWxlY3QyJywgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc2VsZWN0X3NlYXJjaCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zZWxlY3QyLXNlYXJjaF9fZmllbGQnKTtcbiAgICAgICAgaWYgKHNlbGVjdF9zZWFyY2gpIHtcbiAgICAgICAgICAgIHNlbGVjdF9zZWFyY2guZm9jdXMoKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIC8qKlxuICAgICAqIGNoZWNrcyByZWdpc3RyYXRpb24gYWdlbmN5LCBjb3VudHJ5IGFuZCByZWdpc3RyYXRpb24gbnVtYmVyIHRvIGRlZHVjZSBpZGVudGlmaWVyXG4gICAgICovXG4gICAgdXBkYXRlUmVnaXN0cmF0aW9uQWdlbmN5KCgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnI29yZ2FuaXphdGlvbl9jb3VudHJ5JykpO1xuICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnI29yZ2FuaXNhdGlvbl9pZGVudGlmaWVyJykuYXR0cignZGlzYWJsZWQnLCAnZGlzYWJsZWQnKTtcbiAgICBmdW5jdGlvbiB1cGRhdGVSZWdpc3RyYXRpb25BZ2VuY3koY291bnRyeSkge1xuICAgICAgICB2YXIgZW5kcG9pbnQgPSBjb3VudHJ5LnZhbCgpXG4gICAgICAgICAgICA/ICcvb3JnYW5pc2F0aW9uL2FnZW5jeS8nICsgY291bnRyeS52YWwoKVxuICAgICAgICAgICAgOiAnL29yZ2FuaXNhdGlvbi9hZ2VuY3kvJztcbiAgICAgICAganF1ZXJ5XzEuZGVmYXVsdC5hamF4KHsgdXJsOiBlbmRwb2ludCB9KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRfdmFsID0gKF9hID0gKDAsIGpxdWVyeV8xLmRlZmF1bHQpKCcjb3JnYW5pemF0aW9uX3JlZ2lzdHJhdGlvbl9hZ2VuY3knKS52YWwoKSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJyc7XG4gICAgICAgICAgICB2YXIgdmFsID0gZmFsc2U7XG4gICAgICAgICAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoJyNvcmdhbml6YXRpb25fcmVnaXN0cmF0aW9uX2FnZW5jeScpLmVtcHR5KCk7XG4gICAgICAgICAgICBmb3IgKHZhciBkYXRhIGluIHJlc3BvbnNlLmRhdGEpIHtcbiAgICAgICAgICAgICAgICBpZiAoZGF0YSA9PT0gY3VycmVudF92YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKCcjb3JnYW5pemF0aW9uX3JlZ2lzdHJhdGlvbl9hZ2VuY3knKVxuICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKG5ldyBPcHRpb24ocmVzcG9uc2UuZGF0YVtkYXRhXSwgZGF0YSwgdHJ1ZSwgdHJ1ZSkpXG4gICAgICAgICAgICAgICAgICAgIC52YWwoJycpXG4gICAgICAgICAgICAgICAgICAgIC50cmlnZ2VyKCdjaGFuZ2UnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnI29yZ2FuaXphdGlvbl9yZWdpc3RyYXRpb25fYWdlbmN5JylcbiAgICAgICAgICAgICAgICAudmFsKHZhbCA/IGN1cnJlbnRfdmFsIDogJycpXG4gICAgICAgICAgICAgICAgLnRyaWdnZXIoJ2NoYW5nZScpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKCdib2R5Jykub24oJ3NlbGVjdDI6c2VsZWN0JywgJyNvcmdhbml6YXRpb25fY291bnRyeScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdXBkYXRlUmVnaXN0cmF0aW9uQWdlbmN5KCgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0aGlzKSk7XG4gICAgfSk7XG4gICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKCdib2R5Jykub24oJ3NlbGVjdDI6Y2xlYXInLCAnI29yZ2FuaXphdGlvbl9jb3VudHJ5JywgZnVuY3Rpb24gKCkge1xuICAgICAgICB1cGRhdGVSZWdpc3RyYXRpb25BZ2VuY3koKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRoaXMpKTtcbiAgICB9KTtcbiAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoJ2JvZHknKS5vbignc2VsZWN0MjpzZWxlY3QnLCAnI29yZ2FuaXphdGlvbl9yZWdpc3RyYXRpb25fYWdlbmN5JywgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaWRlbnRpZmllciA9ICgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0aGlzKS52YWwoKSArICctJyArICgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnI3JlZ2lzdHJhdGlvbl9udW1iZXInKS52YWwoKTtcbiAgICAgICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKCcjb3JnYW5pc2F0aW9uX2lkZW50aWZpZXInKS52YWwoaWRlbnRpZmllcik7XG4gICAgfSk7XG4gICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKCdib2R5Jykub24oJ3NlbGVjdDI6Y2xlYXInLCAnI29yZ2FuaXphdGlvbl9yZWdpc3RyYXRpb25fYWdlbmN5JywgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaWRlbnRpZmllciA9ICctJyArICgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnI3JlZ2lzdHJhdGlvbl9udW1iZXInKS52YWwoKTtcbiAgICAgICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKCcjb3JnYW5pc2F0aW9uX2lkZW50aWZpZXInKS52YWwoaWRlbnRpZmllcik7XG4gICAgfSk7XG4gICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKCdib2R5Jykub24oJ2tleXVwJywgJyNyZWdpc3RyYXRpb25fbnVtYmVyJywgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaWRlbnRpZmllciA9ICgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnI29yZ2FuaXphdGlvbl9yZWdpc3RyYXRpb25fYWdlbmN5JykudmFsKCkgKyAnLScgKyAoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGhpcykudmFsKCk7XG4gICAgICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnI29yZ2FuaXNhdGlvbl9pZGVudGlmaWVyJykudmFsKGlkZW50aWZpZXIpO1xuICAgIH0pO1xuICAgIC8vIGFkZCBjbGFzcyB0byB0aXRsZSBvZiBjb2xsZWN0aW9uIHdoZW4gdmFsaWRhdGlvbiBlcnJvciBvY2N1cnMgb24gY29sbGVjdGlvbiBsZXZlbFxuICAgIHZhciBzdWJlbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnN1YmVsZW1lbnQnKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN1YmVsZW1lbnQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHRpdGxlID0gc3ViZWxlbWVudFtpXS5xdWVyeVNlbGVjdG9yKCcuY29udHJvbC1sYWJlbCcpO1xuICAgICAgICB2YXIgZXJyb3JDb250YWluZXIgPSBzdWJlbGVtZW50W2ldLnF1ZXJ5U2VsZWN0b3IoJy5jb2xsZWN0aW9uX2Vycm9yJyk7XG4gICAgICAgIHZhciBjaGlsZENvdW50ID0gZXJyb3JDb250YWluZXIgPT09IG51bGwgfHwgZXJyb3JDb250YWluZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGVycm9yQ29udGFpbmVyLmNoaWxkRWxlbWVudENvdW50O1xuICAgICAgICBpZiAoY2hpbGRDb3VudCAmJiBjaGlsZENvdW50ID4gMCkge1xuICAgICAgICAgICAgdGl0bGUgPT09IG51bGwgfHwgdGl0bGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHRpdGxlLmNsYXNzTGlzdC5hZGQoJ2Vycm9yLXRpdGxlJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gQWRkaW5nIGN1cnNvciBub3QgYWxsb3dlZCB0byA8c2VsZWN0PiB3aGVyZSBlbGVtZW50SnNvblNjaGVtYSByZWFkX29ubHkgOiB0cnVlXG4gICAgdmFyIHJlYWRPbmx5U2VsZWN0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3NlbGVjdC5jdXJzb3Itbm90LWFsbG93ZWQnKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlYWRPbmx5U2VsZWN0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgc2VsZWN0ID0gcmVhZE9ubHlTZWxlY3RzW2ldO1xuICAgICAgICB2YXIgc2VsZWN0RWxlbWVudFBhcmVudFdyYXBwZXIgPSBzZWxlY3QubmV4dFNpYmxpbmc7XG4gICAgICAgIHZhciBzZWxlY3RFbGVtZW50UGFyZW50ID0gc2VsZWN0RWxlbWVudFBhcmVudFdyYXBwZXIgPT09IG51bGwgfHwgc2VsZWN0RWxlbWVudFBhcmVudFdyYXBwZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNlbGVjdEVsZW1lbnRQYXJlbnRXcmFwcGVyLmZpcnN0Q2hpbGQ7XG4gICAgICAgIHZhciBzZWxlY3RFbGVtZW50ID0gc2VsZWN0RWxlbWVudFBhcmVudCA9PT0gbnVsbCB8fCBzZWxlY3RFbGVtZW50UGFyZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzZWxlY3RFbGVtZW50UGFyZW50LmZpcnN0Q2hpbGQ7XG4gICAgICAgIGlmIChzZWxlY3RFbGVtZW50KSB7XG4gICAgICAgICAgICBzZWxlY3RFbGVtZW50LnN0eWxlLmN1cnNvciA9ICdub3QtYWxsb3dlZCc7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gaGFuZGxlSW5pdGlhbEZvcm1Mb2FkKCkge1xuICAgICAgICB2YXIgYWxsQ29sbGFwc2FibGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuY29sbGFwc2FibGUnKTtcbiAgICAgICAgYWxsQ29sbGFwc2FibGUuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICAgICAgdmFyIGh0bWxFbGVtZW50ID0gZWxlbWVudDtcbiAgICAgICAgICAgIHZhciBidXR0b25JbmZvID0gZ2V0QnV0dG9uSW5mbyhodG1sRWxlbWVudCk7XG4gICAgICAgICAgICB2YXIgaGlkZUJ1dHRvbiA9IHJlbmRlckhpZGVCdXR0b24oaHRtbEVsZW1lbnQsIGJ1dHRvbkluZm8pO1xuICAgICAgICAgICAgLyoqIENsaWNrIGhpZGUgYnV0dG9uIGlmIGFsbCB2YWx1ZXMgaW4gdGhpcyBjb2xsYXBzYWJsZSBpdGVtIGlzIGVtcHR5Ki9cbiAgICAgICAgICAgIGlmICghaGFzTm9uRW1wdHlGaWVsZHMoaHRtbEVsZW1lbnQpKSB7XG4gICAgICAgICAgICAgICAgaGlkZUJ1dHRvbi5jbGljaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaGFzTm9uRW1wdHlGaWVsZHMoZWxlbWVudCkge1xuICAgICAgICAvLyBDaGVjayBpZiBhbnkgaW5wdXQsIHNlbGVjdCwgb3IgdGV4dGFyZWEgaW5zaWRlIHRoZSBlbGVtZW50IGhhcyBhIHZhbHVlXG4gICAgICAgIHZhciBpbnB1dHMgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0LCBzZWxlY3QsIHRleHRhcmVhJyk7XG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKGlucHV0cykuc29tZShmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIGlmIChpbnB1dCBpbnN0YW5jZW9mIEhUTUxJbnB1dEVsZW1lbnQgfHxcbiAgICAgICAgICAgICAgICBpbnB1dCBpbnN0YW5jZW9mIEhUTUxTZWxlY3RFbGVtZW50IHx8XG4gICAgICAgICAgICAgICAgaW5wdXQgaW5zdGFuY2VvZiBIVE1MVGV4dEFyZWFFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlucHV0LnZhbHVlLnRyaW0oKSAhPT0gJyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBoYW5kbGVOZXdBZGRpdGlvbnNUb0Zvcm1WaWFNdXRhdG9yc0FuZE9ic2VydmVycygpIHtcbiAgICAgICAgdmFyIG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZnVuY3Rpb24gKG11dGF0aW9uc0xpc3QpIHtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgbXV0YXRpb25zTGlzdF8xID0gbXV0YXRpb25zTGlzdDsgX2kgPCBtdXRhdGlvbnNMaXN0XzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIG11dGF0aW9uID0gbXV0YXRpb25zTGlzdF8xW19pXTtcbiAgICAgICAgICAgICAgICBpZiAobXV0YXRpb24udHlwZSA9PT0gJ2NoaWxkTGlzdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFkZGVkTm9kZXMgPSBBcnJheS5mcm9tKG11dGF0aW9uLmFkZGVkTm9kZXMpO1xuICAgICAgICAgICAgICAgICAgICBhZGRlZE5vZGVzLmZvckVhY2goZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZSBhZGRlZCBub2RlIGlzIGFuIEhUTUxFbGVtZW50XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobm9kZSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5xdWVyeVNlbGVjdG9yQWxsKCcuY29sbGFwc2FibGUnKS5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBodG1sRWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBidXR0b25JbmZvID0gZ2V0QnV0dG9uSW5mbyhodG1sRWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlckhpZGVCdXR0b24oaHRtbEVsZW1lbnQsIGJ1dHRvbkluZm8pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuZXdDb2xsYXBzZUJ1dHRvbnMgPSBub2RlLnF1ZXJ5U2VsZWN0b3JBbGwoJy5jb2xsYXBzYWJsZS1oaWRlLWJ1dHRvbicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0NvbGxhcHNlQnV0dG9ucy5mb3JFYWNoKGZ1bmN0aW9uIChidXR0b24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJ1dHRvbkVsZW1lbnQgPSBidXR0b247XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbkVsZW1lbnQuY2xpY2soKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZShkb2N1bWVudC5ib2R5LCB7IGNoaWxkTGlzdDogdHJ1ZSwgc3VidHJlZTogdHJ1ZSB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0QnV0dG9uSW5mbyhjb2xsYXBzYWJsZUl0ZW0pIHtcbiAgICAgICAgdmFyIGFkZEJ1dHRvbiA9IGNvbGxhcHNhYmxlSXRlbS5uZXh0RWxlbWVudFNpYmxpbmc7XG4gICAgICAgIGlmIChhZGRCdXR0b24gJiYgYWRkQnV0dG9uLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2J1dHRvbicpIHtcbiAgICAgICAgICAgIHJldHVybiB7IGRvbTogYWRkQnV0dG9uLCByZWxhdGlvbjogJ3NpYmxpbmcnIH07XG4gICAgICAgIH1cbiAgICAgICAgYWRkQnV0dG9uID0gY29sbGFwc2FibGVJdGVtLnF1ZXJ5U2VsZWN0b3IoJ2J1dHRvbi5hZGRfbW9yZScpO1xuICAgICAgICBpZiAoYWRkQnV0dG9uKSB7XG4gICAgICAgICAgICByZXR1cm4geyBkb206IGFkZEJ1dHRvbiwgcmVsYXRpb246ICdjaGlsZCcgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBkb206IG51bGwsIHJlbGF0aW9uOiAnbm9uZScgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVuZGVySGlkZUJ1dHRvbihjb2xsYXBzYWJsZUl0ZW0sIGJ1dHRvbkluZm8pIHtcbiAgICAgICAgdmFyIGhpZGVCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICAgICAgaGlkZUJ1dHRvbi5jbGFzc05hbWUgPVxuICAgICAgICAgICAgJ2Fic29sdXRlIHRvcC0wIHJpZ2h0LTAgYmctc3ByaW5nLTUwIHRleHQtd2hpdGUgcHgtMiBjb2xsYXBzYWJsZS1oaWRlLWJ1dHRvbic7XG4gICAgICAgIGhpZGVCdXR0b24udGV4dENvbnRlbnQgPSAnSGlkZSc7XG4gICAgICAgIGhpZGVCdXR0b24uc2V0QXR0cmlidXRlKCd0eXBlJywgJ2J1dHRvbicpO1xuICAgICAgICB2YXIgaGFuZGxlSGlkZUJ1dHRvbkNsaWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaGlkZUVsZW1lbnQoaGlkZUJ1dHRvbkhvbGRlcik7XG4gICAgICAgICAgICBoaWRlRWxlbWVudChidXR0b25JbmZvLmRvbSk7XG4gICAgICAgICAgICByZW5kZXJQbGFjZWhvbGRlckNhcmQoY29sbGFwc2FibGVJdGVtLCBidXR0b25JbmZvKTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGhpZGVCdXR0b25Ib2xkZXIgPSBudWxsO1xuICAgICAgICBpZiAoYnV0dG9uSW5mby5kb20gPT09IG51bGwpIHtcbiAgICAgICAgICAgIGhpZGVCdXR0b25Ib2xkZXIgPSBBcnJheS5mcm9tKGNvbGxhcHNhYmxlSXRlbS5jaGlsZHJlbikuZmluZChmdW5jdGlvbiAoY2hpbGQpIHsgcmV0dXJuIGNoaWxkLnRhZ05hbWUgPT09ICdESVYnOyB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChidXR0b25JbmZvLnJlbGF0aW9uID09PSAnY2hpbGQnKSB7XG4gICAgICAgICAgICBoaWRlQnV0dG9uSG9sZGVyID0gYnV0dG9uSW5mby5kb20ucGFyZW50RWxlbWVudDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBwcmV2aW91c1NpYmxpbmdfMSA9IGJ1dHRvbkluZm8uZG9tXG4gICAgICAgICAgICAgICAgLnByZXZpb3VzRWxlbWVudFNpYmxpbmc7XG4gICAgICAgICAgICBoaWRlQnV0dG9uSG9sZGVyID0gQXJyYXkuZnJvbSgocHJldmlvdXNTaWJsaW5nXzEgPT09IG51bGwgfHwgcHJldmlvdXNTaWJsaW5nXzEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHByZXZpb3VzU2libGluZ18xLmNoaWxkcmVuKSB8fCBbXSkuZmluZChmdW5jdGlvbiAoY2hpbGQpIHsgcmV0dXJuIGNoaWxkLnRhZ05hbWUgPT09ICdESVYnOyB9KTtcbiAgICAgICAgICAgIGlmIChoaWRlQnV0dG9uSG9sZGVyKSB7XG4gICAgICAgICAgICAgICAgaGlkZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgQXJyYXkuZnJvbShwcmV2aW91c1NpYmxpbmdfMS5jaGlsZHJlbikuZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZC50YWdOYW1lICE9PSAnTEFCRUwnICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIWNoaWxkLmNsYXNzTGlzdC5jb250YWlucygnY29sbGFwc2FibGUtcGxhY2Vob2xkZXInKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpZGVFbGVtZW50KGNoaWxkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGhpZGVFbGVtZW50KGJ1dHRvbkluZm8uZG9tKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoaGlkZUJ1dHRvbkhvbGRlcikge1xuICAgICAgICAgICAgaGlkZUJ1dHRvbkhvbGRlci5jbGFzc0xpc3QuYWRkKCdyZWxhdGl2ZScpO1xuICAgICAgICAgICAgaGlkZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGhhbmRsZUhpZGVCdXR0b25DbGljayk7XG4gICAgICAgICAgICBoaWRlQnV0dG9uSG9sZGVyLmFwcGVuZENoaWxkKGhpZGVCdXR0b24pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBoaWRlQnV0dG9uO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZW5kZXJQbGFjZWhvbGRlckNhcmQoY29sbGFwc2FibGVJdGVtLCBidXR0b25JbmZvKSB7XG4gICAgICAgIHZhciBwbGFjZWhvbGRlckRpdiA9IGNyZWF0ZVBsYWNlaG9sZGVyRGl2KCk7XG4gICAgICAgIHZhciBkaXNwbGF5TmFtZSA9IGdldERpc3BsYXlOYW1lKGNvbGxhcHNhYmxlSXRlbSwgYnV0dG9uSW5mbyk7XG4gICAgICAgIHBsYWNlaG9sZGVyRGl2LmlubmVySFRNTCA9IFwiWW91IGNhbiBleHBhbmQgdGhlIG9wdGlvbmFsIDxzdHJvbmc+XCIuY29uY2F0KGRpc3BsYXlOYW1lLCBcIjwvc3Ryb25nPiBmaWVsZCBieSBjbGlja2luZyBoZXJlLlwiKTtcbiAgICAgICAgaWYgKGJ1dHRvbkluZm8uZG9tID09PSBudWxsKSB7XG4gICAgICAgICAgICBoYW5kbGVOb0J1dHRvbkluZm8oY29sbGFwc2FibGVJdGVtLCBwbGFjZWhvbGRlckRpdik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYnV0dG9uSW5mby5yZWxhdGlvbiA9PT0gJ2NoaWxkJykge1xuICAgICAgICAgICAgaGFuZGxlQ2hpbGRSZWxhdGlvbihjb2xsYXBzYWJsZUl0ZW0sIHBsYWNlaG9sZGVyRGl2KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGhhbmRsZVNpYmxpbmdSZWxhdGlvbihjb2xsYXBzYWJsZUl0ZW0sIGJ1dHRvbkluZm8sIHBsYWNlaG9sZGVyRGl2KTtcbiAgICAgICAgfVxuICAgICAgICBjb2xsYXBzYWJsZUl0ZW0uYXBwZW5kQ2hpbGQocGxhY2Vob2xkZXJEaXYpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjcmVhdGVQbGFjZWhvbGRlckRpdigpIHtcbiAgICAgICAgdmFyIHBsYWNlaG9sZGVyRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHBsYWNlaG9sZGVyRGl2LmNsYXNzTGlzdC5hZGQoJ2JvcmRlci14JywgJ2JvcmRlci15JywgJ2JvcmRlci1zcHJpbmctNTAnLCAncHgtNicsICdweS02JywgJ3RleHQtc20nLCAndGV4dC1uLTQwJywgJ2N1cnNvci1wb2ludGVyJywgJ2NvbGxhcHNhYmxlLXBsYWNlaG9sZGVyJyk7XG4gICAgICAgIHJldHVybiBwbGFjZWhvbGRlckRpdjtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ2V0RGlzcGxheU5hbWUoY29sbGFwc2FibGVJdGVtLCBidXR0b25JbmZvKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIHZhciBkaXNwbGF5TmFtZUxhYmVsID0gYnV0dG9uSW5mby5kb21cbiAgICAgICAgICAgID8gKF9hID0gYnV0dG9uSW5mby5kb20ucHJldmlvdXNFbGVtZW50U2libGluZykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnF1ZXJ5U2VsZWN0b3IoJ2xhYmVsJylcbiAgICAgICAgICAgIDogY29sbGFwc2FibGVJdGVtLnF1ZXJ5U2VsZWN0b3IoJ2xhYmVsJyk7XG4gICAgICAgIHZhciBkaXNwbGF5TmFtZSA9IChfYiA9IGRpc3BsYXlOYW1lTGFiZWwgPT09IG51bGwgfHwgZGlzcGxheU5hbWVMYWJlbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGlzcGxheU5hbWVMYWJlbC5pbm5lclRleHQpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6ICdlbGVtZW50JztcbiAgICAgICAgcmV0dXJuIGdldEZpcnN0V29yZEZyb21UZXh0KGRpc3BsYXlOYW1lKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaGFuZGxlTm9CdXR0b25JbmZvKGNvbGxhcHNhYmxlSXRlbSwgcGxhY2Vob2xkZXJEaXYpIHtcbiAgICAgICAgYWRqdXN0Qm9yZGVycyhjb2xsYXBzYWJsZUl0ZW0sICdib3JkZXItbCcpO1xuICAgICAgICBhZGp1c3RQYWRkaW5nKGNvbGxhcHNhYmxlSXRlbSwgJ3BiLTExJyk7XG4gICAgICAgIGFkZFBsYWNlaG9sZGVyQ2xpY2tMaXN0ZW5lcihjb2xsYXBzYWJsZUl0ZW0sIHBsYWNlaG9sZGVyRGl2KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaGFuZGxlQ2hpbGRSZWxhdGlvbihjb2xsYXBzYWJsZUl0ZW0sIHBsYWNlaG9sZGVyRGl2KSB7XG4gICAgICAgIGFkanVzdEJvcmRlcnMoY29sbGFwc2FibGVJdGVtLCAnYm9yZGVyLWwnKTtcbiAgICAgICAgYWRqdXN0UGFkZGluZyhjb2xsYXBzYWJsZUl0ZW0sICdwYi0xMScpO1xuICAgICAgICBhZGRQbGFjZWhvbGRlckNsaWNrTGlzdGVuZXIoY29sbGFwc2FibGVJdGVtLCBwbGFjZWhvbGRlckRpdik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGhhbmRsZVNpYmxpbmdSZWxhdGlvbihjb2xsYXBzYWJsZUl0ZW0sIGJ1dHRvbkluZm8sIHBsYWNlaG9sZGVyRGl2KSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcGxhY2Vob2xkZXJEaXYuY2xhc3NMaXN0LmFkZCgnbWItNicpO1xuICAgICAgICAoX2EgPSBidXR0b25JbmZvLmRvbSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNsYXNzTGlzdC5hZGQoJ21iLTYnKTtcbiAgICAgICAgYWRqdXN0Qm9yZGVycyhjb2xsYXBzYWJsZUl0ZW0sICdib3JkZXItbCcpO1xuICAgICAgICBhZGp1c3RQYWRkaW5nKGNvbGxhcHNhYmxlSXRlbSwgJ3BiLTExJyk7XG4gICAgICAgIGFkZFBsYWNlaG9sZGVyQ2xpY2tMaXN0ZW5lcihjb2xsYXBzYWJsZUl0ZW0sIHBsYWNlaG9sZGVyRGl2LCBidXR0b25JbmZvKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYWRqdXN0Qm9yZGVycyhjb2xsYXBzYWJsZUl0ZW0sIGJvcmRlckNsYXNzKSB7XG4gICAgICAgIGlmIChjb2xsYXBzYWJsZUl0ZW0uY2xhc3NMaXN0LmNvbnRhaW5zKGJvcmRlckNsYXNzKSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ2hlcmUnLCBjb2xsYXBzYWJsZUl0ZW0pO1xuICAgICAgICAgICAgY29sbGFwc2FibGVJdGVtLmNsYXNzTGlzdC5hZGQoXCJcIi5jb25jYXQoYm9yZGVyQ2xhc3MsIFwiLXdhcy1oZXJlXCIpKTtcbiAgICAgICAgICAgIGNvbGxhcHNhYmxlSXRlbS5jbGFzc0xpc3QucmVtb3ZlKGJvcmRlckNsYXNzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdtYXJ1JywgY29sbGFwc2FibGVJdGVtKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBhZGp1c3RQYWRkaW5nKGNvbGxhcHNhYmxlSXRlbSwgcGFkZGluZ0NsYXNzKSB7XG4gICAgICAgIGlmIChjb2xsYXBzYWJsZUl0ZW0uY2xhc3NMaXN0LmNvbnRhaW5zKHBhZGRpbmdDbGFzcykpIHtcbiAgICAgICAgICAgIGNvbGxhcHNhYmxlSXRlbS5jbGFzc0xpc3QuYWRkKFwiXCIuY29uY2F0KHBhZGRpbmdDbGFzcywgXCItd2FzLWhlcmVcIikpO1xuICAgICAgICAgICAgY29sbGFwc2FibGVJdGVtLmNsYXNzTGlzdC5yZW1vdmUocGFkZGluZ0NsYXNzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBhZGRQbGFjZWhvbGRlckNsaWNrTGlzdGVuZXIoY29sbGFwc2FibGVJdGVtLCBwbGFjZWhvbGRlckRpdiwgYnV0dG9uSW5mbykge1xuICAgICAgICBwbGFjZWhvbGRlckRpdi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChjb2xsYXBzYWJsZUl0ZW0uY2xhc3NMaXN0LmNvbnRhaW5zKCdib3JkZXItbC13YXMtaGVyZScpKSB7XG4gICAgICAgICAgICAgICAgY29sbGFwc2FibGVJdGVtLmNsYXNzTGlzdC5hZGQoJ2JvcmRlci1sJyk7XG4gICAgICAgICAgICAgICAgY29sbGFwc2FibGVJdGVtLmNsYXNzTGlzdC5yZW1vdmUoJ2JvcmRlci1sLXdhcy1oZXJlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY29sbGFwc2FibGVJdGVtLmNsYXNzTGlzdC5jb250YWlucygncGItMTEtd2FzLWhlcmUnKSkge1xuICAgICAgICAgICAgICAgIGNvbGxhcHNhYmxlSXRlbS5jbGFzc0xpc3QuYWRkKCdwYi0xMScpO1xuICAgICAgICAgICAgICAgIGNvbGxhcHNhYmxlSXRlbS5jbGFzc0xpc3QucmVtb3ZlKCdwYi0xMS13YXMtaGVyZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV2ZWFsSGlkZGVuRWxlbWVudHMoY29sbGFwc2FibGVJdGVtKTtcbiAgICAgICAgICAgIGlmIChidXR0b25JbmZvID09PSBudWxsIHx8IGJ1dHRvbkluZm8gPT09IHZvaWQgMCA/IHZvaWQgMCA6IGJ1dHRvbkluZm8uZG9tKSB7XG4gICAgICAgICAgICAgICAgYnV0dG9uSW5mby5kb20uY2xhc3NMaXN0LnJlbW92ZSgnY29sbGFwc2FibGUtaGlkZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVtb3ZlRWxlbWVudChwbGFjZWhvbGRlckRpdik7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRGaXJzdFdvcmRGcm9tVGV4dCh0ZXh0KSB7XG4gICAgICAgIHZhciB0cmltbWVkVGV4dCA9IHRleHQudHJpbSgpO1xuICAgICAgICB2YXIgd29yZHMgPSB0cmltbWVkVGV4dC5zcGxpdCgvXFxzKy8pO1xuICAgICAgICByZXR1cm4gd29yZHNbMF07XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJldmVhbEhpZGRlbkVsZW1lbnRzKGNvbGxhcHNhYmxlSXRlbSkge1xuICAgICAgICBjb2xsYXBzYWJsZUl0ZW0ucXVlcnlTZWxlY3RvckFsbCgnLmNvbGxhcHNhYmxlLWhpZGUnKS5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2NvbGxhcHNhYmxlLWhpZGUnKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGhpZGVFbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICAoX2EgPSBlbGVtZW50ID09PSBudWxsIHx8IGVsZW1lbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGVsZW1lbnQuY2xhc3NMaXN0KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuYWRkKCdjb2xsYXBzYWJsZS1oaWRlJyk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlbW92ZUVsZW1lbnQoZWxlbWVudCkge1xuICAgICAgICBlbGVtZW50LnJlbW92ZSgpO1xuICAgIH1cbiAgICBoYW5kbGVJbml0aWFsRm9ybUxvYWQoKTtcbiAgICBoYW5kbGVOZXdBZGRpdGlvbnNUb0Zvcm1WaWFNdXRhdG9yc0FuZE9ic2VydmVycygpO1xufSk7XG4iXSwibmFtZXMiOlsiX19pbXBvcnREZWZhdWx0IiwibW9kIiwiX19lc01vZHVsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiRHluYW1pY0ZpZWxkIiwianF1ZXJ5XzEiLCJyZXF1aXJlIiwicHJvdG90eXBlIiwiaGlkZVNob3dGb3JtRmllbGRzIiwiaHVtYW5pdGFyaWFuU2NvcGVIaWRlVm9jYWJ1bGFyeVVyaSIsImNvdW50cnlCdWRnZXRIaWRlQ29kZUZpZWxkIiwiYWlkVHlwZVZvY2FidWxhcnlIaWRlRmllbGQiLCJzZWN0b3JWb2NhYnVsYXJ5SGlkZUZpZWxkIiwicG9saWN5Vm9jYWJ1bGFyeUhpZGVGaWVsZCIsInJlY2lwaWVudFZvY2FidWxhcnlIaWRlRmllbGQiLCJ0YWdWb2NhYnVsYXJ5SGlkZUZpZWxkIiwidHJhbnNhY3Rpb25BaWRUeXBlVm9jYWJ1bGFyeUhpZGVGaWVsZCIsImluZGljYXRvclJlZmVyZW5jZUhpZGVGaWVsZFVyaSIsIl90aGlzIiwiaHVtYW5pdGFyaWFuU2NvcGVWb2NhYnVsYXJ5IiwibGVuZ3RoIiwiZWFjaCIsImluZGV4Iiwic2NvcGUiLCJfYSIsInZhbCIsImhpZGVIdW1hbml0YXJpYW5TY29wZUZpZWxkIiwidG9TdHJpbmciLCJvbiIsImUiLCJwYXJhbXMiLCJkYXRhIiwiaWQiLCJ0YXJnZXQiLCJjbG9zZXN0IiwiZmluZCIsInNob3ciLCJyZW1vdmVBdHRyIiwidHJpZ2dlciIsImhpZGUiLCJhdHRyIiwicmVmZXJlbmNlVm9jYWJ1bGFyeSIsImluZGljYXRvclJlZmVyZW5jZUhpZGVGaWVsZCIsInJlZmVyZW5jZVVyaSIsImNvdW50cnlCdWRnZXRWb2NhYnVsYXJ5IiwiaGlkZUNvdW50cnlCdWRnZXRGaWVsZCIsImNvdW50cnlCdWRnZXRDb2RlSW5wdXQiLCJjb3VudHJ5QnVkZ2V0Q29kZVNlbGVjdCIsImFpZHR5cGVfdm9jYWJ1bGFyeSIsIml0ZW0iLCJoaWRlQWlkVHlwZVNlbGVjdEZpZWxkIiwiaGlkZVRyYW5zYWN0aW9uQWlkVHlwZVNlbGVjdEZpZWxkIiwiZGVmYXVsdF9haWRfdHlwZSIsImVhcm1hcmtpbmdfY2F0ZWdvcnkiLCJlYXJtYXJraW5nX21vZGFsaXR5IiwiY2FzaF9hbmRfdm91Y2hlcl9tb2RhbGl0aWVzIiwiY2FzZTEiLCJjYXNlMiIsImNhc2UzIiwiY2FzZTQiLCJhaWRfdHlwZSIsInBvbGljeW1ha2VyX3ZvY2FidWxhcnkiLCJwb2xpY3lfbWFya2VyIiwiaGlkZVBvbGljeU1ha2VyRmllbGQiLCJjYXNlMV9zaG93IiwiY2FzZTJfc2hvdyIsInNlY3Rvcl92b2NhYnVsYXJ5Iiwic2VjdG9yIiwiaGlkZVNlY3RvckZpZWxkIiwiY2FzZTdfc2hvdyIsImNhc2U4X3Nob3ciLCJjYXNlOThfOTlfc2hvdyIsImRlZmF1bHRfc2hvdyIsImNhc2U3IiwiY2FzZTgiLCJjYXNlOThfOTkiLCJkZWZhdWx0X2hpZGUiLCJyZWdpb25fdm9jYWJ1bGFyeSIsInJlZ2lvbl92b2NhYiIsImhpZGVSZWNpcGllbnRSZWdpb25GaWVsZCIsImNhc2U5OV9zaG93IiwiY2FzZTk5IiwidXBkYXRlQWN0aXZpdHlJZGVudGlmaWVyIiwiYWN0aXZpdHlfaWRlbnRpZmllciIsImNvbmNhdCIsInRhZ192b2NhYnVsYXJ5IiwidGFnIiwiaGlkZVRhZ0ZpZWxkIiwiY2FzZTNfc2hvdyIsImF4aW9zXzEiLCJEeW5hbWljRmllbGRfMSIsImR5bmFtaWNGaWVsZCIsIkZvcm1CdWlsZGVyIiwiYWRkRm9ybSIsImV2IiwicHJldmVudERlZmF1bHQiLCJjb250YWluZXIiLCJjb3VudCIsInBhcnNlSW50IiwicGFyZW50IiwicGFyZW50X2NvdW50IiwicGFyZW50cyIsIndyYXBwZXJfcGFyZW50X2NvdW50IiwicHJvdG8iLCJyZXBsYWNlIiwicHJldiIsImFwcGVuZCIsImNoaWxkcmVuIiwibGFzdCIsInNlbGVjdDIiLCJwbGFjZWhvbGRlciIsImFsbG93Q2xlYXIiLCJ3cmFwQWxsIiwiYWRkUGFyZW50Rm9ybSIsImFkZFdyYXBwZXJPbkFkZCIsImRlbGV0ZUZvcm0iLCJjb2xsZWN0aW9uTGVuZ3RoIiwidGciLCJuZXh0IiwicmVtb3ZlIiwiZGVsZXRlUGFyZW50Rm9ybSIsImFkZFdyYXBwZXIiLCJmb3JtRmllbGQiLCJ0ZXh0QXJlYUhlaWdodCIsImhlaWdodCIsInNjcm9sbEhlaWdodCIsImNzcyIsImFkZFRvQ29sbGVjdGlvbiIsImV2ZW50IiwiaGFzQ2xhc3MiLCJzdG9wUHJvcGFnYXRpb24iLCJkZWxldGVDb2xsZWN0aW9uIiwiZGVsZXRlQ29uZmlybWF0aW9uIiwiY2FuY2VsUG9wdXAiLCJkZWxldGVDb25maXJtIiwiZGVsZXRlSW5kZXgiLCJjaGlsZE9yUGFyZW50IiwiZmFkZUluIiwiZmFkZU91dCIsImZpbGVQYXRoIiwiZG9jdW1lbnQiLCJ1cmwiLCJnZXQiLCJ0aGVuIiwicmVzcG9uc2UiLCJzdWNjZXNzIiwiZm9ybWF0IiwibWltZXR5cGUiLCJtZXNzYWdlIiwiZmlsZVVybCIsImZvcm1CdWlsZGVyIiwidGV4dEFyZWFUYXJnZXQiLCJzZWxlY3Rfc2VhcmNoIiwicXVlcnlTZWxlY3RvciIsImZvY3VzIiwidXBkYXRlUmVnaXN0cmF0aW9uQWdlbmN5IiwiY291bnRyeSIsImVuZHBvaW50IiwiYWpheCIsImN1cnJlbnRfdmFsIiwiZW1wdHkiLCJPcHRpb24iLCJpZGVudGlmaWVyIiwic3ViZWxlbWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJpIiwidGl0bGUiLCJlcnJvckNvbnRhaW5lciIsImNoaWxkQ291bnQiLCJjaGlsZEVsZW1lbnRDb3VudCIsImNsYXNzTGlzdCIsImFkZCIsInJlYWRPbmx5U2VsZWN0cyIsInNlbGVjdCIsInNlbGVjdEVsZW1lbnRQYXJlbnRXcmFwcGVyIiwibmV4dFNpYmxpbmciLCJzZWxlY3RFbGVtZW50UGFyZW50IiwiZmlyc3RDaGlsZCIsInNlbGVjdEVsZW1lbnQiLCJzdHlsZSIsImN1cnNvciIsImhhbmRsZUluaXRpYWxGb3JtTG9hZCIsImFsbENvbGxhcHNhYmxlIiwiZm9yRWFjaCIsImVsZW1lbnQiLCJodG1sRWxlbWVudCIsImJ1dHRvbkluZm8iLCJnZXRCdXR0b25JbmZvIiwiaGlkZUJ1dHRvbiIsInJlbmRlckhpZGVCdXR0b24iLCJoYXNOb25FbXB0eUZpZWxkcyIsImNsaWNrIiwiaW5wdXRzIiwiQXJyYXkiLCJmcm9tIiwic29tZSIsImlucHV0IiwiSFRNTElucHV0RWxlbWVudCIsIkhUTUxTZWxlY3RFbGVtZW50IiwiSFRNTFRleHRBcmVhRWxlbWVudCIsInRyaW0iLCJoYW5kbGVOZXdBZGRpdGlvbnNUb0Zvcm1WaWFNdXRhdG9yc0FuZE9ic2VydmVycyIsIm9ic2VydmVyIiwiTXV0YXRpb25PYnNlcnZlciIsIm11dGF0aW9uc0xpc3QiLCJfaSIsIm11dGF0aW9uc0xpc3RfMSIsIm11dGF0aW9uIiwidHlwZSIsImFkZGVkTm9kZXMiLCJub2RlIiwiSFRNTEVsZW1lbnQiLCJuZXdDb2xsYXBzZUJ1dHRvbnMiLCJidXR0b24iLCJidXR0b25FbGVtZW50Iiwib2JzZXJ2ZSIsImJvZHkiLCJjaGlsZExpc3QiLCJzdWJ0cmVlIiwiY29sbGFwc2FibGVJdGVtIiwiYWRkQnV0dG9uIiwibmV4dEVsZW1lbnRTaWJsaW5nIiwidGFnTmFtZSIsInRvTG93ZXJDYXNlIiwiZG9tIiwicmVsYXRpb24iLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIiwidGV4dENvbnRlbnQiLCJzZXRBdHRyaWJ1dGUiLCJoYW5kbGVIaWRlQnV0dG9uQ2xpY2siLCJoaWRlRWxlbWVudCIsImhpZGVCdXR0b25Ib2xkZXIiLCJyZW5kZXJQbGFjZWhvbGRlckNhcmQiLCJjaGlsZCIsInBhcmVudEVsZW1lbnQiLCJwcmV2aW91c1NpYmxpbmdfMSIsInByZXZpb3VzRWxlbWVudFNpYmxpbmciLCJhZGRFdmVudExpc3RlbmVyIiwiY29udGFpbnMiLCJhcHBlbmRDaGlsZCIsInBsYWNlaG9sZGVyRGl2IiwiY3JlYXRlUGxhY2Vob2xkZXJEaXYiLCJkaXNwbGF5TmFtZSIsImdldERpc3BsYXlOYW1lIiwiaW5uZXJIVE1MIiwiaGFuZGxlTm9CdXR0b25JbmZvIiwiaGFuZGxlQ2hpbGRSZWxhdGlvbiIsImhhbmRsZVNpYmxpbmdSZWxhdGlvbiIsIl9iIiwiZGlzcGxheU5hbWVMYWJlbCIsImlubmVyVGV4dCIsImdldEZpcnN0V29yZEZyb21UZXh0IiwiYWRqdXN0Qm9yZGVycyIsImFkanVzdFBhZGRpbmciLCJhZGRQbGFjZWhvbGRlckNsaWNrTGlzdGVuZXIiLCJib3JkZXJDbGFzcyIsImNvbnNvbGUiLCJsb2ciLCJwYWRkaW5nQ2xhc3MiLCJyZXZlYWxIaWRkZW5FbGVtZW50cyIsInJlbW92ZUVsZW1lbnQiLCJ0ZXh0IiwidHJpbW1lZFRleHQiLCJ3b3JkcyIsInNwbGl0Il0sInNvdXJjZVJvb3QiOiIifQ==