"use strict";
(self["webpackChunk"] = self["webpackChunk"] || []).push([["/js/formbuilder"],{

/***/ "./resources/assets/js/scripts/DynamicField.ts":
/*!*****************************************************!*\
  !*** ./resources/assets/js/scripts/DynamicField.ts ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {



function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.DynamicField = void 0;
var jquery_1 = __importDefault(__webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"));
__webpack_require__(/*! select2 */ "./node_modules/select2/dist/js/select2.js");
var DynamicField = /*#__PURE__*/function () {
  function DynamicField() {
    _classCallCheck(this, DynamicField);
  }
  _createClass(DynamicField, [{
    key: "hideShowFormFields",
    value:
    /**
     * Hide and Show different form fields based on vocabulary and other types
     */
    function hideShowFormFields() {
      this.humanitarianScopeHideVocabularyUri();
      this.countryBudgetHideCodeField();
      this.aidTypeVocabularyHideField();
      this.sectorVocabularyHideField();
      this.policyVocabularyHideField();
      this.recipientVocabularyHideField();
      this.sectorVocabularyHideField();
      this.tagVocabularyHideField();
      this.transactionAidTypeVocabularyHideField();
      this.indicatorReferenceHideFieldUri();
    }
    /**
     * Humanitarian Scope Form Page
     *
     * @Logic hide vocabulary-uri field based on '@vocabulary' field value
     */
  }, {
    key: "humanitarianScopeHideVocabularyUri",
    value: function humanitarianScopeHideVocabularyUri() {
      var _this = this;
      var humanitarianScopeVocabulary = (0, jquery_1["default"])('select[id^="humanitarian_scope"][id*="[vocabulary]"]');
      if (humanitarianScopeVocabulary.length > 0) {
        // hide fields on page load
        jquery_1["default"].each(humanitarianScopeVocabulary, function (index, scope) {
          var _a;
          var val = (_a = (0, jquery_1["default"])(scope).val()) !== null && _a !== void 0 ? _a : '';
          _this.hideHumanitarianScopeField((0, jquery_1["default"])(scope), val.toString());
        });
        // hide/show fields on value change
        humanitarianScopeVocabulary.on('select2:select', function (e) {
          var val = e.params.data.id;
          var index = e.target;
          _this.hideHumanitarianScopeField((0, jquery_1["default"])(index), val);
        });
        // hide/show fields on value clear
        humanitarianScopeVocabulary.on('select2:clear', function (e) {
          var index = e.target;
          _this.hideHumanitarianScopeField((0, jquery_1["default"])(index), '');
        });
      }
    }
    // hide country budget based on vocabulary
  }, {
    key: "hideHumanitarianScopeField",
    value: function hideHumanitarianScopeField(index, value) {
      var humanitarianScopeHideVocabularyUri = 'input[id^="humanitarian_scope"][id*="[vocabulary_uri]"]';
      if (value === '99') {
        index.closest('.form-field-group').find(humanitarianScopeHideVocabularyUri).show().removeAttr('disabled').closest('.form-field').show();
      } else {
        index.closest('.form-field-group').find(humanitarianScopeHideVocabularyUri).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
      }
    }
    /**
     * Humanitarian Scope Form Page
     *
     * @Logic hide vocabulary-uri field based on '@vocabulary' field value
     */
  }, {
    key: "indicatorReferenceHideFieldUri",
    value: function indicatorReferenceHideFieldUri() {
      var _this2 = this;
      var referenceVocabulary = (0, jquery_1["default"])('select[id^="reference"][id*="[vocabulary]"]');
      if (referenceVocabulary.length > 0) {
        // hide fields on page load
        jquery_1["default"].each(referenceVocabulary, function (index, scope) {
          var _a;
          var val = (_a = (0, jquery_1["default"])(scope).val()) !== null && _a !== void 0 ? _a : '';
          _this2.indicatorReferenceHideField((0, jquery_1["default"])(scope), val.toString());
        });
        // hide/show fields on value change
        referenceVocabulary.on('select2:select', function (e) {
          var val = e.params.data.id;
          var index = e.target;
          _this2.indicatorReferenceHideField((0, jquery_1["default"])(index), val);
        });
        // hide/show fields on value clear
        referenceVocabulary.on('select2:clear', function (e) {
          var index = e.target;
          _this2.indicatorReferenceHideField((0, jquery_1["default"])(index), '');
        });
      }
    }
    // hide country budget based on vocabulary
  }, {
    key: "indicatorReferenceHideField",
    value: function indicatorReferenceHideField(index, value) {
      var referenceUri = 'input[id^="reference"][id*="[indicator_uri]"]';
      if (value === '99') {
        index.closest('.form-field-group').find(referenceUri).show().removeAttr('disabled').closest('.form-field').show();
      } else {
        index.closest('.form-field-group').find(referenceUri).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
      }
    }
    /**
     * Country Budget Form Page
     *
     * @Logic show/hide 'code' field based on '@vocabulary' field value
     */
  }, {
    key: "countryBudgetHideCodeField",
    value: function countryBudgetHideCodeField() {
      var _this3 = this;
      var _a;
      var countryBudgetVocabulary = (0, jquery_1["default"])('select#country_budget_vocabulary');
      if (countryBudgetVocabulary.length > 0) {
        // hide/show on page load
        var val = (_a = countryBudgetVocabulary.val()) !== null && _a !== void 0 ? _a : '1';
        this.hideCountryBudgetField(val.toString());
        // hide/show on value change
        countryBudgetVocabulary.on('select2:select', function (e) {
          var val = e.params.data.id;
          _this3.hideCountryBudgetField(val);
        });
        //hide/show based on value cleared
        countryBudgetVocabulary.on('select2:clear', function () {
          _this3.hideCountryBudgetField('');
        });
      }
    }
    /**
     * Hide Country Budget Fields
     */
  }, {
    key: "hideCountryBudgetField",
    value: function hideCountryBudgetField(value) {
      var countryBudgetCodeInput = 'input[id^="budget_item"][id*="[code_text]"]',
        countryBudgetCodeSelect = 'select[id^="budget_item"][id*="[code]"]';
      if (value === '1') {
        (0, jquery_1["default"])(countryBudgetCodeSelect).val('').trigger('change').attr('disabled', 'disabled').closest('.form-field').hide();
        (0, jquery_1["default"])(countryBudgetCodeInput).removeAttr('disabled').closest('.form-field').show();
      } else {
        (0, jquery_1["default"])(countryBudgetCodeSelect).removeAttr('disabled').closest('.form-field').show();
        (0, jquery_1["default"])(countryBudgetCodeInput).val('').trigger('change').closest('.form-field').hide();
      }
    }
    /**
     * AidType Form Page
     *
     * @Logic hide vocabulary-uri and codes field based on '@vocabulary' field value
     */
  }, {
    key: "aidTypeVocabularyHideField",
    value: function aidTypeVocabularyHideField() {
      var _this4 = this;
      var aidtype_vocabulary = (0, jquery_1["default"])('select[id*="default_aid_type_vocabulary"]');
      if (aidtype_vocabulary.length > 0) {
        jquery_1["default"].each(aidtype_vocabulary, function (index, item) {
          var _a;
          var data = (_a = (0, jquery_1["default"])(item).val()) !== null && _a !== void 0 ? _a : '1';
          _this4.hideAidTypeSelectField((0, jquery_1["default"])(item), data.toString());
        });
        aidtype_vocabulary.on('select2:select', function (e) {
          var data = e.params.data.id;
          var target = e.target;
          _this4.hideAidTypeSelectField((0, jquery_1["default"])(target), data);
        });
        aidtype_vocabulary.on('select2:clear', function (e) {
          var target = e.target;
          _this4.hideAidTypeSelectField((0, jquery_1["default"])(target), '');
        });
      }
    }
    /**
     * AidType Form Page
     *
     * @Logic hide vocabulary-uri and codes field based on '@vocabulary' field value
     */
  }, {
    key: "transactionAidTypeVocabularyHideField",
    value: function transactionAidTypeVocabularyHideField() {
      var _this5 = this;
      var aidtype_vocabulary = (0, jquery_1["default"])('select[id*="aid_type_vocabulary"]');
      if (aidtype_vocabulary.length > 0) {
        jquery_1["default"].each(aidtype_vocabulary, function (index, item) {
          var _a;
          var data = (_a = (0, jquery_1["default"])(item).val()) !== null && _a !== void 0 ? _a : '1';
          _this5.hideTransactionAidTypeSelectField((0, jquery_1["default"])(item), data.toString());
        });
        aidtype_vocabulary.on('select2:select', function (e) {
          var data = e.params.data.id;
          var target = e.target;
          _this5.hideTransactionAidTypeSelectField((0, jquery_1["default"])(target), data);
        });
        aidtype_vocabulary.on('select2:clear', function (e) {
          var target = e.target;
          _this5.hideTransactionAidTypeSelectField((0, jquery_1["default"])(target), '');
        });
      }
    }
    /**
     * Hide Aid Type Select Fields
     */
  }, {
    key: "hideAidTypeSelectField",
    value: function hideAidTypeSelectField(index, value) {
      var default_aid_type = 'select[id*="[default_aid_type]"]',
        earmarking_category = 'select[id*="[earmarking_category]"]',
        earmarking_modality = 'select[id*="[earmarking_modality]"]',
        cash_and_voucher_modalities = 'select[id*="[cash_and_voucher_modalities]"]',
        case1 = 'select[id*="[earmarking_category]"],select[id*="[earmarking_modality]"],select[id*="[cash_and_voucher_modalities]"]',
        case2 = 'select[id*="[default_aid_type]"],select[id*="[earmarking_modality]"],select[id*="[cash_and_voucher_modalities]"]',
        case3 = 'select[id*="[default_aid_type]"],select[id*="[earmarking_category]"],select[id*="[cash_and_voucher_modalities]"]',
        case4 = 'select[id*="[default_aid_type]"],select[id*="[earmarking_category]"],select[id*="[earmarking_modality]"]';
      switch (value) {
        case '2':
          index.closest('.form-field-group').find(earmarking_category).show().removeAttr('disabled').closest('.form-field').show();
          index.closest('.form-field-group').find(case2).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
          break;
        case '3':
          index.closest('.form-field-group').find(earmarking_modality).show().removeAttr('disabled').closest('.form-field').show();
          index.closest('.form-field-group').find(case3).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
          break;
        case '4':
          index.closest('.form-field-group').find(cash_and_voucher_modalities).show().removeAttr('disabled').closest('.form-field').show();
          index.closest('.form-field-group').find(case4).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
          break;
        default:
          index.closest('.form-field-group').find(default_aid_type).show().removeAttr('disabled').closest('.form-field').show();
          index.closest('.form-field-group').find(case1).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
      }
    }
    /**
     * Hide Transaction Aid Type Select Fields
     */
  }, {
    key: "hideTransactionAidTypeSelectField",
    value: function hideTransactionAidTypeSelectField(index, value) {
      var aid_type = 'select[id*="[aid_type_code]"]',
        earmarking_category = 'select[id*="[earmarking_category]"]',
        earmarking_modality = 'select[id*="[earmarking_modality]"]',
        cash_and_voucher_modalities = 'select[id*="[cash_and_voucher_modalities]"]',
        case1 = 'select[id*="[earmarking_category]"],select[id*="[earmarking_modality]"],select[id*="[cash_and_voucher_modalities]"]',
        case2 = 'select[id*="[aid_type_code]"],select[id*="[earmarking_modality]"],select[id*="[cash_and_voucher_modalities]"]',
        case3 = 'select[id*="[aid_type_code]"],select[id*="[earmarking_category]"],select[id*="[cash_and_voucher_modalities]"]',
        case4 = 'select[id*="[aid_type_code]"],select[id*="[earmarking_category]"],select[id*="[earmarking_modality]"]';
      switch (value) {
        case '2':
          index.closest('.form-field-group').find(earmarking_category).show().removeAttr('disabled').closest('.form-field').show();
          index.closest('.form-field-group').find(case2).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
          break;
        case '3':
          index.closest('.form-field-group').find(earmarking_modality).show().removeAttr('disabled').closest('.form-field').show();
          index.closest('.form-field-group').find(case3).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
          break;
        case '4':
          index.closest('.form-field-group').find(cash_and_voucher_modalities).show().removeAttr('disabled').closest('.form-field').show();
          index.closest('.form-field-group').find(case4).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
          break;
        default:
          index.closest('.form-field-group').find(aid_type).show().removeAttr('disabled').closest('.form-field').show();
          index.closest('.form-field-group').find(case1).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
      }
    }
    /**
     * Policy Marker Form Page
     *
     * @Logic hide vocabulary-uri and codes field based on '@vocabulary' field value
     */
  }, {
    key: "policyVocabularyHideField",
    value: function policyVocabularyHideField() {
      var _this6 = this;
      var policymaker_vocabulary = (0, jquery_1["default"])('select[id*="policy_marker_vocabulary"]');
      if (policymaker_vocabulary.length > 0) {
        jquery_1["default"].each(policymaker_vocabulary, function (index, policy_marker) {
          var _a;
          var data = (_a = (0, jquery_1["default"])(policy_marker).val()) !== null && _a !== void 0 ? _a : '1';
          _this6.hidePolicyMakerField((0, jquery_1["default"])(policy_marker), data.toString());
        });
        policymaker_vocabulary.on('select2:select', function (e) {
          var data = e.params.data.id;
          var target = e.target;
          _this6.hidePolicyMakerField((0, jquery_1["default"])(target), data);
        });
        policymaker_vocabulary.on('select2:clear', function (e) {
          var target = e.target;
          _this6.hidePolicyMakerField((0, jquery_1["default"])(target), '99');
        });
      }
    }
    /**
     * Hides Policy Marker Form Fields
     */
  }, {
    key: "hidePolicyMakerField",
    value: function hidePolicyMakerField(index, value) {
      var case1_show = 'select[id*="[policy_marker]"]',
        case2_show = 'input[id*="[policy_marker_text]"],input[id*="[vocabulary_uri]"]',
        case1 = 'input[id*="[policy_marker_text]"],input[id*="[vocabulary_uri]"]',
        case2 = 'select[id*="[policy_marker]"]';
      switch (value) {
        case '1':
          index.closest('.form-field-group').find(case1_show).show().removeAttr('disabled').closest('.form-field').show();
          index.closest('.form-field-group').find(case1).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
          break;
        case '99':
        default:
          index.closest('.form-field-group').find(case2_show).show().removeAttr('disabled').closest('.form-field').show();
          index.closest('.form-field-group').find(case2).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
      }
    }
    /**
     * Sector Form Page
     *
     * @Logic hide vocabulary-uri and codes field based on '@vocabulary' field value
     */
  }, {
    key: "sectorVocabularyHideField",
    value: function sectorVocabularyHideField() {
      var _this7 = this;
      var sector_vocabulary = (0, jquery_1["default"])('select[id*="sector_vocabulary"]');
      if (sector_vocabulary.length > 0) {
        jquery_1["default"].each(sector_vocabulary, function (index, sector) {
          var _a;
          var data = (_a = (0, jquery_1["default"])(sector).val()) !== null && _a !== void 0 ? _a : '1';
          _this7.hideSectorField((0, jquery_1["default"])(sector), data.toString());
        });
        sector_vocabulary.on('select2:select', function (e) {
          var data = e.params.data.id;
          var target = e.target;
          _this7.hideSectorField((0, jquery_1["default"])(target), data);
        });
        sector_vocabulary.on('select2:clear', function (e) {
          var target = e.target;
          _this7.hideSectorField((0, jquery_1["default"])(target), '');
        });
      }
    }
    /**
     * Hide Sector Form fields
     */
  }, {
    key: "hideSectorField",
    value: function hideSectorField(index, value) {
      var case1_show = 'select[id*="[code]"]',
        case2_show = 'select[id*="[category_code]"]',
        case7_show = 'select[id*="[sdg_goal]"]',
        case8_show = 'select[id*="[sdg_target]"]',
        case98_99_show = 'input[id*="[text]"],input[id*="[vocabulary_uri]"]',
        default_show = 'input[id*="[text]"]',
        case1 = 'select[id*="[category_code]"],select[id*="[sdg_goal]"],select[id*="[sdg_target]"],input[id*="[vocabulary_uri]"],input[id*="[text]"]',
        case2 = 'input[id*="[vocabulary_uri]"],select[id*="[sdg_goal]"],select[id*="[sdg_target]"],select[id*="[code]"],input[id*="[text]"]',
        case7 = 'input[id*="[vocabulary_uri]"],select[id*="[category_code]"],select[id*="[sdg_target]"],select[id*="[code]"],input[id*="[text]"]',
        case8 = 'input[id*="[vocabulary_uri]"],select[id*="[category_code]"],select[id*="[sdg_goal]"],select[id*="[code]"],input[id*="[text]"]',
        case98_99 = 'select[id*="[category_code]"],select[id*="[sdg_goal]"],select[id*="[sdg_target]"],select[id*="[code]"]',
        default_hide = 'select[id*="[category_code]"],select[id*="[sdg_goal]"],select[id*="[sdg_target]"],select[id*="[code]"],input[id*="[vocabulary_uri]"]';
      switch (value) {
        case '1':
          index.closest('.form-field-group').find(case1_show).show().removeAttr('disabled').closest('.form-field').show();
          index.closest('.form-field-group').find(case1).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
          break;
        case '2':
          index.closest('.form-field-group').find(case2_show).show().removeAttr('disabled').closest('.form-field').show();
          index.closest('.form-field-group').find(case2).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
          break;
        case '7':
          index.closest('.form-field-group').find(case7_show).show().removeAttr('disabled').closest('.form-field').show();
          index.closest('.form-field-group').find(case7).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
          break;
        case '8':
          index.closest('.form-field-group').find(case8_show).show().removeAttr('disabled').closest('.form-field').show();
          index.closest('.form-field-group').find(case8).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
          break;
        case '98':
          index.closest('.form-field-group').find(case98_99_show).show().removeAttr('disabled').closest('.form-field').show();
          index.closest('.form-field-group').find(case98_99).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
          break;
        case '99':
          index.closest('.form-field-group').find(case98_99_show).show().removeAttr('disabled').closest('.form-field').show();
          index.closest('.form-field-group').find(case98_99).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
          break;
        default:
          index.closest('.form-field-group').find(default_show).show().removeAttr('disabled').closest('.form-field').show();
          index.closest('.form-field-group').find(default_hide).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
      }
    }
    /**
     *  Recipient Vocabulary Form Page
     *
     * @Logic hide vocabulary-uri and codes field based on '@vocabulary' field value
     */
  }, {
    key: "recipientVocabularyHideField",
    value: function recipientVocabularyHideField() {
      var _this8 = this;
      var region_vocabulary = (0, jquery_1["default"])('select[id*="region_vocabulary"]');
      if (region_vocabulary.length > 0) {
        jquery_1["default"].each(region_vocabulary, function (index, region_vocab) {
          var _a;
          var data = (_a = (0, jquery_1["default"])(region_vocab).val()) !== null && _a !== void 0 ? _a : '1';
          _this8.hideRecipientRegionField((0, jquery_1["default"])(region_vocab), data.toString());
        });
        region_vocabulary.on('select2:select', function (e) {
          var data = e.params.data.id;
          var target = e.target;
          _this8.hideRecipientRegionField((0, jquery_1["default"])(target), data);
        });
        region_vocabulary.on('select2:clear', function (e) {
          var target = e.target;
          _this8.hideRecipientRegionField((0, jquery_1["default"])(target), '');
        });
      }
    }
    /**
     * Hides Recipient Region Form Fields
     */
  }, {
    key: "hideRecipientRegionField",
    value: function hideRecipientRegionField(index, value) {
      var case1_show = 'select[id*="[region_code]"]',
        case2_show = 'input[id*="[custom_code]"], input[id*="[code]"]',
        case99_show = 'input[id*="[custom_code]"],input[id*="[vocabulary_uri]"], input[id*="[code]"]',
        case1 = 'input[id*="[custom_code]"],input[id*="[vocabulary_uri]"],input[id*="[code]"]',
        case2 = 'select[id*="[region_code]"],input[id*="[vocabulary_uri]"]',
        case99 = 'select[id*="[region_code]"]';
      switch (value) {
        case '1':
          index.closest('.form-field-group').find(case1_show).show().removeAttr('disabled').closest('.form-field').show();
          index.closest('.form-field-group').find(case1).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
          break;
        case '2':
          index.closest('.form-field-group').find(case2_show).show().removeAttr('disabled').closest('.form-field').show();
          index.closest('.form-field-group').find(case2).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
          break;
        case '99':
          index.closest('.form-field-group').find(case99_show).show().removeAttr('disabled').closest('.form-field').show();
          index.closest('.form-field-group').find(case99).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
          break;
        default:
          index.closest('.form-field-group').find(case2_show).show().removeAttr('disabled').closest('.form-field').show();
          index.closest('.form-field-group').find(case2).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
      }
    }
    /**
     * Updates Activity identifier
     */
  }, {
    key: "updateActivityIdentifier",
    value: function updateActivityIdentifier() {
      var activity_identifier = (0, jquery_1["default"])('#activity_identifier');
      if (activity_identifier.length > 0) {
        activity_identifier.on('keyup', function () {
          (0, jquery_1["default"])('#iati_identifier_text').val((0, jquery_1["default"])('.identifier').attr('activity_identifier') + "-".concat((0, jquery_1["default"])(this).val()));
        });
      }
    }
    /**
     * Tag Form Page
     *
     * @Logic hide vocabulary-uri and codes field based on '@vocabulary' field value
     */
  }, {
    key: "tagVocabularyHideField",
    value: function tagVocabularyHideField() {
      var _this9 = this;
      var tag_vocabulary = (0, jquery_1["default"])('select[id*="tag_vocabulary"]');
      if (tag_vocabulary.length > 0) {
        jquery_1["default"].each(tag_vocabulary, function (index, tag) {
          var _a;
          var data = (_a = (0, jquery_1["default"])(tag).val()) !== null && _a !== void 0 ? _a : '1';
          _this9.hideTagField((0, jquery_1["default"])(tag), data.toString());
        });
        tag_vocabulary.on('select2:select', function (e) {
          var data = e.params.data.id;
          var target = e.target;
          _this9.hideTagField((0, jquery_1["default"])(target), data);
        });
        tag_vocabulary.on('select2:clear', function (e) {
          var target = e.target;
          _this9.hideTagField((0, jquery_1["default"])(target), '');
        });
      }
    }
    /**
     * Hide Tag Form fields
     */
  }, {
    key: "hideTagField",
    value: function hideTagField(index, value) {
      var case1_show = 'input[id*="[tag_text]"]',
        case2_show = 'select[id*="[goals_tag_code]"]',
        case3_show = 'select[id*="[targets_tag_code]"]',
        case99_show = 'input[id*="[tag_text]"], input[id*="[vocabulary_uri]"]',
        case1 = 'select[id*="[goals_tag_code]"],select[id*="[targets_tag_code]"],input[id*="[vocabulary_uri]"]',
        case2 = 'input[id*="[vocabulary_uri]"],select[id*="[targets_tag_code]"],select[id*="[targets_tag_code]"],input[id*="[tag_text]"]',
        case3 = 'input[id*="[vocabulary_uri]"],select[id*="[goals_tag_code]"],input[id*="[tag_text]"]',
        case99 = 'select[id*="[goals_tag_code]"],select[id*="[targets_tag_code]"]';
      switch (value) {
        case '1':
          index.closest('.form-field-group').find(case1_show).show().removeAttr('disabled').closest('.form-field').show();
          index.closest('.form-field-group').find(case1).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
          break;
        case '2':
          index.closest('.form-field-group').find(case2_show).show().removeAttr('disabled').closest('.form-field').show();
          index.closest('.form-field-group').find(case2).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
          break;
        case '3':
          index.closest('.form-field-group').find(case3_show).show().removeAttr('disabled').closest('.form-field').show();
          index.closest('.form-field-group').find(case3).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
          break;
        case '99':
          index.closest('.form-field-group').find(case99_show).show().removeAttr('disabled').closest('.form-field').show();
          index.closest('.form-field-group').find(case99).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
          break;
        default:
          index.closest('.form-field-group').find(case1_show).show().removeAttr('disabled').closest('.form-field').show();
          index.closest('.form-field-group').find(case1).val('').trigger('change').hide().attr('disabled', 'disabled').closest('.form-field').hide();
      }
    }
  }]);
  return DynamicField;
}();
exports.DynamicField = DynamicField;

/***/ }),

/***/ "./resources/assets/js/scripts/formbuilder.ts":
/*!****************************************************!*\
  !*** ./resources/assets/js/scripts/formbuilder.ts ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {



function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", ({
  value: true
}));
var axios_1 = __importDefault(__webpack_require__(/*! axios */ "./node_modules/axios/dist/browser/axios.cjs"));
var jquery_1 = __importDefault(__webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"));
__webpack_require__(/*! select2 */ "./node_modules/select2/dist/js/select2.js");
var DynamicField_1 = __webpack_require__(/*! ./DynamicField */ "./resources/assets/js/scripts/DynamicField.ts");
var dynamicField = new DynamicField_1.DynamicField();
var FormBuilder = /*#__PURE__*/function () {
  function FormBuilder() {
    _classCallCheck(this, FormBuilder);
  }
  _createClass(FormBuilder, [{
    key: "addForm",
    value:
    // adds new collection of sub-element
    function addForm(ev) {
      ev.preventDefault();
      var target = ev.target;
      var container = (0, jquery_1["default"])(target).attr('form_type') ? (0, jquery_1["default"])(".collection-container[form_type ='".concat((0, jquery_1["default"])(target).attr('form_type'), "']")) : (0, jquery_1["default"])('.collection-container');
      var count = (0, jquery_1["default"])(target).attr('child_count') ? parseInt((0, jquery_1["default"])(target).attr('child_count')) + 1 : (0, jquery_1["default"])(target).parent().find('.form-child-body').length;
      var parent_count = (0, jquery_1["default"])(target).attr('parent_count') ? parseInt((0, jquery_1["default"])(target).attr('parent_count')) : (0, jquery_1["default"])(target).parents('.multi-form').index() - 1;
      var wrapper_parent_count = (0, jquery_1["default"])(target).attr('wrapped_parent_count') ? parseInt((0, jquery_1["default"])(target).attr('wrapped_parent_count')) : (0, jquery_1["default"])(target).parents('.wrapped-child-body').index() - 1;
      var proto = container.data('prototype').replace(/__PARENT_NAME__/g, parent_count);
      if ((0, jquery_1["default"])(target).attr('has_child_collection')) {
        proto = proto.replace(/__WRAPPER_NAME__/g, count);
        proto = proto.replace(/__NAME__/g, 0);
      } else {
        proto = proto.replace(/__NAME__/g, count);
        proto = proto.replace(/__WRAPPER_NAME__/g, wrapper_parent_count);
      }
      (0, jquery_1["default"])(target).prev().append((0, jquery_1["default"])(proto));
      if ((0, jquery_1["default"])(target).attr('has_child_collection')) {
        (0, jquery_1["default"])(target).prev('.subelement').children('.wrapped-child-body').last().find('.add_to_collection').attr('wrapped_parent_count', count);
        (0, jquery_1["default"])(target).prev('.subelement').children('.wrapped-child-body').last().find('.add_to_collection').attr('parent_count', parent_count);
      }
      (0, jquery_1["default"])(target).prev().find('.wrapped-child-body').last().find('.add_to_collection').attr('wrapper_parent_count', wrapper_parent_count !== null && wrapper_parent_count !== void 0 ? wrapper_parent_count : 0);
      if ((0, jquery_1["default"])(target).attr('form_type')) {
        (0, jquery_1["default"])(target).prev().last().find('.select2').select2({
          placeholder: 'Select an option',
          allowClear: true
        });
        (0, jquery_1["default"])(this).find('.sub-attribute').wrapAll((0, jquery_1["default"])('<div class="form-field-group flex flex-wrap sub-attribute-wrapper"></div>'));
        (0, jquery_1["default"])(target).prev('.subelement').children('.wrapped-child-body').last().find('.sub-attribute').wrapAll((0, jquery_1["default"])('<div class="form-field-group flex flex-wrap sub-attribute-wrapper mt-6"></div>'));
      } else {
        (0, jquery_1["default"])(target).parent().find('.form-child-body').last().find('.select2').select2({
          placeholder: 'Select an option',
          allowClear: true
        });
      }
      (0, jquery_1["default"])(target).attr('child_count', count);
      dynamicField.aidTypeVocabularyHideField();
      dynamicField.sectorVocabularyHideField();
    }
    // adds parent collection
  }, {
    key: "addParentForm",
    value: function addParentForm(ev) {
      ev.preventDefault();
      var target = ev.target;
      var container = (0, jquery_1["default"])(target).attr('form_type') ? (0, jquery_1["default"])(".parent-collection[form_type ='".concat((0, jquery_1["default"])(target).attr('form_type'), "']")) : (0, jquery_1["default"])('.parent-collection');
      var count = (0, jquery_1["default"])(target).attr('parent_count') ? parseInt((0, jquery_1["default"])(target).attr('parent_count')) + 1 : ((0, jquery_1["default"])(target).prev().find('.multi-form').length ? (0, jquery_1["default"])(target).prev().find('.multi-form').length : (0, jquery_1["default"])(target).prev().find('.wrapped-child-body').length) + 1;
      var proto = container.data('prototype').replace(/__PARENT_NAME__/g, count);
      proto = proto.replace(/__NAME__/g, 0);
      (0, jquery_1["default"])(target).prev().append((0, jquery_1["default"])(proto));
      (0, jquery_1["default"])(target).prev().find('.multi-form').last().find('.select2').select2({
        placeholder: 'Select an option',
        allowClear: true
      });
      (0, jquery_1["default"])(target).prev().find('.multi-form').last().find('.add_to_collection').attr('parent_count', count);
      this.addWrapperOnAdd(target);
      (0, jquery_1["default"])(target).attr('parent_count', count);
      dynamicField.humanitarianScopeHideVocabularyUri();
      dynamicField.countryBudgetHideCodeField();
      dynamicField.sectorVocabularyHideField();
      dynamicField.recipientVocabularyHideField();
      dynamicField.policyVocabularyHideField();
      dynamicField.tagVocabularyHideField();
      dynamicField.transactionAidTypeVocabularyHideField();
      dynamicField.indicatorReferenceHideFieldUri();
    }
    // deletes collection
  }, {
    key: "deleteForm",
    value: function deleteForm(ev) {
      ev.preventDefault();
      var target = ev.target;
      var collectionLength = (0, jquery_1["default"])('.multi-form').length ? (0, jquery_1["default"])(target).closest('.subelement').find('.form-child-body').length : (0, jquery_1["default"])('.form-child-body').length;
      var count = (0, jquery_1["default"])('.add_to_collection').attr('child_count') ? parseInt((0, jquery_1["default"])('.add_to_collection').attr('child_count')) + 1 : collectionLength;
      (0, jquery_1["default"])('.add_to_collection').attr('child_count', count);
      if (collectionLength > 1) {
        var tg = (0, jquery_1["default"])(target).closest('.form-child-body');
        tg.next('.error').remove();
        tg.remove();
      }
    }
    // deletes parent collection
  }, {
    key: "deleteParentForm",
    value: function deleteParentForm(ev) {
      ev.preventDefault();
      var target = ev.target;
      var collectionLength = (0, jquery_1["default"])('.subelement').length;
      var count = (0, jquery_1["default"])('.add_to_parent').attr('child_count') ? parseInt((0, jquery_1["default"])('.add_to_parent').attr('child_count')) + 1 : collectionLength;
      (0, jquery_1["default"])('.add_to_parent').attr('child_count', count);
      (0, jquery_1["default"])('.add_to_parent').attr('parent_count', count);
      if (collectionLength > 2) {
        (0, jquery_1["default"])(target).parent().remove();
      }
    }
    //add wrapper div around the attributes
  }, {
    key: "addWrapper",
    value: function addWrapper() {
      (0, jquery_1["default"])('.multi-form').each(function () {
        (0, jquery_1["default"])(this).find('.attribute').wrapAll((0, jquery_1["default"])('<div class="form-field-group flex flex-wrap attribute-wrapper mb-4"></div>'));
      });
      (0, jquery_1["default"])('.subelement').find('.wrapped-child-body').each(function () {
        (0, jquery_1["default"])(this).find('.sub-attribute').wrapAll((0, jquery_1["default"])('<div class="form-field-group flex flex-wrap sub-attribute-wrapper mb-4"></div>'));
      });
      var formField = (0, jquery_1["default"])('form>.form-field');
      if (formField.length > 0) {
        formField.wrapAll('<div class="form-field-group-outer grid xl:grid-cols-2 mb-6 -mx-3 gap-y-6"></div>');
      }
    }
  }, {
    key: "addWrapperOnAdd",
    value: function addWrapperOnAdd(target) {
      (0, jquery_1["default"])(target).prev().find('.multi-form').last().find('.attribute').wrapAll((0, jquery_1["default"])('<div class="form-field-group grid xl:grid-cols-2 attribute-wrapper mb-4"></div>'));
      (0, jquery_1["default"])(target).prev().find('.multi-form').last().find('.subelement').find('.wrapped-child-body').each(function () {
        (0, jquery_1["default"])(this).find('.sub-attribute').wrapAll((0, jquery_1["default"])('<div class="form-field-group flex flex-wrap sub-attribute-wrapper mb-4"></div>'));
      });
    }
  }, {
    key: "textAreaHeight",
    value: function textAreaHeight(ev) {
      var target = ev.target;
      var height = target.scrollHeight;
      (0, jquery_1["default"])(target).css('height', height);
    }
  }, {
    key: "addToCollection",
    value: function addToCollection() {
      var _this = this;
      (0, jquery_1["default"])('body').on('click', '.add_to_collection', function (event) {
        if ((0, jquery_1["default"])(event.target).hasClass('add-icon')) {
          event.stopPropagation();
          (0, jquery_1["default"])(event.target).parent('button').trigger('click');
        } else {
          _this.addForm(event);
          _this.handleDeleteParentButtons();
        }
      });
      (0, jquery_1["default"])('.add_to_parent').on('click', function (event) {
        if ((0, jquery_1["default"])(event.target).hasClass('add-icon')) {
          event.stopPropagation();
          (0, jquery_1["default"])(event.target).parent('button').trigger('click');
        } else {
          _this.addParentForm(event);
          _this.handleDeleteParentButtons();
        }
      });
    }
  }, {
    key: "deleteCollection",
    value: function deleteCollection() {
      var _this2 = this;
      var deleteConfirmation = (0, jquery_1["default"])('.delete-confirmation'),
        cancelPopup = '.cancel-popup',
        deleteConfirm = '.delete-confirm';
      var deleteIndex = {},
        childOrParent = '';
      (0, jquery_1["default"])('body').on('click', '.delete', function (event) {
        deleteConfirmation.fadeIn();
        deleteIndex = event;
        childOrParent = 'child';
      });
      (0, jquery_1["default"])('body').on('click', cancelPopup, function () {
        deleteConfirmation.fadeOut();
        deleteIndex = {};
        childOrParent = '';
      });
      (0, jquery_1["default"])('body').on('click', deleteConfirm, function () {
        if (childOrParent === 'child') {
          _this2.deleteForm(deleteIndex);
        } else if (childOrParent === 'parent') {
          _this2.deleteParentForm(deleteIndex);
        }
        deleteConfirmation.fadeOut();
        deleteIndex = {};
        childOrParent = '';
      });
      (0, jquery_1["default"])('body').on('mouseenter', '.delete-parent', function (event) {
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        //@ts-ignore
        var deleteButton = (0, jquery_1["default"])(event.target);
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        //@ts-ignore
        var multiForm = deleteButton.closest('.multi-form, .wrapped-child-body');
        multiForm.css({
          background: '#FFF8F7',
          outline: '2px solid #F19BA0'
        });
      });
      (0, jquery_1["default"])('body').on('mouseleave', '.delete-parent', function (event) {
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        //@ts-ignore
        var deleteButton = (0, jquery_1["default"])(event.target);
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        //@ts-ignore
        var multiForm = deleteButton.closest('.multi-form, .wrapped-child-body');
        multiForm.css({
          background: '',
          outline: ''
        });
      });
      (0, jquery_1["default"])('body').on('click', '.delete-parent', function (event) {
        deleteConfirmation.fadeIn();
        deleteIndex = event;
        childOrParent = 'parent';
      });
      (0, jquery_1["default"])('.select2').select2({
        placeholder: 'Select an option',
        allowClear: true
      });
      // update format on change of document link
      (0, jquery_1["default"])('body').on('change', 'input[id*="[url]"]', function () {
        var _this3 = this;
        var _a;
        var filePath = ((_a = (0, jquery_1["default"])(this).val()) !== null && _a !== void 0 ? _a : '').toString();
        var document = (0, jquery_1["default"])(this).closest('.form-field-group').find('input[id*="[document]"]').val();
        var url = "/mimetype?url=".concat(filePath, "&type=url");
        (0, jquery_1["default"])(this).closest('.form-field').find('.text-danger').remove();
        if (filePath !== '') {
          axios_1["default"].get(url).then(function (response) {
            if (response.data.success) {
              var format = response.data.data.mimetype;
              (0, jquery_1["default"])(_this3).closest('.form-field-group').find('select[id*="[format]"]').val(format).trigger('change');
            } else {
              (0, jquery_1["default"])(_this3).closest('.form-field').find('.text-danger').remove();
              (0, jquery_1["default"])(_this3).closest('.form-field').append("<div class='text-danger error'>" + response.data.message + '</div>');
              (0, jquery_1["default"])(_this3).closest('.form-field-group').find('select[id*="[format]"]').val('').trigger('change');
            }
            (0, jquery_1["default"])(_this3).closest('.form-field-group').find('input[id*="[document]"]').val('').trigger('change');
          });
        } else if (!document || document === '') {
          (0, jquery_1["default"])(this).closest('.form-field-group').find('select[id*="[format]"]').val('').trigger('change');
        }
      });
      (0, jquery_1["default"])('body').on('change', 'input[id*="[document]"]', function () {
        var _this4 = this;
        var _a;
        var filePath = ((_a = (0, jquery_1["default"])(this).val()) !== null && _a !== void 0 ? _a : '').toString();
        var url = "/mimetype?url=".concat(filePath, "&&type=document");
        var fileUrl = (0, jquery_1["default"])(this).closest('.form-field-group').find('input[id*="[url]"]').val();
        (0, jquery_1["default"])(this).closest('.form-field').find('.text-danger').remove();
        if (filePath !== '') {
          axios_1["default"].get(url).then(function (response) {
            if (response.data.success) {
              var format = response.data.data.mimetype;
              (0, jquery_1["default"])(_this4).closest('.form-field-group').find('select[id*="[format]"]').val(format).trigger('change');
            } else {
              (0, jquery_1["default"])(_this4).closest('.form-field-group').find('select[id*="[format]"]').val('').trigger('change');
            }
          });
          (0, jquery_1["default"])(this).closest('.form-field-group').find('input[id*="[url]"]').val('').trigger('change');
        } else if (!fileUrl || fileUrl === '') {
          (0, jquery_1["default"])(this).closest('.form-field-group').find('select[id*="[format]"]').val('').trigger('change');
        }
      });
    }
  }, {
    key: "handleDeleteParentButtons",
    value: function handleDeleteParentButtons() {
      var deleteButtons = document.querySelectorAll('.delete-parent-selector');
      var changeDeleteButtonInnerHtml = function changeDeleteButtonInnerHtml(button) {
        var initialText = escapeHtml(button.textContent);
        button.innerHTML = "\n         <svg class=\"text-[1rem] mb-0.5\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n           <path d=\"M6.66667 12C6.84348 12 7.01305 11.9298 7.13807 11.8047C7.2631 11.6797 7.33333 11.5101 7.33333 11.3333V7.33334C7.33333 7.15653 7.2631 6.98696 7.13807 6.86193C7.01305 6.73691 6.84348 6.66667 6.66667 6.66667C6.48986 6.66667 6.32029 6.73691 6.19526 6.86193C6.07024 6.98696 6 7.15653 6 7.33334V11.3333C6 11.5101 6.07024 11.6797 6.19526 11.8047C6.32029 11.9298 6.48986 12 6.66667 12ZM13.3333 4H10.6667V3.33334C10.6667 2.8029 10.456 2.2942 10.0809 1.91912C9.70581 1.54405 9.1971 1.33334 8.66667 1.33334H7.33333C6.8029 1.33334 6.29419 1.54405 5.91912 1.91912C5.54405 2.2942 5.33333 2.8029 5.33333 3.33334V4H2.66667C2.48986 4 2.32029 4.07024 2.19526 4.19526C2.07024 4.32029 2 4.48986 2 4.66667C2 4.84348 2.07024 5.01305 2.19526 5.13807C2.32029 5.2631 2.48986 5.33334 2.66667 5.33334H3.33333V12.6667C3.33333 13.1971 3.54405 13.7058 3.91912 14.0809C4.29419 14.456 4.8029 14.6667 5.33333 14.6667H10.6667C11.1971 14.6667 11.7058 14.456 12.0809 14.0809C12.456 13.7058 12.6667 13.1971 12.6667 12.6667V5.33334H13.3333C13.5101 5.33334 13.6797 5.2631 13.8047 5.13807C13.9298 5.01305 14 4.84348 14 4.66667C14 4.48986 13.9298 4.32029 13.8047 4.19526C13.6797 4.07024 13.5101 4 13.3333 4ZM6.66667 3.33334C6.66667 3.15652 6.7369 2.98696 6.86193 2.86193C6.98695 2.73691 7.15652 2.66667 7.33333 2.66667H8.66667C8.84348 2.66667 9.01305 2.73691 9.13807 2.86193C9.2631 2.98696 9.33333 3.15652 9.33333 3.33334V4H6.66667V3.33334ZM11.3333 12.6667C11.3333 12.8435 11.2631 13.0131 11.1381 13.1381C11.013 13.2631 10.8435 13.3333 10.6667 13.3333H5.33333C5.15652 13.3333 4.98695 13.2631 4.86193 13.1381C4.7369 13.0131 4.66667 12.8435 4.66667 12.6667V5.33334H11.3333V12.6667ZM9.33333 12C9.51014 12 9.67971 11.9298 9.80474 11.8047C9.92976 11.6797 10 11.5101 10 11.3333V7.33334C10 7.15653 9.92976 6.98696 9.80474 6.86193C9.67971 6.73691 9.51014 6.66667 9.33333 6.66667C9.15652 6.66667 8.98695 6.73691 8.86193 6.86193C8.73691 6.98696 8.66667 7.15653 8.66667 7.33334V11.3333C8.66667 11.5101 8.73691 11.6797 8.86193 11.8047C8.98695 11.9298 9.15652 12 9.33333 12Z\" fill=\"#E34D5B\"/>\n         </svg>\n         ".concat(initialText, "\n      ");
      };
      deleteButtons.forEach(function (button) {
        changeDeleteButtonInnerHtml(button);
      });
    }
  }]);
  return FormBuilder;
}();
(0, jquery_1["default"])(function () {
  var formBuilder = new FormBuilder();
  formBuilder.addWrapper();
  dynamicField.hideShowFormFields();
  dynamicField.updateActivityIdentifier();
  formBuilder.addToCollection();
  formBuilder.deleteCollection();
  /**
   * Text area height on typing
   */
  var textAreaTarget = (0, jquery_1["default"])('textarea.form__input');
  if (textAreaTarget.length > 0) {
    (0, jquery_1["default"])('body').on('input', 'textarea.form__input', function (event) {
      formBuilder.textAreaHeight(event);
    });
  }
  (0, jquery_1["default"])('body').on('select2:open', '.select2', function () {
    var select_search = document.querySelector('.select2-search__field');
    if (select_search) {
      select_search.focus();
    }
  });
  /**
   * checks registration agency, country and registration number to deduce identifier
   */
  updateRegistrationAgency((0, jquery_1["default"])('#organization_country'));
  (0, jquery_1["default"])('#organisation_identifier').attr('disabled', 'disabled');
  function updateRegistrationAgency(country) {
    var endpoint = country.val() ? '/organisation/agency/' + country.val() : '/organisation/agency/';
    jquery_1["default"].ajax({
      url: endpoint
    }).then(function (response) {
      var _a;
      var current_val = (_a = (0, jquery_1["default"])('#organization_registration_agency').val()) !== null && _a !== void 0 ? _a : '';
      var val = false;
      (0, jquery_1["default"])('#organization_registration_agency').empty();
      for (var data in response.data) {
        if (data === current_val) {
          val = true;
        }
        (0, jquery_1["default"])('#organization_registration_agency').append(new Option(response.data[data], data, true, true)).val('').trigger('change');
      }
      (0, jquery_1["default"])('#organization_registration_agency').val(val ? current_val : '').trigger('change');
    });
  }
  (0, jquery_1["default"])('body').on('select2:select', '#organization_country', function () {
    updateRegistrationAgency((0, jquery_1["default"])(this));
  });
  (0, jquery_1["default"])('body').on('select2:clear', '#organization_country', function () {
    updateRegistrationAgency((0, jquery_1["default"])(this));
  });
  (0, jquery_1["default"])('body').on('select2:select', '#organization_registration_agency', function () {
    var identifier = (0, jquery_1["default"])(this).val() + '-' + (0, jquery_1["default"])('#registration_number').val();
    (0, jquery_1["default"])('#organisation_identifier').val(identifier);
  });
  (0, jquery_1["default"])('body').on('select2:clear', '#organization_registration_agency', function () {
    var identifier = '-' + (0, jquery_1["default"])('#registration_number').val();
    (0, jquery_1["default"])('#organisation_identifier').val(identifier);
  });
  (0, jquery_1["default"])('body').on('keyup', '#registration_number', function () {
    var identifier = (0, jquery_1["default"])('#organization_registration_agency').val() + '-' + (0, jquery_1["default"])(this).val();
    (0, jquery_1["default"])('#organisation_identifier').val(identifier);
  });
  // add class to title of collection when validation error occurs on collection level
  var subelement = document.querySelectorAll('.subelement');
  for (var i = 0; i < subelement.length; i++) {
    var title = subelement[i].querySelector('.control-label');
    var errorContainer = subelement[i].querySelector('.collection_error');
    var childCount = errorContainer === null || errorContainer === void 0 ? void 0 : errorContainer.childElementCount;
    if (childCount && childCount > 0) {
      title === null || title === void 0 ? void 0 : title.classList.add('error-title');
    }
  }
  // Adding cursor not allowed to <select> where elementJsonSchema read_only : true
  var readOnlySelects = document.querySelectorAll('select.cursor-not-allowed');
  for (var _i = 0; _i < readOnlySelects.length; _i++) {
    var select = readOnlySelects[_i];
    var selectElementParentWrapper = select.nextSibling;
    var selectElementParent = selectElementParentWrapper === null || selectElementParentWrapper === void 0 ? void 0 : selectElementParentWrapper.firstChild;
    var selectElement = selectElementParent === null || selectElementParent === void 0 ? void 0 : selectElementParent.firstChild;
    if (selectElement) {
      selectElement.style.cursor = 'not-allowed';
    }
  }
  var deleteButtons = document.querySelectorAll('.delete-parent-selector');
  function changeDeleteButtonInnerHtml(button) {
    var initialText = escapeHtml(button.textContent);
    button.innerHTML = "\n      <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M6.66667 12C6.84348 12 7.01305 11.9298 7.13807 11.8047C7.2631 11.6797 7.33333 11.5101 7.33333 11.3333V7.33334C7.33333 7.15653 7.2631 6.98696 7.13807 6.86193C7.01305 6.73691 6.84348 6.66667 6.66667 6.66667C6.48986 6.66667 6.32029 6.73691 6.19526 6.86193C6.07024 6.98696 6 7.15653 6 7.33334V11.3333C6 11.5101 6.07024 11.6797 6.19526 11.8047C6.32029 11.9298 6.48986 12 6.66667 12ZM13.3333 4H10.6667V3.33334C10.6667 2.8029 10.456 2.2942 10.0809 1.91912C9.70581 1.54405 9.1971 1.33334 8.66667 1.33334H7.33333C6.8029 1.33334 6.29419 1.54405 5.91912 1.91912C5.54405 2.2942 5.33333 2.8029 5.33333 3.33334V4H2.66667C2.48986 4 2.32029 4.07024 2.19526 4.19526C2.07024 4.32029 2 4.48986 2 4.66667C2 4.84348 2.07024 5.01305 2.19526 5.13807C2.32029 5.2631 2.48986 5.33334 2.66667 5.33334H3.33333V12.6667C3.33333 13.1971 3.54405 13.7058 3.91912 14.0809C4.29419 14.456 4.8029 14.6667 5.33333 14.6667H10.6667C11.1971 14.6667 11.7058 14.456 12.0809 14.0809C12.456 13.7058 12.6667 13.1971 12.6667 12.6667V5.33334H13.3333C13.5101 5.33334 13.6797 5.2631 13.8047 5.13807C13.9298 5.01305 14 4.84348 14 4.66667C14 4.48986 13.9298 4.32029 13.8047 4.19526C13.6797 4.07024 13.5101 4 13.3333 4ZM6.66667 3.33334C6.66667 3.15652 6.7369 2.98696 6.86193 2.86193C6.98695 2.73691 7.15652 2.66667 7.33333 2.66667H8.66667C8.84348 2.66667 9.01305 2.73691 9.13807 2.86193C9.2631 2.98696 9.33333 3.15652 9.33333 3.33334V4H6.66667V3.33334ZM11.3333 12.6667C11.3333 12.8435 11.2631 13.0131 11.1381 13.1381C11.013 13.2631 10.8435 13.3333 10.6667 13.3333H5.33333C5.15652 13.3333 4.98695 13.2631 4.86193 13.1381C4.7369 13.0131 4.66667 12.8435 4.66667 12.6667V5.33334H11.3333V12.6667ZM9.33333 12C9.51014 12 9.67971 11.9298 9.80474 11.8047C9.92976 11.6797 10 11.5101 10 11.3333V7.33334C10 7.15653 9.92976 6.98696 9.80474 6.86193C9.67971 6.73691 9.51014 6.66667 9.33333 6.66667C9.15652 6.66667 8.98695 6.73691 8.86193 6.86193C8.73691 6.98696 8.66667 7.15653 8.66667 7.33334V11.3333C8.66667 11.5101 8.73691 11.6797 8.86193 11.8047C8.98695 11.9298 9.15652 12 9.33333 12Z\" fill=\"#E34D5B\"/>\n      </svg>\n      ".concat(initialText);
  }
  deleteButtons.forEach(function (button) {
    return changeDeleteButtonInnerHtml(button);
  });
  var observer = new MutationObserver(function (mutationsList) {
    mutationsList.forEach(function (mutation) {
      if (mutation.addedNodes.length > 0) {
        mutation.addedNodes.forEach(function (node) {
          if (node instanceof Element) {
            if (node.matches('.delete-item-selector')) {
              changeDeleteButtonInnerHtml(node);
            } else {
              var newDeleteButtons = node.querySelectorAll('.delete-item-selector');
              newDeleteButtons.forEach(function (button) {
                return changeDeleteButtonInnerHtml(button);
              });
            }
          }
        });
      }
    });
  });
  observer.observe(document.body, {
    childList: true,
    subtree: true
  });
  /**
   * This function does two main things:
   *
   * 1. Adds a click event listener to the button to control the collapsible flow:
   *    - It finds the closest <label> element related to the button.
   *    - Within that <label>, it looks for an element with the class 'optional-text'. If it finds 'optional-text', it toggles how that text is displayed (either with brackets or an icon).
   *    - It also locates the nearest parent element with the classes 'subelement rounded-t-sm'. If that parent subelement exists, it toggles its state to either collapse or expand the form section.
   *    - Finally, it rotates the collapse button each time it’s clicked.
   *
   * 2. It triggers the button click event if the subelement is optional using the flag: thisButtonBelongsToOptionalForm.
   *    This ensures optional forms start off collapsed by default when rendered.
   *
   * @param button - The button element that manages the collapsible form section.
   */
  function attachCollapsableButtonEvents(button) {
    var label = getClosestLabelDom(button);
    var optionalLabel = label ? getOptionalTextDom(label) : null;
    var subelement = label ? getClosestParentSubelementDom(label) : null;
    var thisButtonBelongsToOptionalForm = optionalLabel !== null;
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
    console.log(subelement);
>>>>>>> 637d900e (-[x] WIP FE)
=======
    /* eslint-disable */
    (_console = console).log.apply(_console, _toConsumableArray(oo_oo("736882328_640_4_640_27_4", subelement)));
>>>>>>> 9c57c9b9 (-[x] Added Placeholders For Register Page)
=======
    console.log(subelement);
>>>>>>> 3401ee77 (-[x] Translation Structure Changed)
    button.addEventListener('click', function () {
      if (optionalLabel) {
        toggleOptionalText(optionalLabel);
      }
      if (subelement) {
        toggleAccordionItems(subelement);
      }
      button.classList.toggle('rotate-180');
    });
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
    console.log(thisButtonBelongsToOptionalForm, !errorMessageExists(subelement));
>>>>>>> 637d900e (-[x] WIP FE)
=======
    /* eslint-disable */
    (_console2 = console).log.apply(_console2, _toConsumableArray(oo_oo("736882328_654_4_657_5_4", thisButtonBelongsToOptionalForm, !errorMessageExists(subelement))));
>>>>>>> 9c57c9b9 (-[x] Added Placeholders For Register Page)
=======
    console.log(thisButtonBelongsToOptionalForm, !errorMessageExists(subelement));
>>>>>>> 3401ee77 (-[x] Translation Structure Changed)
    if (thisButtonBelongsToOptionalForm && !errorMessageExists(subelement)) {
      button.click();
    }
  }
  /**
   * Check if any error message exists in the subelement.
   *
   * @param subelement
   */
  function errorMessageExists(subelement) {
    var errorDivs = subelement.querySelectorAll('.error');
    var errorTexts = subelement.querySelectorAll('.text-danger-error');
    var _iterator = _createForOfIteratorHelper(errorDivs),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var div = _step.value;
        if (div.textContent.trim() !== '') {
          return true;
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    var _iterator2 = _createForOfIteratorHelper(errorTexts),
      _step2;
    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var _div = _step2.value;
        if (_div.textContent.trim() !== '') {
          return true;
        }
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
    return false;
  }
  /**
   * Returns closest <label> element.
   *
   * @param button
   */
  function getClosestLabelDom(button) {
    return button.closest('label');
  }
  /**
   * Returns closest element with class 'optional-text'.
   *
   * @param label
   */
  function getOptionalTextDom(label) {
    return label.querySelector('.optional-text');
  }
  /**
   * Returns the first Nth parent that has class 'subelement'.
   *
   * @param label
   */
  function getClosestParentSubelementDom(label) {
    return label.closest('.subelement.rounded-t-sm');
  }
  /**
   * Toggles what is rendered on optional text. (dot or bracket)
   *
   * @param optionalLabel
   */
  function toggleOptionalText(optionalLabel) {
    var optionalLabelWithSvg = '<svg viewBox="0 0 16 18" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M6 9a1.87 1.87 0 1 0 3.74 0A1.87 1.87 0 0 0 6 9Z" fill="#68797E"></path></svg><span>Optional</span>';
    var optionalLabelWithBrackets = '<span>( Optional )</span>';
    var svgExists = optionalLabel.querySelector('svg') !== null;
    if (svgExists) {
      optionalLabel.innerHTML = optionalLabelWithBrackets;
    } else {
      optionalLabel.innerHTML = optionalLabelWithSvg;
    }
  }
  /**
   * Toggles collapsed state. (expand or collapsed)
   *
   * Key considerations:
   * 1. The "Add Additional" button can be either inside or outside the subelement.
   * 2. When the button is outside, it will always be the immediate sibling to the subelement.
   * 3. The collapse mechanism is handled by adjusting the max height to give the illusion of sliding up.
   * 4. If the button is outside the subelement, the slide-up effect will not affect the button.
   *    Therefore, we toggle the 'display-none' class to control its visibility.
   *
   * @param subelement
   */
  function toggleAccordionItems(subelement) {
    function isAddAdditionalButtonOutside(subelement) {
      var nextSibling = subelement.nextElementSibling;
      if (nextSibling && nextSibling.tagName === 'BUTTON') {
        return nextSibling.classList.contains('add_more') && nextSibling.classList.contains('button');
      }
      return false;
    }
    var hideableSubelements = _toConsumableArray(subelement.children).filter(function (child) {
      return child.tagName !== 'LABEL';
    });
    var outsideButton = null;
    var hasAddAdditionalButtonOutside = isAddAdditionalButtonOutside(subelement);
    if (hasAddAdditionalButtonOutside) {
      outsideButton = subelement.nextElementSibling;
      if (outsideButton) {
        outsideButton.classList.toggle('display-none');
      }
    }
    hideableSubelements.forEach(function (child) {
      if (hasAddAdditionalButtonOutside && outsideButton) {
        subelement.classList.toggle('mb-6');
      }
      if (child.classList.contains('height-hide')) {
        child.classList.remove('height-hide');
        child.classList.add('height-show');
      } else {
        child.classList.remove('height-show');
        child.classList.add('height-hide');
      }
    });
  }
  /**
   * This function handles the forms rendered on initial page load.
   */
  function attachInitialCollapsableButtonEvents() {
    var allCollapsableButtons = document.querySelectorAll('.collapsable-button');
    allCollapsableButtons.forEach(function (button) {
      return attachCollapsableButtonEvents(button);
    });
  }
  /**
   * This function handles the forms rendered on clicking 'ADD ADDITIONAL X' button.
   */
  function observeNewCollapsableButtons() {
    var observer = new MutationObserver(function (mutationsList) {
      mutationsList.forEach(function (mutation) {
        if (mutation.type === 'childList') {
          mutation.addedNodes.forEach(function (node) {
            if (node instanceof HTMLElement) {
              var newCollapsableButtons = node.querySelectorAll('.collapsable-button');
              newCollapsableButtons.forEach(function (button) {
                return attachCollapsableButtonEvents(button);
              });
            }
          });
        }
      });
    });
    observer.observe(document.body, {
      childList: true,
      subtree: true
    });
  }
  attachInitialCollapsableButtonEvents();
  observeNewCollapsableButtons();
});
function escapeHtml(unsafe) {
  return unsafe.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#039;');
}

/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ __webpack_require__.O(0, ["/js/vendor"], () => (__webpack_exec__("./resources/assets/js/scripts/formbuilder.ts")));
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ }
]);
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
=======
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
>>>>>>> 637d900e (-[x] WIP FE)
=======
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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USxDQUFDO0FBQUU7QUFDeEI7QUFDQUcsS0FBSyxDQUFDLENBQUM7QUFDUCxTQUFTSSxLQUFLQSxDQUFDOVQsQ0FBQyxFQUFRO0VBQUEsU0FBQStULEtBQUEsR0FBQVQsU0FBQSxDQUFBclQsTUFBQSxFQUFIc1QsQ0FBQyxPQUFBck0sS0FBQSxDQUFBNk0sS0FBQSxPQUFBQSxLQUFBLFdBQUFDLEtBQUEsTUFBQUEsS0FBQSxHQUFBRCxLQUFBLEVBQUFDLEtBQUE7SUFBRFQsQ0FBQyxDQUFBUyxLQUFBLFFBQUFWLFNBQUEsQ0FBQVUsS0FBQTtFQUFBO0VBQUksSUFBSTtJQUMxQmIsS0FBSyxDQUFDLENBQUMsQ0FBQ2MsWUFBWSxDQUFDalUsQ0FBQyxFQUFFdVQsQ0FBQyxDQUFDO0VBQzlCLENBQUMsQ0FDRCxPQUFPOVEsQ0FBQyxFQUFFLENBQUU7RUFBRSxPQUFPOFEsQ0FBQztBQUFFO0FBQ3hCO0FBQ0FPLEtBQUssQ0FBQyxDQUFDO0FBQ1AsU0FBU0ksS0FBS0EsQ0FBQ1gsQ0FBQyxFQUFFO0VBQUUsSUFBSTtJQUNwQkosS0FBSyxDQUFDLENBQUMsQ0FBQ2dCLFdBQVcsQ0FBQ1osQ0FBQyxDQUFDO0VBQzFCLENBQUMsQ0FDRCxPQUFPOVEsQ0FBQyxFQUFFLENBQUU7RUFBRSxPQUFPOFEsQ0FBQztBQUFFO0FBQ3hCO0FBQ0FXLEtBQUssQ0FBQyxDQUFDO0FBQ1AsU0FBU0UsS0FBS0EsQ0FBQ2IsQ0FBQyxFQUFFdlQsQ0FBQyxFQUFFO0VBQUUsSUFBSTtJQUN2Qm1ULEtBQUssQ0FBQyxDQUFDLENBQUNrQixjQUFjLENBQUNkLENBQUMsRUFBRXZULENBQUMsQ0FBQztFQUNoQyxDQUFDLENBQ0QsT0FBT3lDLENBQUMsRUFBRSxDQUFFO0VBQUUsT0FBTzhRLENBQUM7QUFBRTtBQUN4QjtBQUNBYSxLQUFLLENBQUMsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3Jlc291cmNlcy9hc3NldHMvanMvc2NyaXB0cy9EeW5hbWljRmllbGQudHMiLCJ3ZWJwYWNrOi8vLy4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9zY3JpcHRzL2Zvcm1idWlsZGVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5EeW5hbWljRmllbGQgPSB2b2lkIDA7XG5jb25zdCBqcXVlcnlfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwianF1ZXJ5XCIpKTtcbnJlcXVpcmUoXCJzZWxlY3QyXCIpO1xuY2xhc3MgRHluYW1pY0ZpZWxkIHtcbiAgICAvKipcbiAgICAgKiBIaWRlIGFuZCBTaG93IGRpZmZlcmVudCBmb3JtIGZpZWxkcyBiYXNlZCBvbiB2b2NhYnVsYXJ5IGFuZCBvdGhlciB0eXBlc1xuICAgICAqL1xuICAgIGhpZGVTaG93Rm9ybUZpZWxkcygpIHtcbiAgICAgICAgdGhpcy5odW1hbml0YXJpYW5TY29wZUhpZGVWb2NhYnVsYXJ5VXJpKCk7XG4gICAgICAgIHRoaXMuY291bnRyeUJ1ZGdldEhpZGVDb2RlRmllbGQoKTtcbiAgICAgICAgdGhpcy5haWRUeXBlVm9jYWJ1bGFyeUhpZGVGaWVsZCgpO1xuICAgICAgICB0aGlzLnNlY3RvclZvY2FidWxhcnlIaWRlRmllbGQoKTtcbiAgICAgICAgdGhpcy5wb2xpY3lWb2NhYnVsYXJ5SGlkZUZpZWxkKCk7XG4gICAgICAgIHRoaXMucmVjaXBpZW50Vm9jYWJ1bGFyeUhpZGVGaWVsZCgpO1xuICAgICAgICB0aGlzLnNlY3RvclZvY2FidWxhcnlIaWRlRmllbGQoKTtcbiAgICAgICAgdGhpcy50YWdWb2NhYnVsYXJ5SGlkZUZpZWxkKCk7XG4gICAgICAgIHRoaXMudHJhbnNhY3Rpb25BaWRUeXBlVm9jYWJ1bGFyeUhpZGVGaWVsZCgpO1xuICAgICAgICB0aGlzLmluZGljYXRvclJlZmVyZW5jZUhpZGVGaWVsZFVyaSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBIdW1hbml0YXJpYW4gU2NvcGUgRm9ybSBQYWdlXG4gICAgICpcbiAgICAgKiBATG9naWMgaGlkZSB2b2NhYnVsYXJ5LXVyaSBmaWVsZCBiYXNlZCBvbiAnQHZvY2FidWxhcnknIGZpZWxkIHZhbHVlXG4gICAgICovXG4gICAgaHVtYW5pdGFyaWFuU2NvcGVIaWRlVm9jYWJ1bGFyeVVyaSgpIHtcbiAgICAgICAgY29uc3QgaHVtYW5pdGFyaWFuU2NvcGVWb2NhYnVsYXJ5ID0gKDAsIGpxdWVyeV8xLmRlZmF1bHQpKCdzZWxlY3RbaWRePVwiaHVtYW5pdGFyaWFuX3Njb3BlXCJdW2lkKj1cIlt2b2NhYnVsYXJ5XVwiXScpO1xuICAgICAgICBpZiAoaHVtYW5pdGFyaWFuU2NvcGVWb2NhYnVsYXJ5Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIC8vIGhpZGUgZmllbGRzIG9uIHBhZ2UgbG9hZFxuICAgICAgICAgICAganF1ZXJ5XzEuZGVmYXVsdC5lYWNoKGh1bWFuaXRhcmlhblNjb3BlVm9jYWJ1bGFyeSwgKGluZGV4LCBzY29wZSkgPT4ge1xuICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWwgPSAoX2EgPSAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoc2NvcGUpLnZhbCgpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAnJztcbiAgICAgICAgICAgICAgICB0aGlzLmhpZGVIdW1hbml0YXJpYW5TY29wZUZpZWxkKCgwLCBqcXVlcnlfMS5kZWZhdWx0KShzY29wZSksIHZhbC50b1N0cmluZygpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gaGlkZS9zaG93IGZpZWxkcyBvbiB2YWx1ZSBjaGFuZ2VcbiAgICAgICAgICAgIGh1bWFuaXRhcmlhblNjb3BlVm9jYWJ1bGFyeS5vbignc2VsZWN0MjpzZWxlY3QnLCAoZSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHZhbCA9IGUucGFyYW1zLmRhdGEuaWQ7XG4gICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSBlLnRhcmdldDtcbiAgICAgICAgICAgICAgICB0aGlzLmhpZGVIdW1hbml0YXJpYW5TY29wZUZpZWxkKCgwLCBqcXVlcnlfMS5kZWZhdWx0KShpbmRleCksIHZhbCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIGhpZGUvc2hvdyBmaWVsZHMgb24gdmFsdWUgY2xlYXJcbiAgICAgICAgICAgIGh1bWFuaXRhcmlhblNjb3BlVm9jYWJ1bGFyeS5vbignc2VsZWN0MjpjbGVhcicsIChlKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSBlLnRhcmdldDtcbiAgICAgICAgICAgICAgICB0aGlzLmhpZGVIdW1hbml0YXJpYW5TY29wZUZpZWxkKCgwLCBqcXVlcnlfMS5kZWZhdWx0KShpbmRleCksICcnKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIGhpZGUgY291bnRyeSBidWRnZXQgYmFzZWQgb24gdm9jYWJ1bGFyeVxuICAgIGhpZGVIdW1hbml0YXJpYW5TY29wZUZpZWxkKGluZGV4LCB2YWx1ZSkge1xuICAgICAgICBjb25zdCBodW1hbml0YXJpYW5TY29wZUhpZGVWb2NhYnVsYXJ5VXJpID0gJ2lucHV0W2lkXj1cImh1bWFuaXRhcmlhbl9zY29wZVwiXVtpZCo9XCJbdm9jYWJ1bGFyeV91cmldXCJdJztcbiAgICAgICAgaWYgKHZhbHVlID09PSAnOTknKSB7XG4gICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZC1ncm91cCcpXG4gICAgICAgICAgICAgICAgLmZpbmQoaHVtYW5pdGFyaWFuU2NvcGVIaWRlVm9jYWJ1bGFyeVVyaSlcbiAgICAgICAgICAgICAgICAuc2hvdygpXG4gICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2Rpc2FibGVkJylcbiAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQnKVxuICAgICAgICAgICAgICAgIC5zaG93KCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZC1ncm91cCcpXG4gICAgICAgICAgICAgICAgLmZpbmQoaHVtYW5pdGFyaWFuU2NvcGVIaWRlVm9jYWJ1bGFyeVVyaSlcbiAgICAgICAgICAgICAgICAudmFsKCcnKVxuICAgICAgICAgICAgICAgIC50cmlnZ2VyKCdjaGFuZ2UnKVxuICAgICAgICAgICAgICAgIC5oaWRlKClcbiAgICAgICAgICAgICAgICAuYXR0cignZGlzYWJsZWQnLCAnZGlzYWJsZWQnKVxuICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgLmhpZGUoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBIdW1hbml0YXJpYW4gU2NvcGUgRm9ybSBQYWdlXG4gICAgICpcbiAgICAgKiBATG9naWMgaGlkZSB2b2NhYnVsYXJ5LXVyaSBmaWVsZCBiYXNlZCBvbiAnQHZvY2FidWxhcnknIGZpZWxkIHZhbHVlXG4gICAgICovXG4gICAgaW5kaWNhdG9yUmVmZXJlbmNlSGlkZUZpZWxkVXJpKCkge1xuICAgICAgICBjb25zdCByZWZlcmVuY2VWb2NhYnVsYXJ5ID0gKDAsIGpxdWVyeV8xLmRlZmF1bHQpKCdzZWxlY3RbaWRePVwicmVmZXJlbmNlXCJdW2lkKj1cIlt2b2NhYnVsYXJ5XVwiXScpO1xuICAgICAgICBpZiAocmVmZXJlbmNlVm9jYWJ1bGFyeS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAvLyBoaWRlIGZpZWxkcyBvbiBwYWdlIGxvYWRcbiAgICAgICAgICAgIGpxdWVyeV8xLmRlZmF1bHQuZWFjaChyZWZlcmVuY2VWb2NhYnVsYXJ5LCAoaW5kZXgsIHNjb3BlKSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgIGNvbnN0IHZhbCA9IChfYSA9ICgwLCBqcXVlcnlfMS5kZWZhdWx0KShzY29wZSkudmFsKCkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICcnO1xuICAgICAgICAgICAgICAgIHRoaXMuaW5kaWNhdG9yUmVmZXJlbmNlSGlkZUZpZWxkKCgwLCBqcXVlcnlfMS5kZWZhdWx0KShzY29wZSksIHZhbC50b1N0cmluZygpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gaGlkZS9zaG93IGZpZWxkcyBvbiB2YWx1ZSBjaGFuZ2VcbiAgICAgICAgICAgIHJlZmVyZW5jZVZvY2FidWxhcnkub24oJ3NlbGVjdDI6c2VsZWN0JywgKGUpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWwgPSBlLnBhcmFtcy5kYXRhLmlkO1xuICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gZS50YXJnZXQ7XG4gICAgICAgICAgICAgICAgdGhpcy5pbmRpY2F0b3JSZWZlcmVuY2VIaWRlRmllbGQoKDAsIGpxdWVyeV8xLmRlZmF1bHQpKGluZGV4KSwgdmFsKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gaGlkZS9zaG93IGZpZWxkcyBvbiB2YWx1ZSBjbGVhclxuICAgICAgICAgICAgcmVmZXJlbmNlVm9jYWJ1bGFyeS5vbignc2VsZWN0MjpjbGVhcicsIChlKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSBlLnRhcmdldDtcbiAgICAgICAgICAgICAgICB0aGlzLmluZGljYXRvclJlZmVyZW5jZUhpZGVGaWVsZCgoMCwganF1ZXJ5XzEuZGVmYXVsdCkoaW5kZXgpLCAnJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBoaWRlIGNvdW50cnkgYnVkZ2V0IGJhc2VkIG9uIHZvY2FidWxhcnlcbiAgICBpbmRpY2F0b3JSZWZlcmVuY2VIaWRlRmllbGQoaW5kZXgsIHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IHJlZmVyZW5jZVVyaSA9ICdpbnB1dFtpZF49XCJyZWZlcmVuY2VcIl1baWQqPVwiW2luZGljYXRvcl91cmldXCJdJztcbiAgICAgICAgaWYgKHZhbHVlID09PSAnOTknKSB7XG4gICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZC1ncm91cCcpXG4gICAgICAgICAgICAgICAgLmZpbmQocmVmZXJlbmNlVXJpKVxuICAgICAgICAgICAgICAgIC5zaG93KClcbiAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignZGlzYWJsZWQnKVxuICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgLnNob3coKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAuZmluZChyZWZlcmVuY2VVcmkpXG4gICAgICAgICAgICAgICAgLnZhbCgnJylcbiAgICAgICAgICAgICAgICAudHJpZ2dlcignY2hhbmdlJylcbiAgICAgICAgICAgICAgICAuaGlkZSgpXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2Rpc2FibGVkJywgJ2Rpc2FibGVkJylcbiAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQnKVxuICAgICAgICAgICAgICAgIC5oaWRlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ291bnRyeSBCdWRnZXQgRm9ybSBQYWdlXG4gICAgICpcbiAgICAgKiBATG9naWMgc2hvdy9oaWRlICdjb2RlJyBmaWVsZCBiYXNlZCBvbiAnQHZvY2FidWxhcnknIGZpZWxkIHZhbHVlXG4gICAgICovXG4gICAgY291bnRyeUJ1ZGdldEhpZGVDb2RlRmllbGQoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgY29uc3QgY291bnRyeUJ1ZGdldFZvY2FidWxhcnkgPSAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoJ3NlbGVjdCNjb3VudHJ5X2J1ZGdldF92b2NhYnVsYXJ5Jyk7XG4gICAgICAgIGlmIChjb3VudHJ5QnVkZ2V0Vm9jYWJ1bGFyeS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAvLyBoaWRlL3Nob3cgb24gcGFnZSBsb2FkXG4gICAgICAgICAgICBjb25zdCB2YWwgPSAoX2EgPSBjb3VudHJ5QnVkZ2V0Vm9jYWJ1bGFyeS52YWwoKSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJzEnO1xuICAgICAgICAgICAgdGhpcy5oaWRlQ291bnRyeUJ1ZGdldEZpZWxkKHZhbC50b1N0cmluZygpKTtcbiAgICAgICAgICAgIC8vIGhpZGUvc2hvdyBvbiB2YWx1ZSBjaGFuZ2VcbiAgICAgICAgICAgIGNvdW50cnlCdWRnZXRWb2NhYnVsYXJ5Lm9uKCdzZWxlY3QyOnNlbGVjdCcsIChlKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsID0gZS5wYXJhbXMuZGF0YS5pZDtcbiAgICAgICAgICAgICAgICB0aGlzLmhpZGVDb3VudHJ5QnVkZ2V0RmllbGQodmFsKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy9oaWRlL3Nob3cgYmFzZWQgb24gdmFsdWUgY2xlYXJlZFxuICAgICAgICAgICAgY291bnRyeUJ1ZGdldFZvY2FidWxhcnkub24oJ3NlbGVjdDI6Y2xlYXInLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5oaWRlQ291bnRyeUJ1ZGdldEZpZWxkKCcnKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEhpZGUgQ291bnRyeSBCdWRnZXQgRmllbGRzXG4gICAgICovXG4gICAgaGlkZUNvdW50cnlCdWRnZXRGaWVsZCh2YWx1ZSkge1xuICAgICAgICBjb25zdCBjb3VudHJ5QnVkZ2V0Q29kZUlucHV0ID0gJ2lucHV0W2lkXj1cImJ1ZGdldF9pdGVtXCJdW2lkKj1cIltjb2RlX3RleHRdXCJdJywgY291bnRyeUJ1ZGdldENvZGVTZWxlY3QgPSAnc2VsZWN0W2lkXj1cImJ1ZGdldF9pdGVtXCJdW2lkKj1cIltjb2RlXVwiXSc7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gJzEnKSB7XG4gICAgICAgICAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoY291bnRyeUJ1ZGdldENvZGVTZWxlY3QpXG4gICAgICAgICAgICAgICAgLnZhbCgnJylcbiAgICAgICAgICAgICAgICAudHJpZ2dlcignY2hhbmdlJylcbiAgICAgICAgICAgICAgICAuYXR0cignZGlzYWJsZWQnLCAnZGlzYWJsZWQnKVxuICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgLmhpZGUoKTtcbiAgICAgICAgICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KShjb3VudHJ5QnVkZ2V0Q29kZUlucHV0KVxuICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkJylcbiAgICAgICAgICAgICAgICAuc2hvdygpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKGNvdW50cnlCdWRnZXRDb2RlU2VsZWN0KVxuICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkJylcbiAgICAgICAgICAgICAgICAuc2hvdygpO1xuICAgICAgICAgICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKGNvdW50cnlCdWRnZXRDb2RlSW5wdXQpXG4gICAgICAgICAgICAgICAgLnZhbCgnJylcbiAgICAgICAgICAgICAgICAudHJpZ2dlcignY2hhbmdlJylcbiAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQnKVxuICAgICAgICAgICAgICAgIC5oaWRlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQWlkVHlwZSBGb3JtIFBhZ2VcbiAgICAgKlxuICAgICAqIEBMb2dpYyBoaWRlIHZvY2FidWxhcnktdXJpIGFuZCBjb2RlcyBmaWVsZCBiYXNlZCBvbiAnQHZvY2FidWxhcnknIGZpZWxkIHZhbHVlXG4gICAgICovXG4gICAgYWlkVHlwZVZvY2FidWxhcnlIaWRlRmllbGQoKSB7XG4gICAgICAgIGNvbnN0IGFpZHR5cGVfdm9jYWJ1bGFyeSA9ICgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnc2VsZWN0W2lkKj1cImRlZmF1bHRfYWlkX3R5cGVfdm9jYWJ1bGFyeVwiXScpO1xuICAgICAgICBpZiAoYWlkdHlwZV92b2NhYnVsYXJ5Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGpxdWVyeV8xLmRlZmF1bHQuZWFjaChhaWR0eXBlX3ZvY2FidWxhcnksIChpbmRleCwgaXRlbSkgPT4ge1xuICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gKF9hID0gKDAsIGpxdWVyeV8xLmRlZmF1bHQpKGl0ZW0pLnZhbCgpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAnMSc7XG4gICAgICAgICAgICAgICAgdGhpcy5oaWRlQWlkVHlwZVNlbGVjdEZpZWxkKCgwLCBqcXVlcnlfMS5kZWZhdWx0KShpdGVtKSwgZGF0YS50b1N0cmluZygpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYWlkdHlwZV92b2NhYnVsYXJ5Lm9uKCdzZWxlY3QyOnNlbGVjdCcsIChlKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IGUucGFyYW1zLmRhdGEuaWQ7XG4gICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gZS50YXJnZXQ7XG4gICAgICAgICAgICAgICAgdGhpcy5oaWRlQWlkVHlwZVNlbGVjdEZpZWxkKCgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0YXJnZXQpLCBkYXRhKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYWlkdHlwZV92b2NhYnVsYXJ5Lm9uKCdzZWxlY3QyOmNsZWFyJywgKGUpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB0YXJnZXQgPSBlLnRhcmdldDtcbiAgICAgICAgICAgICAgICB0aGlzLmhpZGVBaWRUeXBlU2VsZWN0RmllbGQoKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRhcmdldCksICcnKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFpZFR5cGUgRm9ybSBQYWdlXG4gICAgICpcbiAgICAgKiBATG9naWMgaGlkZSB2b2NhYnVsYXJ5LXVyaSBhbmQgY29kZXMgZmllbGQgYmFzZWQgb24gJ0B2b2NhYnVsYXJ5JyBmaWVsZCB2YWx1ZVxuICAgICAqL1xuICAgIHRyYW5zYWN0aW9uQWlkVHlwZVZvY2FidWxhcnlIaWRlRmllbGQoKSB7XG4gICAgICAgIGNvbnN0IGFpZHR5cGVfdm9jYWJ1bGFyeSA9ICgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnc2VsZWN0W2lkKj1cImFpZF90eXBlX3ZvY2FidWxhcnlcIl0nKTtcbiAgICAgICAgaWYgKGFpZHR5cGVfdm9jYWJ1bGFyeS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBqcXVlcnlfMS5kZWZhdWx0LmVhY2goYWlkdHlwZV92b2NhYnVsYXJ5LCAoaW5kZXgsIGl0ZW0pID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IChfYSA9ICgwLCBqcXVlcnlfMS5kZWZhdWx0KShpdGVtKS52YWwoKSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJzEnO1xuICAgICAgICAgICAgICAgIHRoaXMuaGlkZVRyYW5zYWN0aW9uQWlkVHlwZVNlbGVjdEZpZWxkKCgwLCBqcXVlcnlfMS5kZWZhdWx0KShpdGVtKSwgZGF0YS50b1N0cmluZygpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYWlkdHlwZV92b2NhYnVsYXJ5Lm9uKCdzZWxlY3QyOnNlbGVjdCcsIChlKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IGUucGFyYW1zLmRhdGEuaWQ7XG4gICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gZS50YXJnZXQ7XG4gICAgICAgICAgICAgICAgdGhpcy5oaWRlVHJhbnNhY3Rpb25BaWRUeXBlU2VsZWN0RmllbGQoKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRhcmdldCksIGRhdGEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBhaWR0eXBlX3ZvY2FidWxhcnkub24oJ3NlbGVjdDI6Y2xlYXInLCAoZSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0O1xuICAgICAgICAgICAgICAgIHRoaXMuaGlkZVRyYW5zYWN0aW9uQWlkVHlwZVNlbGVjdEZpZWxkKCgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0YXJnZXQpLCAnJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBIaWRlIEFpZCBUeXBlIFNlbGVjdCBGaWVsZHNcbiAgICAgKi9cbiAgICBoaWRlQWlkVHlwZVNlbGVjdEZpZWxkKGluZGV4LCB2YWx1ZSkge1xuICAgICAgICBjb25zdCBkZWZhdWx0X2FpZF90eXBlID0gJ3NlbGVjdFtpZCo9XCJbZGVmYXVsdF9haWRfdHlwZV1cIl0nLCBlYXJtYXJraW5nX2NhdGVnb3J5ID0gJ3NlbGVjdFtpZCo9XCJbZWFybWFya2luZ19jYXRlZ29yeV1cIl0nLCBlYXJtYXJraW5nX21vZGFsaXR5ID0gJ3NlbGVjdFtpZCo9XCJbZWFybWFya2luZ19tb2RhbGl0eV1cIl0nLCBjYXNoX2FuZF92b3VjaGVyX21vZGFsaXRpZXMgPSAnc2VsZWN0W2lkKj1cIltjYXNoX2FuZF92b3VjaGVyX21vZGFsaXRpZXNdXCJdJywgY2FzZTEgPSAnc2VsZWN0W2lkKj1cIltlYXJtYXJraW5nX2NhdGVnb3J5XVwiXSxzZWxlY3RbaWQqPVwiW2Vhcm1hcmtpbmdfbW9kYWxpdHldXCJdLHNlbGVjdFtpZCo9XCJbY2FzaF9hbmRfdm91Y2hlcl9tb2RhbGl0aWVzXVwiXScsIGNhc2UyID0gJ3NlbGVjdFtpZCo9XCJbZGVmYXVsdF9haWRfdHlwZV1cIl0sc2VsZWN0W2lkKj1cIltlYXJtYXJraW5nX21vZGFsaXR5XVwiXSxzZWxlY3RbaWQqPVwiW2Nhc2hfYW5kX3ZvdWNoZXJfbW9kYWxpdGllc11cIl0nLCBjYXNlMyA9ICdzZWxlY3RbaWQqPVwiW2RlZmF1bHRfYWlkX3R5cGVdXCJdLHNlbGVjdFtpZCo9XCJbZWFybWFya2luZ19jYXRlZ29yeV1cIl0sc2VsZWN0W2lkKj1cIltjYXNoX2FuZF92b3VjaGVyX21vZGFsaXRpZXNdXCJdJywgY2FzZTQgPSAnc2VsZWN0W2lkKj1cIltkZWZhdWx0X2FpZF90eXBlXVwiXSxzZWxlY3RbaWQqPVwiW2Vhcm1hcmtpbmdfY2F0ZWdvcnldXCJdLHNlbGVjdFtpZCo9XCJbZWFybWFya2luZ19tb2RhbGl0eV1cIl0nO1xuICAgICAgICBzd2l0Y2ggKHZhbHVlKSB7XG4gICAgICAgICAgICBjYXNlICcyJzpcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQtZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAuZmluZChlYXJtYXJraW5nX2NhdGVnb3J5KVxuICAgICAgICAgICAgICAgICAgICAuc2hvdygpXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5zaG93KCk7XG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoY2FzZTIpXG4gICAgICAgICAgICAgICAgICAgIC52YWwoJycpXG4gICAgICAgICAgICAgICAgICAgIC50cmlnZ2VyKCdjaGFuZ2UnKVxuICAgICAgICAgICAgICAgICAgICAuaGlkZSgpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5oaWRlKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICczJzpcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQtZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAuZmluZChlYXJtYXJraW5nX21vZGFsaXR5KVxuICAgICAgICAgICAgICAgICAgICAuc2hvdygpXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5zaG93KCk7XG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoY2FzZTMpXG4gICAgICAgICAgICAgICAgICAgIC52YWwoJycpXG4gICAgICAgICAgICAgICAgICAgIC50cmlnZ2VyKCdjaGFuZ2UnKVxuICAgICAgICAgICAgICAgICAgICAuaGlkZSgpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5oaWRlKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICc0JzpcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQtZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAuZmluZChjYXNoX2FuZF92b3VjaGVyX21vZGFsaXRpZXMpXG4gICAgICAgICAgICAgICAgICAgIC5zaG93KClcbiAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2Rpc2FibGVkJylcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkJylcbiAgICAgICAgICAgICAgICAgICAgLnNob3coKTtcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQtZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAuZmluZChjYXNlNClcbiAgICAgICAgICAgICAgICAgICAgLnZhbCgnJylcbiAgICAgICAgICAgICAgICAgICAgLnRyaWdnZXIoJ2NoYW5nZScpXG4gICAgICAgICAgICAgICAgICAgIC5oaWRlKClcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2Rpc2FibGVkJywgJ2Rpc2FibGVkJylcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkJylcbiAgICAgICAgICAgICAgICAgICAgLmhpZGUoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoZGVmYXVsdF9haWRfdHlwZSlcbiAgICAgICAgICAgICAgICAgICAgLnNob3coKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignZGlzYWJsZWQnKVxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQnKVxuICAgICAgICAgICAgICAgICAgICAuc2hvdygpO1xuICAgICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZC1ncm91cCcpXG4gICAgICAgICAgICAgICAgICAgIC5maW5kKGNhc2UxKVxuICAgICAgICAgICAgICAgICAgICAudmFsKCcnKVxuICAgICAgICAgICAgICAgICAgICAudHJpZ2dlcignY2hhbmdlJylcbiAgICAgICAgICAgICAgICAgICAgLmhpZGUoKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignZGlzYWJsZWQnLCAnZGlzYWJsZWQnKVxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQnKVxuICAgICAgICAgICAgICAgICAgICAuaGlkZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEhpZGUgVHJhbnNhY3Rpb24gQWlkIFR5cGUgU2VsZWN0IEZpZWxkc1xuICAgICAqL1xuICAgIGhpZGVUcmFuc2FjdGlvbkFpZFR5cGVTZWxlY3RGaWVsZChpbmRleCwgdmFsdWUpIHtcbiAgICAgICAgY29uc3QgYWlkX3R5cGUgPSAnc2VsZWN0W2lkKj1cIlthaWRfdHlwZV9jb2RlXVwiXScsIGVhcm1hcmtpbmdfY2F0ZWdvcnkgPSAnc2VsZWN0W2lkKj1cIltlYXJtYXJraW5nX2NhdGVnb3J5XVwiXScsIGVhcm1hcmtpbmdfbW9kYWxpdHkgPSAnc2VsZWN0W2lkKj1cIltlYXJtYXJraW5nX21vZGFsaXR5XVwiXScsIGNhc2hfYW5kX3ZvdWNoZXJfbW9kYWxpdGllcyA9ICdzZWxlY3RbaWQqPVwiW2Nhc2hfYW5kX3ZvdWNoZXJfbW9kYWxpdGllc11cIl0nLCBjYXNlMSA9ICdzZWxlY3RbaWQqPVwiW2Vhcm1hcmtpbmdfY2F0ZWdvcnldXCJdLHNlbGVjdFtpZCo9XCJbZWFybWFya2luZ19tb2RhbGl0eV1cIl0sc2VsZWN0W2lkKj1cIltjYXNoX2FuZF92b3VjaGVyX21vZGFsaXRpZXNdXCJdJywgY2FzZTIgPSAnc2VsZWN0W2lkKj1cIlthaWRfdHlwZV9jb2RlXVwiXSxzZWxlY3RbaWQqPVwiW2Vhcm1hcmtpbmdfbW9kYWxpdHldXCJdLHNlbGVjdFtpZCo9XCJbY2FzaF9hbmRfdm91Y2hlcl9tb2RhbGl0aWVzXVwiXScsIGNhc2UzID0gJ3NlbGVjdFtpZCo9XCJbYWlkX3R5cGVfY29kZV1cIl0sc2VsZWN0W2lkKj1cIltlYXJtYXJraW5nX2NhdGVnb3J5XVwiXSxzZWxlY3RbaWQqPVwiW2Nhc2hfYW5kX3ZvdWNoZXJfbW9kYWxpdGllc11cIl0nLCBjYXNlNCA9ICdzZWxlY3RbaWQqPVwiW2FpZF90eXBlX2NvZGVdXCJdLHNlbGVjdFtpZCo9XCJbZWFybWFya2luZ19jYXRlZ29yeV1cIl0sc2VsZWN0W2lkKj1cIltlYXJtYXJraW5nX21vZGFsaXR5XVwiXSc7XG4gICAgICAgIHN3aXRjaCAodmFsdWUpIHtcbiAgICAgICAgICAgIGNhc2UgJzInOlxuICAgICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZC1ncm91cCcpXG4gICAgICAgICAgICAgICAgICAgIC5maW5kKGVhcm1hcmtpbmdfY2F0ZWdvcnkpXG4gICAgICAgICAgICAgICAgICAgIC5zaG93KClcbiAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2Rpc2FibGVkJylcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkJylcbiAgICAgICAgICAgICAgICAgICAgLnNob3coKTtcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQtZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAuZmluZChjYXNlMilcbiAgICAgICAgICAgICAgICAgICAgLnZhbCgnJylcbiAgICAgICAgICAgICAgICAgICAgLnRyaWdnZXIoJ2NoYW5nZScpXG4gICAgICAgICAgICAgICAgICAgIC5oaWRlKClcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2Rpc2FibGVkJywgJ2Rpc2FibGVkJylcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkJylcbiAgICAgICAgICAgICAgICAgICAgLmhpZGUoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJzMnOlxuICAgICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZC1ncm91cCcpXG4gICAgICAgICAgICAgICAgICAgIC5maW5kKGVhcm1hcmtpbmdfbW9kYWxpdHkpXG4gICAgICAgICAgICAgICAgICAgIC5zaG93KClcbiAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2Rpc2FibGVkJylcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkJylcbiAgICAgICAgICAgICAgICAgICAgLnNob3coKTtcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQtZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAuZmluZChjYXNlMylcbiAgICAgICAgICAgICAgICAgICAgLnZhbCgnJylcbiAgICAgICAgICAgICAgICAgICAgLnRyaWdnZXIoJ2NoYW5nZScpXG4gICAgICAgICAgICAgICAgICAgIC5oaWRlKClcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2Rpc2FibGVkJywgJ2Rpc2FibGVkJylcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkJylcbiAgICAgICAgICAgICAgICAgICAgLmhpZGUoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJzQnOlxuICAgICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZC1ncm91cCcpXG4gICAgICAgICAgICAgICAgICAgIC5maW5kKGNhc2hfYW5kX3ZvdWNoZXJfbW9kYWxpdGllcylcbiAgICAgICAgICAgICAgICAgICAgLnNob3coKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignZGlzYWJsZWQnKVxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQnKVxuICAgICAgICAgICAgICAgICAgICAuc2hvdygpO1xuICAgICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZC1ncm91cCcpXG4gICAgICAgICAgICAgICAgICAgIC5maW5kKGNhc2U0KVxuICAgICAgICAgICAgICAgICAgICAudmFsKCcnKVxuICAgICAgICAgICAgICAgICAgICAudHJpZ2dlcignY2hhbmdlJylcbiAgICAgICAgICAgICAgICAgICAgLmhpZGUoKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignZGlzYWJsZWQnLCAnZGlzYWJsZWQnKVxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQnKVxuICAgICAgICAgICAgICAgICAgICAuaGlkZSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQtZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAuZmluZChhaWRfdHlwZSlcbiAgICAgICAgICAgICAgICAgICAgLnNob3coKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignZGlzYWJsZWQnKVxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQnKVxuICAgICAgICAgICAgICAgICAgICAuc2hvdygpO1xuICAgICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZC1ncm91cCcpXG4gICAgICAgICAgICAgICAgICAgIC5maW5kKGNhc2UxKVxuICAgICAgICAgICAgICAgICAgICAudmFsKCcnKVxuICAgICAgICAgICAgICAgICAgICAudHJpZ2dlcignY2hhbmdlJylcbiAgICAgICAgICAgICAgICAgICAgLmhpZGUoKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignZGlzYWJsZWQnLCAnZGlzYWJsZWQnKVxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQnKVxuICAgICAgICAgICAgICAgICAgICAuaGlkZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFBvbGljeSBNYXJrZXIgRm9ybSBQYWdlXG4gICAgICpcbiAgICAgKiBATG9naWMgaGlkZSB2b2NhYnVsYXJ5LXVyaSBhbmQgY29kZXMgZmllbGQgYmFzZWQgb24gJ0B2b2NhYnVsYXJ5JyBmaWVsZCB2YWx1ZVxuICAgICAqL1xuICAgIHBvbGljeVZvY2FidWxhcnlIaWRlRmllbGQoKSB7XG4gICAgICAgIGNvbnN0IHBvbGljeW1ha2VyX3ZvY2FidWxhcnkgPSAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoJ3NlbGVjdFtpZCo9XCJwb2xpY3lfbWFya2VyX3ZvY2FidWxhcnlcIl0nKTtcbiAgICAgICAgaWYgKHBvbGljeW1ha2VyX3ZvY2FidWxhcnkubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAganF1ZXJ5XzEuZGVmYXVsdC5lYWNoKHBvbGljeW1ha2VyX3ZvY2FidWxhcnksIChpbmRleCwgcG9saWN5X21hcmtlcikgPT4ge1xuICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gKF9hID0gKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHBvbGljeV9tYXJrZXIpLnZhbCgpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAnMSc7XG4gICAgICAgICAgICAgICAgdGhpcy5oaWRlUG9saWN5TWFrZXJGaWVsZCgoMCwganF1ZXJ5XzEuZGVmYXVsdCkocG9saWN5X21hcmtlciksIGRhdGEudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHBvbGljeW1ha2VyX3ZvY2FidWxhcnkub24oJ3NlbGVjdDI6c2VsZWN0JywgKGUpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gZS5wYXJhbXMuZGF0YS5pZDtcbiAgICAgICAgICAgICAgICBjb25zdCB0YXJnZXQgPSBlLnRhcmdldDtcbiAgICAgICAgICAgICAgICB0aGlzLmhpZGVQb2xpY3lNYWtlckZpZWxkKCgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0YXJnZXQpLCBkYXRhKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcG9saWN5bWFrZXJfdm9jYWJ1bGFyeS5vbignc2VsZWN0MjpjbGVhcicsIChlKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gZS50YXJnZXQ7XG4gICAgICAgICAgICAgICAgdGhpcy5oaWRlUG9saWN5TWFrZXJGaWVsZCgoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGFyZ2V0KSwgJzk5Jyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBIaWRlcyBQb2xpY3kgTWFya2VyIEZvcm0gRmllbGRzXG4gICAgICovXG4gICAgaGlkZVBvbGljeU1ha2VyRmllbGQoaW5kZXgsIHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGNhc2UxX3Nob3cgPSAnc2VsZWN0W2lkKj1cIltwb2xpY3lfbWFya2VyXVwiXScsIGNhc2UyX3Nob3cgPSAnaW5wdXRbaWQqPVwiW3BvbGljeV9tYXJrZXJfdGV4dF1cIl0saW5wdXRbaWQqPVwiW3ZvY2FidWxhcnlfdXJpXVwiXScsIGNhc2UxID0gJ2lucHV0W2lkKj1cIltwb2xpY3lfbWFya2VyX3RleHRdXCJdLGlucHV0W2lkKj1cIlt2b2NhYnVsYXJ5X3VyaV1cIl0nLCBjYXNlMiA9ICdzZWxlY3RbaWQqPVwiW3BvbGljeV9tYXJrZXJdXCJdJztcbiAgICAgICAgc3dpdGNoICh2YWx1ZSkge1xuICAgICAgICAgICAgY2FzZSAnMSc6XG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoY2FzZTFfc2hvdylcbiAgICAgICAgICAgICAgICAgICAgLnNob3coKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignZGlzYWJsZWQnKVxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQnKVxuICAgICAgICAgICAgICAgICAgICAuc2hvdygpO1xuICAgICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZC1ncm91cCcpXG4gICAgICAgICAgICAgICAgICAgIC5maW5kKGNhc2UxKVxuICAgICAgICAgICAgICAgICAgICAudmFsKCcnKVxuICAgICAgICAgICAgICAgICAgICAudHJpZ2dlcignY2hhbmdlJylcbiAgICAgICAgICAgICAgICAgICAgLmhpZGUoKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignZGlzYWJsZWQnLCAnZGlzYWJsZWQnKVxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQnKVxuICAgICAgICAgICAgICAgICAgICAuaGlkZSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnOTknOlxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQtZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAuZmluZChjYXNlMl9zaG93KVxuICAgICAgICAgICAgICAgICAgICAuc2hvdygpXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5zaG93KCk7XG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoY2FzZTIpXG4gICAgICAgICAgICAgICAgICAgIC52YWwoJycpXG4gICAgICAgICAgICAgICAgICAgIC50cmlnZ2VyKCdjaGFuZ2UnKVxuICAgICAgICAgICAgICAgICAgICAuaGlkZSgpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5oaWRlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VjdG9yIEZvcm0gUGFnZVxuICAgICAqXG4gICAgICogQExvZ2ljIGhpZGUgdm9jYWJ1bGFyeS11cmkgYW5kIGNvZGVzIGZpZWxkIGJhc2VkIG9uICdAdm9jYWJ1bGFyeScgZmllbGQgdmFsdWVcbiAgICAgKi9cbiAgICBzZWN0b3JWb2NhYnVsYXJ5SGlkZUZpZWxkKCkge1xuICAgICAgICBjb25zdCBzZWN0b3Jfdm9jYWJ1bGFyeSA9ICgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnc2VsZWN0W2lkKj1cInNlY3Rvcl92b2NhYnVsYXJ5XCJdJyk7XG4gICAgICAgIGlmIChzZWN0b3Jfdm9jYWJ1bGFyeS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBqcXVlcnlfMS5kZWZhdWx0LmVhY2goc2VjdG9yX3ZvY2FidWxhcnksIChpbmRleCwgc2VjdG9yKSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSAoX2EgPSAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoc2VjdG9yKS52YWwoKSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJzEnO1xuICAgICAgICAgICAgICAgIHRoaXMuaGlkZVNlY3RvckZpZWxkKCgwLCBqcXVlcnlfMS5kZWZhdWx0KShzZWN0b3IpLCBkYXRhLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBzZWN0b3Jfdm9jYWJ1bGFyeS5vbignc2VsZWN0MjpzZWxlY3QnLCAoZSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBlLnBhcmFtcy5kYXRhLmlkO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0O1xuICAgICAgICAgICAgICAgIHRoaXMuaGlkZVNlY3RvckZpZWxkKCgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0YXJnZXQpLCBkYXRhKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc2VjdG9yX3ZvY2FidWxhcnkub24oJ3NlbGVjdDI6Y2xlYXInLCAoZSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0O1xuICAgICAgICAgICAgICAgIHRoaXMuaGlkZVNlY3RvckZpZWxkKCgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0YXJnZXQpLCAnJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBIaWRlIFNlY3RvciBGb3JtIGZpZWxkc1xuICAgICAqL1xuICAgIGhpZGVTZWN0b3JGaWVsZChpbmRleCwgdmFsdWUpIHtcbiAgICAgICAgY29uc3QgY2FzZTFfc2hvdyA9ICdzZWxlY3RbaWQqPVwiW2NvZGVdXCJdJywgY2FzZTJfc2hvdyA9ICdzZWxlY3RbaWQqPVwiW2NhdGVnb3J5X2NvZGVdXCJdJywgY2FzZTdfc2hvdyA9ICdzZWxlY3RbaWQqPVwiW3NkZ19nb2FsXVwiXScsIGNhc2U4X3Nob3cgPSAnc2VsZWN0W2lkKj1cIltzZGdfdGFyZ2V0XVwiXScsIGNhc2U5OF85OV9zaG93ID0gJ2lucHV0W2lkKj1cIlt0ZXh0XVwiXSxpbnB1dFtpZCo9XCJbdm9jYWJ1bGFyeV91cmldXCJdJywgZGVmYXVsdF9zaG93ID0gJ2lucHV0W2lkKj1cIlt0ZXh0XVwiXScsIGNhc2UxID0gJ3NlbGVjdFtpZCo9XCJbY2F0ZWdvcnlfY29kZV1cIl0sc2VsZWN0W2lkKj1cIltzZGdfZ29hbF1cIl0sc2VsZWN0W2lkKj1cIltzZGdfdGFyZ2V0XVwiXSxpbnB1dFtpZCo9XCJbdm9jYWJ1bGFyeV91cmldXCJdLGlucHV0W2lkKj1cIlt0ZXh0XVwiXScsIGNhc2UyID0gJ2lucHV0W2lkKj1cIlt2b2NhYnVsYXJ5X3VyaV1cIl0sc2VsZWN0W2lkKj1cIltzZGdfZ29hbF1cIl0sc2VsZWN0W2lkKj1cIltzZGdfdGFyZ2V0XVwiXSxzZWxlY3RbaWQqPVwiW2NvZGVdXCJdLGlucHV0W2lkKj1cIlt0ZXh0XVwiXScsIGNhc2U3ID0gJ2lucHV0W2lkKj1cIlt2b2NhYnVsYXJ5X3VyaV1cIl0sc2VsZWN0W2lkKj1cIltjYXRlZ29yeV9jb2RlXVwiXSxzZWxlY3RbaWQqPVwiW3NkZ190YXJnZXRdXCJdLHNlbGVjdFtpZCo9XCJbY29kZV1cIl0saW5wdXRbaWQqPVwiW3RleHRdXCJdJywgY2FzZTggPSAnaW5wdXRbaWQqPVwiW3ZvY2FidWxhcnlfdXJpXVwiXSxzZWxlY3RbaWQqPVwiW2NhdGVnb3J5X2NvZGVdXCJdLHNlbGVjdFtpZCo9XCJbc2RnX2dvYWxdXCJdLHNlbGVjdFtpZCo9XCJbY29kZV1cIl0saW5wdXRbaWQqPVwiW3RleHRdXCJdJywgY2FzZTk4Xzk5ID0gJ3NlbGVjdFtpZCo9XCJbY2F0ZWdvcnlfY29kZV1cIl0sc2VsZWN0W2lkKj1cIltzZGdfZ29hbF1cIl0sc2VsZWN0W2lkKj1cIltzZGdfdGFyZ2V0XVwiXSxzZWxlY3RbaWQqPVwiW2NvZGVdXCJdJywgZGVmYXVsdF9oaWRlID0gJ3NlbGVjdFtpZCo9XCJbY2F0ZWdvcnlfY29kZV1cIl0sc2VsZWN0W2lkKj1cIltzZGdfZ29hbF1cIl0sc2VsZWN0W2lkKj1cIltzZGdfdGFyZ2V0XVwiXSxzZWxlY3RbaWQqPVwiW2NvZGVdXCJdLGlucHV0W2lkKj1cIlt2b2NhYnVsYXJ5X3VyaV1cIl0nO1xuICAgICAgICBzd2l0Y2ggKHZhbHVlKSB7XG4gICAgICAgICAgICBjYXNlICcxJzpcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQtZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAuZmluZChjYXNlMV9zaG93KVxuICAgICAgICAgICAgICAgICAgICAuc2hvdygpXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5zaG93KCk7XG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoY2FzZTEpXG4gICAgICAgICAgICAgICAgICAgIC52YWwoJycpXG4gICAgICAgICAgICAgICAgICAgIC50cmlnZ2VyKCdjaGFuZ2UnKVxuICAgICAgICAgICAgICAgICAgICAuaGlkZSgpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5oaWRlKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICcyJzpcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQtZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAuZmluZChjYXNlMl9zaG93KVxuICAgICAgICAgICAgICAgICAgICAuc2hvdygpXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5zaG93KCk7XG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoY2FzZTIpXG4gICAgICAgICAgICAgICAgICAgIC52YWwoJycpXG4gICAgICAgICAgICAgICAgICAgIC50cmlnZ2VyKCdjaGFuZ2UnKVxuICAgICAgICAgICAgICAgICAgICAuaGlkZSgpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5oaWRlKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICc3JzpcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQtZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAuZmluZChjYXNlN19zaG93KVxuICAgICAgICAgICAgICAgICAgICAuc2hvdygpXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5zaG93KCk7XG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoY2FzZTcpXG4gICAgICAgICAgICAgICAgICAgIC52YWwoJycpXG4gICAgICAgICAgICAgICAgICAgIC50cmlnZ2VyKCdjaGFuZ2UnKVxuICAgICAgICAgICAgICAgICAgICAuaGlkZSgpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5oaWRlKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICc4JzpcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQtZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAuZmluZChjYXNlOF9zaG93KVxuICAgICAgICAgICAgICAgICAgICAuc2hvdygpXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5zaG93KCk7XG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoY2FzZTgpXG4gICAgICAgICAgICAgICAgICAgIC52YWwoJycpXG4gICAgICAgICAgICAgICAgICAgIC50cmlnZ2VyKCdjaGFuZ2UnKVxuICAgICAgICAgICAgICAgICAgICAuaGlkZSgpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5oaWRlKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICc5OCc6XG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoY2FzZTk4Xzk5X3Nob3cpXG4gICAgICAgICAgICAgICAgICAgIC5zaG93KClcbiAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2Rpc2FibGVkJylcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkJylcbiAgICAgICAgICAgICAgICAgICAgLnNob3coKTtcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQtZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAuZmluZChjYXNlOThfOTkpXG4gICAgICAgICAgICAgICAgICAgIC52YWwoJycpXG4gICAgICAgICAgICAgICAgICAgIC50cmlnZ2VyKCdjaGFuZ2UnKVxuICAgICAgICAgICAgICAgICAgICAuaGlkZSgpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5oaWRlKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICc5OSc6XG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoY2FzZTk4Xzk5X3Nob3cpXG4gICAgICAgICAgICAgICAgICAgIC5zaG93KClcbiAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2Rpc2FibGVkJylcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkJylcbiAgICAgICAgICAgICAgICAgICAgLnNob3coKTtcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQtZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAuZmluZChjYXNlOThfOTkpXG4gICAgICAgICAgICAgICAgICAgIC52YWwoJycpXG4gICAgICAgICAgICAgICAgICAgIC50cmlnZ2VyKCdjaGFuZ2UnKVxuICAgICAgICAgICAgICAgICAgICAuaGlkZSgpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5oaWRlKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZC1ncm91cCcpXG4gICAgICAgICAgICAgICAgICAgIC5maW5kKGRlZmF1bHRfc2hvdylcbiAgICAgICAgICAgICAgICAgICAgLnNob3coKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignZGlzYWJsZWQnKVxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQnKVxuICAgICAgICAgICAgICAgICAgICAuc2hvdygpO1xuICAgICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZC1ncm91cCcpXG4gICAgICAgICAgICAgICAgICAgIC5maW5kKGRlZmF1bHRfaGlkZSlcbiAgICAgICAgICAgICAgICAgICAgLnZhbCgnJylcbiAgICAgICAgICAgICAgICAgICAgLnRyaWdnZXIoJ2NoYW5nZScpXG4gICAgICAgICAgICAgICAgICAgIC5oaWRlKClcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2Rpc2FibGVkJywgJ2Rpc2FibGVkJylcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkJylcbiAgICAgICAgICAgICAgICAgICAgLmhpZGUoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiAgUmVjaXBpZW50IFZvY2FidWxhcnkgRm9ybSBQYWdlXG4gICAgICpcbiAgICAgKiBATG9naWMgaGlkZSB2b2NhYnVsYXJ5LXVyaSBhbmQgY29kZXMgZmllbGQgYmFzZWQgb24gJ0B2b2NhYnVsYXJ5JyBmaWVsZCB2YWx1ZVxuICAgICAqL1xuICAgIHJlY2lwaWVudFZvY2FidWxhcnlIaWRlRmllbGQoKSB7XG4gICAgICAgIGNvbnN0IHJlZ2lvbl92b2NhYnVsYXJ5ID0gKDAsIGpxdWVyeV8xLmRlZmF1bHQpKCdzZWxlY3RbaWQqPVwicmVnaW9uX3ZvY2FidWxhcnlcIl0nKTtcbiAgICAgICAgaWYgKHJlZ2lvbl92b2NhYnVsYXJ5Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGpxdWVyeV8xLmRlZmF1bHQuZWFjaChyZWdpb25fdm9jYWJ1bGFyeSwgKGluZGV4LCByZWdpb25fdm9jYWIpID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IChfYSA9ICgwLCBqcXVlcnlfMS5kZWZhdWx0KShyZWdpb25fdm9jYWIpLnZhbCgpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAnMSc7XG4gICAgICAgICAgICAgICAgdGhpcy5oaWRlUmVjaXBpZW50UmVnaW9uRmllbGQoKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHJlZ2lvbl92b2NhYiksIGRhdGEudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJlZ2lvbl92b2NhYnVsYXJ5Lm9uKCdzZWxlY3QyOnNlbGVjdCcsIChlKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IGUucGFyYW1zLmRhdGEuaWQ7XG4gICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gZS50YXJnZXQ7XG4gICAgICAgICAgICAgICAgdGhpcy5oaWRlUmVjaXBpZW50UmVnaW9uRmllbGQoKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRhcmdldCksIGRhdGEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZWdpb25fdm9jYWJ1bGFyeS5vbignc2VsZWN0MjpjbGVhcicsIChlKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gZS50YXJnZXQ7XG4gICAgICAgICAgICAgICAgdGhpcy5oaWRlUmVjaXBpZW50UmVnaW9uRmllbGQoKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRhcmdldCksICcnKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEhpZGVzIFJlY2lwaWVudCBSZWdpb24gRm9ybSBGaWVsZHNcbiAgICAgKi9cbiAgICBoaWRlUmVjaXBpZW50UmVnaW9uRmllbGQoaW5kZXgsIHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGNhc2UxX3Nob3cgPSAnc2VsZWN0W2lkKj1cIltyZWdpb25fY29kZV1cIl0nLCBjYXNlMl9zaG93ID0gJ2lucHV0W2lkKj1cIltjdXN0b21fY29kZV1cIl0sIGlucHV0W2lkKj1cIltjb2RlXVwiXScsIGNhc2U5OV9zaG93ID0gJ2lucHV0W2lkKj1cIltjdXN0b21fY29kZV1cIl0saW5wdXRbaWQqPVwiW3ZvY2FidWxhcnlfdXJpXVwiXSwgaW5wdXRbaWQqPVwiW2NvZGVdXCJdJywgY2FzZTEgPSAnaW5wdXRbaWQqPVwiW2N1c3RvbV9jb2RlXVwiXSxpbnB1dFtpZCo9XCJbdm9jYWJ1bGFyeV91cmldXCJdLGlucHV0W2lkKj1cIltjb2RlXVwiXScsIGNhc2UyID0gJ3NlbGVjdFtpZCo9XCJbcmVnaW9uX2NvZGVdXCJdLGlucHV0W2lkKj1cIlt2b2NhYnVsYXJ5X3VyaV1cIl0nLCBjYXNlOTkgPSAnc2VsZWN0W2lkKj1cIltyZWdpb25fY29kZV1cIl0nO1xuICAgICAgICBzd2l0Y2ggKHZhbHVlKSB7XG4gICAgICAgICAgICBjYXNlICcxJzpcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQtZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAuZmluZChjYXNlMV9zaG93KVxuICAgICAgICAgICAgICAgICAgICAuc2hvdygpXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5zaG93KCk7XG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoY2FzZTEpXG4gICAgICAgICAgICAgICAgICAgIC52YWwoJycpXG4gICAgICAgICAgICAgICAgICAgIC50cmlnZ2VyKCdjaGFuZ2UnKVxuICAgICAgICAgICAgICAgICAgICAuaGlkZSgpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5oaWRlKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICcyJzpcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQtZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAuZmluZChjYXNlMl9zaG93KVxuICAgICAgICAgICAgICAgICAgICAuc2hvdygpXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5zaG93KCk7XG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoY2FzZTIpXG4gICAgICAgICAgICAgICAgICAgIC52YWwoJycpXG4gICAgICAgICAgICAgICAgICAgIC50cmlnZ2VyKCdjaGFuZ2UnKVxuICAgICAgICAgICAgICAgICAgICAuaGlkZSgpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5oaWRlKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICc5OSc6XG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoY2FzZTk5X3Nob3cpXG4gICAgICAgICAgICAgICAgICAgIC5zaG93KClcbiAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2Rpc2FibGVkJylcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkJylcbiAgICAgICAgICAgICAgICAgICAgLnNob3coKTtcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQtZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAuZmluZChjYXNlOTkpXG4gICAgICAgICAgICAgICAgICAgIC52YWwoJycpXG4gICAgICAgICAgICAgICAgICAgIC50cmlnZ2VyKCdjaGFuZ2UnKVxuICAgICAgICAgICAgICAgICAgICAuaGlkZSgpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5oaWRlKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZC1ncm91cCcpXG4gICAgICAgICAgICAgICAgICAgIC5maW5kKGNhc2UyX3Nob3cpXG4gICAgICAgICAgICAgICAgICAgIC5zaG93KClcbiAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2Rpc2FibGVkJylcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkJylcbiAgICAgICAgICAgICAgICAgICAgLnNob3coKTtcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQtZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAuZmluZChjYXNlMilcbiAgICAgICAgICAgICAgICAgICAgLnZhbCgnJylcbiAgICAgICAgICAgICAgICAgICAgLnRyaWdnZXIoJ2NoYW5nZScpXG4gICAgICAgICAgICAgICAgICAgIC5oaWRlKClcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2Rpc2FibGVkJywgJ2Rpc2FibGVkJylcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkJylcbiAgICAgICAgICAgICAgICAgICAgLmhpZGUoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIEFjdGl2aXR5IGlkZW50aWZpZXJcbiAgICAgKi9cbiAgICB1cGRhdGVBY3Rpdml0eUlkZW50aWZpZXIoKSB7XG4gICAgICAgIGNvbnN0IGFjdGl2aXR5X2lkZW50aWZpZXIgPSAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoJyNhY3Rpdml0eV9pZGVudGlmaWVyJyk7XG4gICAgICAgIGlmIChhY3Rpdml0eV9pZGVudGlmaWVyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGFjdGl2aXR5X2lkZW50aWZpZXIub24oJ2tleXVwJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnI2lhdGlfaWRlbnRpZmllcl90ZXh0JykudmFsKCgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnLmlkZW50aWZpZXInKS5hdHRyKCdhY3Rpdml0eV9pZGVudGlmaWVyJykgKyBgLSR7KDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRoaXMpLnZhbCgpfWApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogVGFnIEZvcm0gUGFnZVxuICAgICAqXG4gICAgICogQExvZ2ljIGhpZGUgdm9jYWJ1bGFyeS11cmkgYW5kIGNvZGVzIGZpZWxkIGJhc2VkIG9uICdAdm9jYWJ1bGFyeScgZmllbGQgdmFsdWVcbiAgICAgKi9cbiAgICB0YWdWb2NhYnVsYXJ5SGlkZUZpZWxkKCkge1xuICAgICAgICBjb25zdCB0YWdfdm9jYWJ1bGFyeSA9ICgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnc2VsZWN0W2lkKj1cInRhZ192b2NhYnVsYXJ5XCJdJyk7XG4gICAgICAgIGlmICh0YWdfdm9jYWJ1bGFyeS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBqcXVlcnlfMS5kZWZhdWx0LmVhY2godGFnX3ZvY2FidWxhcnksIChpbmRleCwgdGFnKSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSAoX2EgPSAoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGFnKS52YWwoKSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJzEnO1xuICAgICAgICAgICAgICAgIHRoaXMuaGlkZVRhZ0ZpZWxkKCgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0YWcpLCBkYXRhLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0YWdfdm9jYWJ1bGFyeS5vbignc2VsZWN0MjpzZWxlY3QnLCAoZSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBlLnBhcmFtcy5kYXRhLmlkO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0O1xuICAgICAgICAgICAgICAgIHRoaXMuaGlkZVRhZ0ZpZWxkKCgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0YXJnZXQpLCBkYXRhKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGFnX3ZvY2FidWxhcnkub24oJ3NlbGVjdDI6Y2xlYXInLCAoZSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0O1xuICAgICAgICAgICAgICAgIHRoaXMuaGlkZVRhZ0ZpZWxkKCgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0YXJnZXQpLCAnJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBIaWRlIFRhZyBGb3JtIGZpZWxkc1xuICAgICAqL1xuICAgIGhpZGVUYWdGaWVsZChpbmRleCwgdmFsdWUpIHtcbiAgICAgICAgY29uc3QgY2FzZTFfc2hvdyA9ICdpbnB1dFtpZCo9XCJbdGFnX3RleHRdXCJdJywgY2FzZTJfc2hvdyA9ICdzZWxlY3RbaWQqPVwiW2dvYWxzX3RhZ19jb2RlXVwiXScsIGNhc2UzX3Nob3cgPSAnc2VsZWN0W2lkKj1cIlt0YXJnZXRzX3RhZ19jb2RlXVwiXScsIGNhc2U5OV9zaG93ID0gJ2lucHV0W2lkKj1cIlt0YWdfdGV4dF1cIl0sIGlucHV0W2lkKj1cIlt2b2NhYnVsYXJ5X3VyaV1cIl0nLCBjYXNlMSA9ICdzZWxlY3RbaWQqPVwiW2dvYWxzX3RhZ19jb2RlXVwiXSxzZWxlY3RbaWQqPVwiW3RhcmdldHNfdGFnX2NvZGVdXCJdLGlucHV0W2lkKj1cIlt2b2NhYnVsYXJ5X3VyaV1cIl0nLCBjYXNlMiA9ICdpbnB1dFtpZCo9XCJbdm9jYWJ1bGFyeV91cmldXCJdLHNlbGVjdFtpZCo9XCJbdGFyZ2V0c190YWdfY29kZV1cIl0sc2VsZWN0W2lkKj1cIlt0YXJnZXRzX3RhZ19jb2RlXVwiXSxpbnB1dFtpZCo9XCJbdGFnX3RleHRdXCJdJywgY2FzZTMgPSAnaW5wdXRbaWQqPVwiW3ZvY2FidWxhcnlfdXJpXVwiXSxzZWxlY3RbaWQqPVwiW2dvYWxzX3RhZ19jb2RlXVwiXSxpbnB1dFtpZCo9XCJbdGFnX3RleHRdXCJdJywgY2FzZTk5ID0gJ3NlbGVjdFtpZCo9XCJbZ29hbHNfdGFnX2NvZGVdXCJdLHNlbGVjdFtpZCo9XCJbdGFyZ2V0c190YWdfY29kZV1cIl0nO1xuICAgICAgICBzd2l0Y2ggKHZhbHVlKSB7XG4gICAgICAgICAgICBjYXNlICcxJzpcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQtZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAuZmluZChjYXNlMV9zaG93KVxuICAgICAgICAgICAgICAgICAgICAuc2hvdygpXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5zaG93KCk7XG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoY2FzZTEpXG4gICAgICAgICAgICAgICAgICAgIC52YWwoJycpXG4gICAgICAgICAgICAgICAgICAgIC50cmlnZ2VyKCdjaGFuZ2UnKVxuICAgICAgICAgICAgICAgICAgICAuaGlkZSgpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5oaWRlKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICcyJzpcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQtZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAuZmluZChjYXNlMl9zaG93KVxuICAgICAgICAgICAgICAgICAgICAuc2hvdygpXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5zaG93KCk7XG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoY2FzZTIpXG4gICAgICAgICAgICAgICAgICAgIC52YWwoJycpXG4gICAgICAgICAgICAgICAgICAgIC50cmlnZ2VyKCdjaGFuZ2UnKVxuICAgICAgICAgICAgICAgICAgICAuaGlkZSgpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5oaWRlKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICczJzpcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQtZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAuZmluZChjYXNlM19zaG93KVxuICAgICAgICAgICAgICAgICAgICAuc2hvdygpXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5zaG93KCk7XG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoY2FzZTMpXG4gICAgICAgICAgICAgICAgICAgIC52YWwoJycpXG4gICAgICAgICAgICAgICAgICAgIC50cmlnZ2VyKCdjaGFuZ2UnKVxuICAgICAgICAgICAgICAgICAgICAuaGlkZSgpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5oaWRlKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICc5OSc6XG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoY2FzZTk5X3Nob3cpXG4gICAgICAgICAgICAgICAgICAgIC5zaG93KClcbiAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2Rpc2FibGVkJylcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkJylcbiAgICAgICAgICAgICAgICAgICAgLnNob3coKTtcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQtZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAuZmluZChjYXNlOTkpXG4gICAgICAgICAgICAgICAgICAgIC52YWwoJycpXG4gICAgICAgICAgICAgICAgICAgIC50cmlnZ2VyKCdjaGFuZ2UnKVxuICAgICAgICAgICAgICAgICAgICAuaGlkZSgpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5oaWRlKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZC1ncm91cCcpXG4gICAgICAgICAgICAgICAgICAgIC5maW5kKGNhc2UxX3Nob3cpXG4gICAgICAgICAgICAgICAgICAgIC5zaG93KClcbiAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2Rpc2FibGVkJylcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkJylcbiAgICAgICAgICAgICAgICAgICAgLnNob3coKTtcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQtZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAuZmluZChjYXNlMSlcbiAgICAgICAgICAgICAgICAgICAgLnZhbCgnJylcbiAgICAgICAgICAgICAgICAgICAgLnRyaWdnZXIoJ2NoYW5nZScpXG4gICAgICAgICAgICAgICAgICAgIC5oaWRlKClcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2Rpc2FibGVkJywgJ2Rpc2FibGVkJylcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkJylcbiAgICAgICAgICAgICAgICAgICAgLmhpZGUoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuRHluYW1pY0ZpZWxkID0gRHluYW1pY0ZpZWxkO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBheGlvc18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJheGlvc1wiKSk7XG5jb25zdCBqcXVlcnlfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwianF1ZXJ5XCIpKTtcbnJlcXVpcmUoXCJzZWxlY3QyXCIpO1xuY29uc3QgRHluYW1pY0ZpZWxkXzEgPSByZXF1aXJlKFwiLi9EeW5hbWljRmllbGRcIik7XG5jb25zdCBkeW5hbWljRmllbGQgPSBuZXcgRHluYW1pY0ZpZWxkXzEuRHluYW1pY0ZpZWxkKCk7XG5jbGFzcyBGb3JtQnVpbGRlciB7XG4gICAgLy8gYWRkcyBuZXcgY29sbGVjdGlvbiBvZiBzdWItZWxlbWVudFxuICAgIGFkZEZvcm0oZXYpIHtcbiAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gZXYudGFyZ2V0O1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSAoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGFyZ2V0KS5hdHRyKCdmb3JtX3R5cGUnKVxuICAgICAgICAgICAgPyAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoYC5jb2xsZWN0aW9uLWNvbnRhaW5lcltmb3JtX3R5cGUgPSckeygwLCBqcXVlcnlfMS5kZWZhdWx0KSh0YXJnZXQpLmF0dHIoJ2Zvcm1fdHlwZScpfSddYClcbiAgICAgICAgICAgIDogKDAsIGpxdWVyeV8xLmRlZmF1bHQpKCcuY29sbGVjdGlvbi1jb250YWluZXInKTtcbiAgICAgICAgY29uc3QgY291bnQgPSAoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGFyZ2V0KS5hdHRyKCdjaGlsZF9jb3VudCcpXG4gICAgICAgICAgICA/IHBhcnNlSW50KCgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0YXJnZXQpLmF0dHIoJ2NoaWxkX2NvdW50JykpICsgMVxuICAgICAgICAgICAgOiAoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGFyZ2V0KS5wYXJlbnQoKS5maW5kKCcuZm9ybS1jaGlsZC1ib2R5JykubGVuZ3RoO1xuICAgICAgICBjb25zdCBwYXJlbnRfY291bnQgPSAoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGFyZ2V0KS5hdHRyKCdwYXJlbnRfY291bnQnKVxuICAgICAgICAgICAgPyBwYXJzZUludCgoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGFyZ2V0KS5hdHRyKCdwYXJlbnRfY291bnQnKSlcbiAgICAgICAgICAgIDogKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRhcmdldCkucGFyZW50cygnLm11bHRpLWZvcm0nKS5pbmRleCgpIC0gMTtcbiAgICAgICAgY29uc3Qgd3JhcHBlcl9wYXJlbnRfY291bnQgPSAoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGFyZ2V0KS5hdHRyKCd3cmFwcGVkX3BhcmVudF9jb3VudCcpXG4gICAgICAgICAgICA/IHBhcnNlSW50KCgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0YXJnZXQpLmF0dHIoJ3dyYXBwZWRfcGFyZW50X2NvdW50JykpXG4gICAgICAgICAgICA6ICgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0YXJnZXQpLnBhcmVudHMoJy53cmFwcGVkLWNoaWxkLWJvZHknKS5pbmRleCgpIC0gMTtcbiAgICAgICAgbGV0IHByb3RvID0gY29udGFpbmVyXG4gICAgICAgICAgICAuZGF0YSgncHJvdG90eXBlJylcbiAgICAgICAgICAgIC5yZXBsYWNlKC9fX1BBUkVOVF9OQU1FX18vZywgcGFyZW50X2NvdW50KTtcbiAgICAgICAgaWYgKCgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0YXJnZXQpLmF0dHIoJ2hhc19jaGlsZF9jb2xsZWN0aW9uJykpIHtcbiAgICAgICAgICAgIHByb3RvID0gcHJvdG8ucmVwbGFjZSgvX19XUkFQUEVSX05BTUVfXy9nLCBjb3VudCk7XG4gICAgICAgICAgICBwcm90byA9IHByb3RvLnJlcGxhY2UoL19fTkFNRV9fL2csIDApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcHJvdG8gPSBwcm90by5yZXBsYWNlKC9fX05BTUVfXy9nLCBjb3VudCk7XG4gICAgICAgICAgICBwcm90byA9IHByb3RvLnJlcGxhY2UoL19fV1JBUFBFUl9OQU1FX18vZywgd3JhcHBlcl9wYXJlbnRfY291bnQpO1xuICAgICAgICB9XG4gICAgICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0YXJnZXQpLnByZXYoKS5hcHBlbmQoKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHByb3RvKSk7XG4gICAgICAgIGlmICgoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGFyZ2V0KS5hdHRyKCdoYXNfY2hpbGRfY29sbGVjdGlvbicpKSB7XG4gICAgICAgICAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGFyZ2V0KVxuICAgICAgICAgICAgICAgIC5wcmV2KCcuc3ViZWxlbWVudCcpXG4gICAgICAgICAgICAgICAgLmNoaWxkcmVuKCcud3JhcHBlZC1jaGlsZC1ib2R5JylcbiAgICAgICAgICAgICAgICAubGFzdCgpXG4gICAgICAgICAgICAgICAgLmZpbmQoJy5hZGRfdG9fY29sbGVjdGlvbicpXG4gICAgICAgICAgICAgICAgLmF0dHIoJ3dyYXBwZWRfcGFyZW50X2NvdW50JywgY291bnQpO1xuICAgICAgICAgICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRhcmdldClcbiAgICAgICAgICAgICAgICAucHJldignLnN1YmVsZW1lbnQnKVxuICAgICAgICAgICAgICAgIC5jaGlsZHJlbignLndyYXBwZWQtY2hpbGQtYm9keScpXG4gICAgICAgICAgICAgICAgLmxhc3QoKVxuICAgICAgICAgICAgICAgIC5maW5kKCcuYWRkX3RvX2NvbGxlY3Rpb24nKVxuICAgICAgICAgICAgICAgIC5hdHRyKCdwYXJlbnRfY291bnQnLCBwYXJlbnRfY291bnQpO1xuICAgICAgICB9XG4gICAgICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0YXJnZXQpXG4gICAgICAgICAgICAucHJldigpXG4gICAgICAgICAgICAuZmluZCgnLndyYXBwZWQtY2hpbGQtYm9keScpXG4gICAgICAgICAgICAubGFzdCgpXG4gICAgICAgICAgICAuZmluZCgnLmFkZF90b19jb2xsZWN0aW9uJylcbiAgICAgICAgICAgIC5hdHRyKCd3cmFwcGVyX3BhcmVudF9jb3VudCcsIHdyYXBwZXJfcGFyZW50X2NvdW50ICE9PSBudWxsICYmIHdyYXBwZXJfcGFyZW50X2NvdW50ICE9PSB2b2lkIDAgPyB3cmFwcGVyX3BhcmVudF9jb3VudCA6IDApO1xuICAgICAgICBpZiAoKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRhcmdldCkuYXR0cignZm9ybV90eXBlJykpIHtcbiAgICAgICAgICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0YXJnZXQpLnByZXYoKS5sYXN0KCkuZmluZCgnLnNlbGVjdDInKS5zZWxlY3QyKHtcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJ1NlbGVjdCBhbiBvcHRpb24nLFxuICAgICAgICAgICAgICAgIGFsbG93Q2xlYXI6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0aGlzKVxuICAgICAgICAgICAgICAgIC5maW5kKCcuc3ViLWF0dHJpYnV0ZScpXG4gICAgICAgICAgICAgICAgLndyYXBBbGwoKDAsIGpxdWVyeV8xLmRlZmF1bHQpKCc8ZGl2IGNsYXNzPVwiZm9ybS1maWVsZC1ncm91cCBmbGV4IGZsZXgtd3JhcCBzdWItYXR0cmlidXRlLXdyYXBwZXJcIj48L2Rpdj4nKSk7XG4gICAgICAgICAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGFyZ2V0KVxuICAgICAgICAgICAgICAgIC5wcmV2KCcuc3ViZWxlbWVudCcpXG4gICAgICAgICAgICAgICAgLmNoaWxkcmVuKCcud3JhcHBlZC1jaGlsZC1ib2R5JylcbiAgICAgICAgICAgICAgICAubGFzdCgpXG4gICAgICAgICAgICAgICAgLmZpbmQoJy5zdWItYXR0cmlidXRlJylcbiAgICAgICAgICAgICAgICAud3JhcEFsbCgoMCwganF1ZXJ5XzEuZGVmYXVsdCkoJzxkaXYgY2xhc3M9XCJmb3JtLWZpZWxkLWdyb3VwIGZsZXggZmxleC13cmFwIHN1Yi1hdHRyaWJ1dGUtd3JhcHBlciBtdC02XCI+PC9kaXY+JykpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRhcmdldClcbiAgICAgICAgICAgICAgICAucGFyZW50KClcbiAgICAgICAgICAgICAgICAuZmluZCgnLmZvcm0tY2hpbGQtYm9keScpXG4gICAgICAgICAgICAgICAgLmxhc3QoKVxuICAgICAgICAgICAgICAgIC5maW5kKCcuc2VsZWN0MicpXG4gICAgICAgICAgICAgICAgLnNlbGVjdDIoe1xuICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAnU2VsZWN0IGFuIG9wdGlvbicsXG4gICAgICAgICAgICAgICAgYWxsb3dDbGVhcjogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0YXJnZXQpLmF0dHIoJ2NoaWxkX2NvdW50JywgY291bnQpO1xuICAgICAgICBkeW5hbWljRmllbGQuYWlkVHlwZVZvY2FidWxhcnlIaWRlRmllbGQoKTtcbiAgICAgICAgZHluYW1pY0ZpZWxkLnNlY3RvclZvY2FidWxhcnlIaWRlRmllbGQoKTtcbiAgICB9XG4gICAgLy8gYWRkcyBwYXJlbnQgY29sbGVjdGlvblxuICAgIGFkZFBhcmVudEZvcm0oZXYpIHtcbiAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gZXYudGFyZ2V0O1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSAoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGFyZ2V0KS5hdHRyKCdmb3JtX3R5cGUnKVxuICAgICAgICAgICAgPyAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoYC5wYXJlbnQtY29sbGVjdGlvbltmb3JtX3R5cGUgPSckeygwLCBqcXVlcnlfMS5kZWZhdWx0KSh0YXJnZXQpLmF0dHIoJ2Zvcm1fdHlwZScpfSddYClcbiAgICAgICAgICAgIDogKDAsIGpxdWVyeV8xLmRlZmF1bHQpKCcucGFyZW50LWNvbGxlY3Rpb24nKTtcbiAgICAgICAgY29uc3QgY291bnQgPSAoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGFyZ2V0KS5hdHRyKCdwYXJlbnRfY291bnQnKVxuICAgICAgICAgICAgPyBwYXJzZUludCgoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGFyZ2V0KS5hdHRyKCdwYXJlbnRfY291bnQnKSkgKyAxXG4gICAgICAgICAgICA6ICgoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGFyZ2V0KS5wcmV2KCkuZmluZCgnLm11bHRpLWZvcm0nKS5sZW5ndGhcbiAgICAgICAgICAgICAgICA/ICgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0YXJnZXQpLnByZXYoKS5maW5kKCcubXVsdGktZm9ybScpLmxlbmd0aFxuICAgICAgICAgICAgICAgIDogKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRhcmdldCkucHJldigpLmZpbmQoJy53cmFwcGVkLWNoaWxkLWJvZHknKS5sZW5ndGgpICsgMTtcbiAgICAgICAgbGV0IHByb3RvID0gY29udGFpbmVyLmRhdGEoJ3Byb3RvdHlwZScpLnJlcGxhY2UoL19fUEFSRU5UX05BTUVfXy9nLCBjb3VudCk7XG4gICAgICAgIHByb3RvID0gcHJvdG8ucmVwbGFjZSgvX19OQU1FX18vZywgMCk7XG4gICAgICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0YXJnZXQpLnByZXYoKS5hcHBlbmQoKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHByb3RvKSk7XG4gICAgICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0YXJnZXQpLnByZXYoKS5maW5kKCcubXVsdGktZm9ybScpLmxhc3QoKS5maW5kKCcuc2VsZWN0MicpLnNlbGVjdDIoe1xuICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICdTZWxlY3QgYW4gb3B0aW9uJyxcbiAgICAgICAgICAgIGFsbG93Q2xlYXI6IHRydWUsXG4gICAgICAgIH0pO1xuICAgICAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGFyZ2V0KVxuICAgICAgICAgICAgLnByZXYoKVxuICAgICAgICAgICAgLmZpbmQoJy5tdWx0aS1mb3JtJylcbiAgICAgICAgICAgIC5sYXN0KClcbiAgICAgICAgICAgIC5maW5kKCcuYWRkX3RvX2NvbGxlY3Rpb24nKVxuICAgICAgICAgICAgLmF0dHIoJ3BhcmVudF9jb3VudCcsIGNvdW50KTtcbiAgICAgICAgdGhpcy5hZGRXcmFwcGVyT25BZGQodGFyZ2V0KTtcbiAgICAgICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRhcmdldCkuYXR0cigncGFyZW50X2NvdW50JywgY291bnQpO1xuICAgICAgICBkeW5hbWljRmllbGQuaHVtYW5pdGFyaWFuU2NvcGVIaWRlVm9jYWJ1bGFyeVVyaSgpO1xuICAgICAgICBkeW5hbWljRmllbGQuY291bnRyeUJ1ZGdldEhpZGVDb2RlRmllbGQoKTtcbiAgICAgICAgZHluYW1pY0ZpZWxkLnNlY3RvclZvY2FidWxhcnlIaWRlRmllbGQoKTtcbiAgICAgICAgZHluYW1pY0ZpZWxkLnJlY2lwaWVudFZvY2FidWxhcnlIaWRlRmllbGQoKTtcbiAgICAgICAgZHluYW1pY0ZpZWxkLnBvbGljeVZvY2FidWxhcnlIaWRlRmllbGQoKTtcbiAgICAgICAgZHluYW1pY0ZpZWxkLnRhZ1ZvY2FidWxhcnlIaWRlRmllbGQoKTtcbiAgICAgICAgZHluYW1pY0ZpZWxkLnRyYW5zYWN0aW9uQWlkVHlwZVZvY2FidWxhcnlIaWRlRmllbGQoKTtcbiAgICAgICAgZHluYW1pY0ZpZWxkLmluZGljYXRvclJlZmVyZW5jZUhpZGVGaWVsZFVyaSgpO1xuICAgIH1cbiAgICAvLyBkZWxldGVzIGNvbGxlY3Rpb25cbiAgICBkZWxldGVGb3JtKGV2KSB7XG4gICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGV2LnRhcmdldDtcbiAgICAgICAgY29uc3QgY29sbGVjdGlvbkxlbmd0aCA9ICgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnLm11bHRpLWZvcm0nKS5sZW5ndGhcbiAgICAgICAgICAgID8gKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRhcmdldCkuY2xvc2VzdCgnLnN1YmVsZW1lbnQnKS5maW5kKCcuZm9ybS1jaGlsZC1ib2R5JykubGVuZ3RoXG4gICAgICAgICAgICA6ICgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnLmZvcm0tY2hpbGQtYm9keScpLmxlbmd0aDtcbiAgICAgICAgY29uc3QgY291bnQgPSAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoJy5hZGRfdG9fY29sbGVjdGlvbicpLmF0dHIoJ2NoaWxkX2NvdW50JylcbiAgICAgICAgICAgID8gcGFyc2VJbnQoKDAsIGpxdWVyeV8xLmRlZmF1bHQpKCcuYWRkX3RvX2NvbGxlY3Rpb24nKS5hdHRyKCdjaGlsZF9jb3VudCcpKSArIDFcbiAgICAgICAgICAgIDogY29sbGVjdGlvbkxlbmd0aDtcbiAgICAgICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKCcuYWRkX3RvX2NvbGxlY3Rpb24nKS5hdHRyKCdjaGlsZF9jb3VudCcsIGNvdW50KTtcbiAgICAgICAgaWYgKGNvbGxlY3Rpb25MZW5ndGggPiAxKSB7XG4gICAgICAgICAgICBjb25zdCB0ZyA9ICgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0YXJnZXQpLmNsb3Nlc3QoJy5mb3JtLWNoaWxkLWJvZHknKTtcbiAgICAgICAgICAgIHRnLm5leHQoJy5lcnJvcicpLnJlbW92ZSgpO1xuICAgICAgICAgICAgdGcucmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gZGVsZXRlcyBwYXJlbnQgY29sbGVjdGlvblxuICAgIGRlbGV0ZVBhcmVudEZvcm0oZXYpIHtcbiAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gZXYudGFyZ2V0O1xuICAgICAgICBjb25zdCBjb2xsZWN0aW9uTGVuZ3RoID0gKDAsIGpxdWVyeV8xLmRlZmF1bHQpKCcuc3ViZWxlbWVudCcpLmxlbmd0aDtcbiAgICAgICAgY29uc3QgY291bnQgPSAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoJy5hZGRfdG9fcGFyZW50JykuYXR0cignY2hpbGRfY291bnQnKVxuICAgICAgICAgICAgPyBwYXJzZUludCgoMCwganF1ZXJ5XzEuZGVmYXVsdCkoJy5hZGRfdG9fcGFyZW50JykuYXR0cignY2hpbGRfY291bnQnKSkgKyAxXG4gICAgICAgICAgICA6IGNvbGxlY3Rpb25MZW5ndGg7XG4gICAgICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnLmFkZF90b19wYXJlbnQnKS5hdHRyKCdjaGlsZF9jb3VudCcsIGNvdW50KTtcbiAgICAgICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKCcuYWRkX3RvX3BhcmVudCcpLmF0dHIoJ3BhcmVudF9jb3VudCcsIGNvdW50KTtcbiAgICAgICAgaWYgKGNvbGxlY3Rpb25MZW5ndGggPiAyKSB7XG4gICAgICAgICAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGFyZ2V0KS5wYXJlbnQoKS5yZW1vdmUoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvL2FkZCB3cmFwcGVyIGRpdiBhcm91bmQgdGhlIGF0dHJpYnV0ZXNcbiAgICBhZGRXcmFwcGVyKCkge1xuICAgICAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoJy5tdWx0aS1mb3JtJykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGhpcylcbiAgICAgICAgICAgICAgICAuZmluZCgnLmF0dHJpYnV0ZScpXG4gICAgICAgICAgICAgICAgLndyYXBBbGwoKDAsIGpxdWVyeV8xLmRlZmF1bHQpKCc8ZGl2IGNsYXNzPVwiZm9ybS1maWVsZC1ncm91cCBmbGV4IGZsZXgtd3JhcCBhdHRyaWJ1dGUtd3JhcHBlciBtYi00XCI+PC9kaXY+JykpO1xuICAgICAgICB9KTtcbiAgICAgICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKCcuc3ViZWxlbWVudCcpXG4gICAgICAgICAgICAuZmluZCgnLndyYXBwZWQtY2hpbGQtYm9keScpXG4gICAgICAgICAgICAuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGhpcylcbiAgICAgICAgICAgICAgICAuZmluZCgnLnN1Yi1hdHRyaWJ1dGUnKVxuICAgICAgICAgICAgICAgIC53cmFwQWxsKCgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnPGRpdiBjbGFzcz1cImZvcm0tZmllbGQtZ3JvdXAgZmxleCBmbGV4LXdyYXAgc3ViLWF0dHJpYnV0ZS13cmFwcGVyIG1iLTRcIj48L2Rpdj4nKSk7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBmb3JtRmllbGQgPSAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoJ2Zvcm0+LmZvcm0tZmllbGQnKTtcbiAgICAgICAgaWYgKGZvcm1GaWVsZC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBmb3JtRmllbGQud3JhcEFsbCgnPGRpdiBjbGFzcz1cImZvcm0tZmllbGQtZ3JvdXAtb3V0ZXIgZ3JpZCB4bDpncmlkLWNvbHMtMiBtYi02IC1teC0zIGdhcC15LTZcIj48L2Rpdj4nKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhZGRXcmFwcGVyT25BZGQodGFyZ2V0KSB7XG4gICAgICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0YXJnZXQpXG4gICAgICAgICAgICAucHJldigpXG4gICAgICAgICAgICAuZmluZCgnLm11bHRpLWZvcm0nKVxuICAgICAgICAgICAgLmxhc3QoKVxuICAgICAgICAgICAgLmZpbmQoJy5hdHRyaWJ1dGUnKVxuICAgICAgICAgICAgLndyYXBBbGwoKDAsIGpxdWVyeV8xLmRlZmF1bHQpKCc8ZGl2IGNsYXNzPVwiZm9ybS1maWVsZC1ncm91cCBncmlkIHhsOmdyaWQtY29scy0yIGF0dHJpYnV0ZS13cmFwcGVyIG1iLTRcIj48L2Rpdj4nKSk7XG4gICAgICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0YXJnZXQpXG4gICAgICAgICAgICAucHJldigpXG4gICAgICAgICAgICAuZmluZCgnLm11bHRpLWZvcm0nKVxuICAgICAgICAgICAgLmxhc3QoKVxuICAgICAgICAgICAgLmZpbmQoJy5zdWJlbGVtZW50JylcbiAgICAgICAgICAgIC5maW5kKCcud3JhcHBlZC1jaGlsZC1ib2R5JylcbiAgICAgICAgICAgIC5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0aGlzKVxuICAgICAgICAgICAgICAgIC5maW5kKCcuc3ViLWF0dHJpYnV0ZScpXG4gICAgICAgICAgICAgICAgLndyYXBBbGwoKDAsIGpxdWVyeV8xLmRlZmF1bHQpKCc8ZGl2IGNsYXNzPVwiZm9ybS1maWVsZC1ncm91cCBmbGV4IGZsZXgtd3JhcCBzdWItYXR0cmlidXRlLXdyYXBwZXIgbWItNFwiPjwvZGl2PicpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHRleHRBcmVhSGVpZ2h0KGV2KSB7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGV2LnRhcmdldDtcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gdGFyZ2V0LnNjcm9sbEhlaWdodDtcbiAgICAgICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRhcmdldCkuY3NzKCdoZWlnaHQnLCBoZWlnaHQpO1xuICAgIH1cbiAgICBhZGRUb0NvbGxlY3Rpb24oKSB7XG4gICAgICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnYm9keScpLm9uKCdjbGljaycsICcuYWRkX3RvX2NvbGxlY3Rpb24nLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGlmICgoMCwganF1ZXJ5XzEuZGVmYXVsdCkoZXZlbnQudGFyZ2V0KS5oYXNDbGFzcygnYWRkLWljb24nKSkge1xuICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KShldmVudC50YXJnZXQpXG4gICAgICAgICAgICAgICAgICAgIC5wYXJlbnQoJ2J1dHRvbicpXG4gICAgICAgICAgICAgICAgICAgIC50cmlnZ2VyKCdjbGljaycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGRGb3JtKGV2ZW50KTtcbiAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZURlbGV0ZVBhcmVudEJ1dHRvbnMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnLmFkZF90b19wYXJlbnQnKS5vbignY2xpY2snLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGlmICgoMCwganF1ZXJ5XzEuZGVmYXVsdCkoZXZlbnQudGFyZ2V0KS5oYXNDbGFzcygnYWRkLWljb24nKSkge1xuICAgICAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KShldmVudC50YXJnZXQpXG4gICAgICAgICAgICAgICAgICAgIC5wYXJlbnQoJ2J1dHRvbicpXG4gICAgICAgICAgICAgICAgICAgIC50cmlnZ2VyKCdjbGljaycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGRQYXJlbnRGb3JtKGV2ZW50KTtcbiAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZURlbGV0ZVBhcmVudEJ1dHRvbnMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGRlbGV0ZUNvbGxlY3Rpb24oKSB7XG4gICAgICAgIGNvbnN0IGRlbGV0ZUNvbmZpcm1hdGlvbiA9ICgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnLmRlbGV0ZS1jb25maXJtYXRpb24nKSwgY2FuY2VsUG9wdXAgPSAnLmNhbmNlbC1wb3B1cCcsIGRlbGV0ZUNvbmZpcm0gPSAnLmRlbGV0ZS1jb25maXJtJztcbiAgICAgICAgbGV0IGRlbGV0ZUluZGV4ID0ge30sIGNoaWxkT3JQYXJlbnQgPSAnJztcbiAgICAgICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKCdib2R5Jykub24oJ2NsaWNrJywgJy5kZWxldGUnLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGRlbGV0ZUNvbmZpcm1hdGlvbi5mYWRlSW4oKTtcbiAgICAgICAgICAgIGRlbGV0ZUluZGV4ID0gZXZlbnQ7XG4gICAgICAgICAgICBjaGlsZE9yUGFyZW50ID0gJ2NoaWxkJztcbiAgICAgICAgfSk7XG4gICAgICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnYm9keScpLm9uKCdjbGljaycsIGNhbmNlbFBvcHVwLCAoKSA9PiB7XG4gICAgICAgICAgICBkZWxldGVDb25maXJtYXRpb24uZmFkZU91dCgpO1xuICAgICAgICAgICAgZGVsZXRlSW5kZXggPSB7fTtcbiAgICAgICAgICAgIGNoaWxkT3JQYXJlbnQgPSAnJztcbiAgICAgICAgfSk7XG4gICAgICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnYm9keScpLm9uKCdjbGljaycsIGRlbGV0ZUNvbmZpcm0sICgpID0+IHtcbiAgICAgICAgICAgIGlmIChjaGlsZE9yUGFyZW50ID09PSAnY2hpbGQnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kZWxldGVGb3JtKGRlbGV0ZUluZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNoaWxkT3JQYXJlbnQgPT09ICdwYXJlbnQnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kZWxldGVQYXJlbnRGb3JtKGRlbGV0ZUluZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlbGV0ZUNvbmZpcm1hdGlvbi5mYWRlT3V0KCk7XG4gICAgICAgICAgICBkZWxldGVJbmRleCA9IHt9O1xuICAgICAgICAgICAgY2hpbGRPclBhcmVudCA9ICcnO1xuICAgICAgICB9KTtcbiAgICAgICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKCdib2R5Jykub24oJ21vdXNlZW50ZXInLCAnLmRlbGV0ZS1wYXJlbnQnLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXRzLWNvbW1lbnRcbiAgICAgICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICAgICAgY29uc3QgZGVsZXRlQnV0dG9uID0gKDAsIGpxdWVyeV8xLmRlZmF1bHQpKGV2ZW50LnRhcmdldCk7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10cy1jb21tZW50XG4gICAgICAgICAgICAvL0B0cy1pZ25vcmVcbiAgICAgICAgICAgIGNvbnN0IG11bHRpRm9ybSA9IGRlbGV0ZUJ1dHRvbi5jbG9zZXN0KCcubXVsdGktZm9ybSwgLndyYXBwZWQtY2hpbGQtYm9keScpO1xuICAgICAgICAgICAgbXVsdGlGb3JtLmNzcyh7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJyNGRkY4RjcnLFxuICAgICAgICAgICAgICAgIG91dGxpbmU6ICcycHggc29saWQgI0YxOUJBMCcsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnYm9keScpLm9uKCdtb3VzZWxlYXZlJywgJy5kZWxldGUtcGFyZW50JywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10cy1jb21tZW50XG4gICAgICAgICAgICAvL0B0cy1pZ25vcmVcbiAgICAgICAgICAgIGNvbnN0IGRlbGV0ZUJ1dHRvbiA9ICgwLCBqcXVlcnlfMS5kZWZhdWx0KShldmVudC50YXJnZXQpO1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHMtY29tbWVudFxuICAgICAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICAgICAgICBjb25zdCBtdWx0aUZvcm0gPSBkZWxldGVCdXR0b24uY2xvc2VzdCgnLm11bHRpLWZvcm0sIC53cmFwcGVkLWNoaWxkLWJvZHknKTtcbiAgICAgICAgICAgIG11bHRpRm9ybS5jc3Moe1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICcnLFxuICAgICAgICAgICAgICAgIG91dGxpbmU6ICcnLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoJ2JvZHknKS5vbignY2xpY2snLCAnLmRlbGV0ZS1wYXJlbnQnLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGRlbGV0ZUNvbmZpcm1hdGlvbi5mYWRlSW4oKTtcbiAgICAgICAgICAgIGRlbGV0ZUluZGV4ID0gZXZlbnQ7XG4gICAgICAgICAgICBjaGlsZE9yUGFyZW50ID0gJ3BhcmVudCc7XG4gICAgICAgIH0pO1xuICAgICAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoJy5zZWxlY3QyJykuc2VsZWN0Mih7XG4gICAgICAgICAgICBwbGFjZWhvbGRlcjogJ1NlbGVjdCBhbiBvcHRpb24nLFxuICAgICAgICAgICAgYWxsb3dDbGVhcjogdHJ1ZSxcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIHVwZGF0ZSBmb3JtYXQgb24gY2hhbmdlIG9mIGRvY3VtZW50IGxpbmtcbiAgICAgICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKCdib2R5Jykub24oJ2NoYW5nZScsICdpbnB1dFtpZCo9XCJbdXJsXVwiXScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIGNvbnN0IGZpbGVQYXRoID0gKChfYSA9ICgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0aGlzKS52YWwoKSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJycpLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICBjb25zdCBkb2N1bWVudCA9ICgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0aGlzKVxuICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZC1ncm91cCcpXG4gICAgICAgICAgICAgICAgLmZpbmQoJ2lucHV0W2lkKj1cIltkb2N1bWVudF1cIl0nKVxuICAgICAgICAgICAgICAgIC52YWwoKTtcbiAgICAgICAgICAgIGNvbnN0IHVybCA9IGAvbWltZXR5cGU/dXJsPSR7ZmlsZVBhdGh9JnR5cGU9dXJsYDtcbiAgICAgICAgICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0aGlzKS5jbG9zZXN0KCcuZm9ybS1maWVsZCcpLmZpbmQoJy50ZXh0LWRhbmdlcicpLnJlbW92ZSgpO1xuICAgICAgICAgICAgaWYgKGZpbGVQYXRoICE9PSAnJykge1xuICAgICAgICAgICAgICAgIGF4aW9zXzEuZGVmYXVsdC5nZXQodXJsKS50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5zdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmb3JtYXQgPSByZXNwb25zZS5kYXRhLmRhdGEubWltZXR5cGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGhpcylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQtZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5maW5kKCdzZWxlY3RbaWQqPVwiW2Zvcm1hdF1cIl0nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC52YWwoZm9ybWF0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50cmlnZ2VyKCdjaGFuZ2UnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0aGlzKS5jbG9zZXN0KCcuZm9ybS1maWVsZCcpLmZpbmQoJy50ZXh0LWRhbmdlcicpLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRoaXMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKFwiPGRpdiBjbGFzcz0ndGV4dC1kYW5nZXIgZXJyb3InPlwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZS5kYXRhLm1lc3NhZ2UgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8L2Rpdj4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0aGlzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZC1ncm91cCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZpbmQoJ3NlbGVjdFtpZCo9XCJbZm9ybWF0XVwiXScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnZhbCgnJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudHJpZ2dlcignY2hhbmdlJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRoaXMpXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQtZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmZpbmQoJ2lucHV0W2lkKj1cIltkb2N1bWVudF1cIl0nKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnZhbCgnJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC50cmlnZ2VyKCdjaGFuZ2UnKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKCFkb2N1bWVudCB8fCBkb2N1bWVudCA9PT0gJycpIHtcbiAgICAgICAgICAgICAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGhpcylcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoJ3NlbGVjdFtpZCo9XCJbZm9ybWF0XVwiXScpXG4gICAgICAgICAgICAgICAgICAgIC52YWwoJycpXG4gICAgICAgICAgICAgICAgICAgIC50cmlnZ2VyKCdjaGFuZ2UnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnYm9keScpLm9uKCdjaGFuZ2UnLCAnaW5wdXRbaWQqPVwiW2RvY3VtZW50XVwiXScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIGNvbnN0IGZpbGVQYXRoID0gKChfYSA9ICgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0aGlzKS52YWwoKSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJycpLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICBjb25zdCB1cmwgPSBgL21pbWV0eXBlP3VybD0ke2ZpbGVQYXRofSYmdHlwZT1kb2N1bWVudGA7XG4gICAgICAgICAgICBjb25zdCBmaWxlVXJsID0gKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRoaXMpXG4gICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAuZmluZCgnaW5wdXRbaWQqPVwiW3VybF1cIl0nKVxuICAgICAgICAgICAgICAgIC52YWwoKTtcbiAgICAgICAgICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0aGlzKS5jbG9zZXN0KCcuZm9ybS1maWVsZCcpLmZpbmQoJy50ZXh0LWRhbmdlcicpLnJlbW92ZSgpO1xuICAgICAgICAgICAgaWYgKGZpbGVQYXRoICE9PSAnJykge1xuICAgICAgICAgICAgICAgIGF4aW9zXzEuZGVmYXVsdC5nZXQodXJsKS50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5zdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmb3JtYXQgPSByZXNwb25zZS5kYXRhLmRhdGEubWltZXR5cGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGhpcylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQtZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5maW5kKCdzZWxlY3RbaWQqPVwiW2Zvcm1hdF1cIl0nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC52YWwoZm9ybWF0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50cmlnZ2VyKCdjaGFuZ2UnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0aGlzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZC1ncm91cCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZpbmQoJ3NlbGVjdFtpZCo9XCJbZm9ybWF0XVwiXScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnZhbCgnJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudHJpZ2dlcignY2hhbmdlJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGhpcylcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoJ2lucHV0W2lkKj1cIlt1cmxdXCJdJylcbiAgICAgICAgICAgICAgICAgICAgLnZhbCgnJylcbiAgICAgICAgICAgICAgICAgICAgLnRyaWdnZXIoJ2NoYW5nZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoIWZpbGVVcmwgfHwgZmlsZVVybCA9PT0gJycpIHtcbiAgICAgICAgICAgICAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGhpcylcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoJ3NlbGVjdFtpZCo9XCJbZm9ybWF0XVwiXScpXG4gICAgICAgICAgICAgICAgICAgIC52YWwoJycpXG4gICAgICAgICAgICAgICAgICAgIC50cmlnZ2VyKCdjaGFuZ2UnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGhhbmRsZURlbGV0ZVBhcmVudEJ1dHRvbnMoKSB7XG4gICAgICAgIGNvbnN0IGRlbGV0ZUJ1dHRvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZGVsZXRlLXBhcmVudC1zZWxlY3RvcicpO1xuICAgICAgICBjb25zdCBjaGFuZ2VEZWxldGVCdXR0b25Jbm5lckh0bWwgPSAoYnV0dG9uKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpbml0aWFsVGV4dCA9IGVzY2FwZUh0bWwoYnV0dG9uLnRleHRDb250ZW50KTtcbiAgICAgICAgICAgIGJ1dHRvbi5pbm5lckhUTUwgPSBgXG4gICAgICAgICA8c3ZnIGNsYXNzPVwidGV4dC1bMXJlbV0gbWItMC41XCIgdmlld0JveD1cIjAgMCAxNiAxNlwiIGZpbGw9XCJub25lXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPlxuICAgICAgICAgICA8cGF0aCBkPVwiTTYuNjY2NjcgMTJDNi44NDM0OCAxMiA3LjAxMzA1IDExLjkyOTggNy4xMzgwNyAxMS44MDQ3QzcuMjYzMSAxMS42Nzk3IDcuMzMzMzMgMTEuNTEwMSA3LjMzMzMzIDExLjMzMzNWNy4zMzMzNEM3LjMzMzMzIDcuMTU2NTMgNy4yNjMxIDYuOTg2OTYgNy4xMzgwNyA2Ljg2MTkzQzcuMDEzMDUgNi43MzY5MSA2Ljg0MzQ4IDYuNjY2NjcgNi42NjY2NyA2LjY2NjY3QzYuNDg5ODYgNi42NjY2NyA2LjMyMDI5IDYuNzM2OTEgNi4xOTUyNiA2Ljg2MTkzQzYuMDcwMjQgNi45ODY5NiA2IDcuMTU2NTMgNiA3LjMzMzM0VjExLjMzMzNDNiAxMS41MTAxIDYuMDcwMjQgMTEuNjc5NyA2LjE5NTI2IDExLjgwNDdDNi4zMjAyOSAxMS45Mjk4IDYuNDg5ODYgMTIgNi42NjY2NyAxMlpNMTMuMzMzMyA0SDEwLjY2NjdWMy4zMzMzNEMxMC42NjY3IDIuODAyOSAxMC40NTYgMi4yOTQyIDEwLjA4MDkgMS45MTkxMkM5LjcwNTgxIDEuNTQ0MDUgOS4xOTcxIDEuMzMzMzQgOC42NjY2NyAxLjMzMzM0SDcuMzMzMzNDNi44MDI5IDEuMzMzMzQgNi4yOTQxOSAxLjU0NDA1IDUuOTE5MTIgMS45MTkxMkM1LjU0NDA1IDIuMjk0MiA1LjMzMzMzIDIuODAyOSA1LjMzMzMzIDMuMzMzMzRWNEgyLjY2NjY3QzIuNDg5ODYgNCAyLjMyMDI5IDQuMDcwMjQgMi4xOTUyNiA0LjE5NTI2QzIuMDcwMjQgNC4zMjAyOSAyIDQuNDg5ODYgMiA0LjY2NjY3QzIgNC44NDM0OCAyLjA3MDI0IDUuMDEzMDUgMi4xOTUyNiA1LjEzODA3QzIuMzIwMjkgNS4yNjMxIDIuNDg5ODYgNS4zMzMzNCAyLjY2NjY3IDUuMzMzMzRIMy4zMzMzM1YxMi42NjY3QzMuMzMzMzMgMTMuMTk3MSAzLjU0NDA1IDEzLjcwNTggMy45MTkxMiAxNC4wODA5QzQuMjk0MTkgMTQuNDU2IDQuODAyOSAxNC42NjY3IDUuMzMzMzMgMTQuNjY2N0gxMC42NjY3QzExLjE5NzEgMTQuNjY2NyAxMS43MDU4IDE0LjQ1NiAxMi4wODA5IDE0LjA4MDlDMTIuNDU2IDEzLjcwNTggMTIuNjY2NyAxMy4xOTcxIDEyLjY2NjcgMTIuNjY2N1Y1LjMzMzM0SDEzLjMzMzNDMTMuNTEwMSA1LjMzMzM0IDEzLjY3OTcgNS4yNjMxIDEzLjgwNDcgNS4xMzgwN0MxMy45Mjk4IDUuMDEzMDUgMTQgNC44NDM0OCAxNCA0LjY2NjY3QzE0IDQuNDg5ODYgMTMuOTI5OCA0LjMyMDI5IDEzLjgwNDcgNC4xOTUyNkMxMy42Nzk3IDQuMDcwMjQgMTMuNTEwMSA0IDEzLjMzMzMgNFpNNi42NjY2NyAzLjMzMzM0QzYuNjY2NjcgMy4xNTY1MiA2LjczNjkgMi45ODY5NiA2Ljg2MTkzIDIuODYxOTNDNi45ODY5NSAyLjczNjkxIDcuMTU2NTIgMi42NjY2NyA3LjMzMzMzIDIuNjY2NjdIOC42NjY2N0M4Ljg0MzQ4IDIuNjY2NjcgOS4wMTMwNSAyLjczNjkxIDkuMTM4MDcgMi44NjE5M0M5LjI2MzEgMi45ODY5NiA5LjMzMzMzIDMuMTU2NTIgOS4zMzMzMyAzLjMzMzM0VjRINi42NjY2N1YzLjMzMzM0Wk0xMS4zMzMzIDEyLjY2NjdDMTEuMzMzMyAxMi44NDM1IDExLjI2MzEgMTMuMDEzMSAxMS4xMzgxIDEzLjEzODFDMTEuMDEzIDEzLjI2MzEgMTAuODQzNSAxMy4zMzMzIDEwLjY2NjcgMTMuMzMzM0g1LjMzMzMzQzUuMTU2NTIgMTMuMzMzMyA0Ljk4Njk1IDEzLjI2MzEgNC44NjE5MyAxMy4xMzgxQzQuNzM2OSAxMy4wMTMxIDQuNjY2NjcgMTIuODQzNSA0LjY2NjY3IDEyLjY2NjdWNS4zMzMzNEgxMS4zMzMzVjEyLjY2NjdaTTkuMzMzMzMgMTJDOS41MTAxNCAxMiA5LjY3OTcxIDExLjkyOTggOS44MDQ3NCAxMS44MDQ3QzkuOTI5NzYgMTEuNjc5NyAxMCAxMS41MTAxIDEwIDExLjMzMzNWNy4zMzMzNEMxMCA3LjE1NjUzIDkuOTI5NzYgNi45ODY5NiA5LjgwNDc0IDYuODYxOTNDOS42Nzk3MSA2LjczNjkxIDkuNTEwMTQgNi42NjY2NyA5LjMzMzMzIDYuNjY2NjdDOS4xNTY1MiA2LjY2NjY3IDguOTg2OTUgNi43MzY5MSA4Ljg2MTkzIDYuODYxOTNDOC43MzY5MSA2Ljk4Njk2IDguNjY2NjcgNy4xNTY1MyA4LjY2NjY3IDcuMzMzMzRWMTEuMzMzM0M4LjY2NjY3IDExLjUxMDEgOC43MzY5MSAxMS42Nzk3IDguODYxOTMgMTEuODA0N0M4Ljk4Njk1IDExLjkyOTggOS4xNTY1MiAxMiA5LjMzMzMzIDEyWlwiIGZpbGw9XCIjRTM0RDVCXCIvPlxuICAgICAgICAgPC9zdmc+XG4gICAgICAgICAke2luaXRpYWxUZXh0fVxuICAgICAgYDtcbiAgICAgICAgfTtcbiAgICAgICAgZGVsZXRlQnV0dG9ucy5mb3JFYWNoKChidXR0b24pID0+IHtcbiAgICAgICAgICAgIGNoYW5nZURlbGV0ZUJ1dHRvbklubmVySHRtbChidXR0b24pO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4oMCwganF1ZXJ5XzEuZGVmYXVsdCkoZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IGZvcm1CdWlsZGVyID0gbmV3IEZvcm1CdWlsZGVyKCk7XG4gICAgZm9ybUJ1aWxkZXIuYWRkV3JhcHBlcigpO1xuICAgIGR5bmFtaWNGaWVsZC5oaWRlU2hvd0Zvcm1GaWVsZHMoKTtcbiAgICBkeW5hbWljRmllbGQudXBkYXRlQWN0aXZpdHlJZGVudGlmaWVyKCk7XG4gICAgZm9ybUJ1aWxkZXIuYWRkVG9Db2xsZWN0aW9uKCk7XG4gICAgZm9ybUJ1aWxkZXIuZGVsZXRlQ29sbGVjdGlvbigpO1xuICAgIC8qKlxuICAgICAqIFRleHQgYXJlYSBoZWlnaHQgb24gdHlwaW5nXG4gICAgICovXG4gICAgY29uc3QgdGV4dEFyZWFUYXJnZXQgPSAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoJ3RleHRhcmVhLmZvcm1fX2lucHV0Jyk7XG4gICAgaWYgKHRleHRBcmVhVGFyZ2V0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKCdib2R5Jykub24oJ2lucHV0JywgJ3RleHRhcmVhLmZvcm1fX2lucHV0JywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBmb3JtQnVpbGRlci50ZXh0QXJlYUhlaWdodChldmVudCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoJ2JvZHknKS5vbignc2VsZWN0MjpvcGVuJywgJy5zZWxlY3QyJywgKCkgPT4ge1xuICAgICAgICBjb25zdCBzZWxlY3Rfc2VhcmNoID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNlbGVjdDItc2VhcmNoX19maWVsZCcpO1xuICAgICAgICBpZiAoc2VsZWN0X3NlYXJjaCkge1xuICAgICAgICAgICAgc2VsZWN0X3NlYXJjaC5mb2N1cygpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgLyoqXG4gICAgICogY2hlY2tzIHJlZ2lzdHJhdGlvbiBhZ2VuY3ksIGNvdW50cnkgYW5kIHJlZ2lzdHJhdGlvbiBudW1iZXIgdG8gZGVkdWNlIGlkZW50aWZpZXJcbiAgICAgKi9cbiAgICB1cGRhdGVSZWdpc3RyYXRpb25BZ2VuY3koKDAsIGpxdWVyeV8xLmRlZmF1bHQpKCcjb3JnYW5pemF0aW9uX2NvdW50cnknKSk7XG4gICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKCcjb3JnYW5pc2F0aW9uX2lkZW50aWZpZXInKS5hdHRyKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpO1xuICAgIGZ1bmN0aW9uIHVwZGF0ZVJlZ2lzdHJhdGlvbkFnZW5jeShjb3VudHJ5KSB7XG4gICAgICAgIGNvbnN0IGVuZHBvaW50ID0gY291bnRyeS52YWwoKVxuICAgICAgICAgICAgPyAnL29yZ2FuaXNhdGlvbi9hZ2VuY3kvJyArIGNvdW50cnkudmFsKClcbiAgICAgICAgICAgIDogJy9vcmdhbmlzYXRpb24vYWdlbmN5Lyc7XG4gICAgICAgIGpxdWVyeV8xLmRlZmF1bHQuYWpheCh7IHVybDogZW5kcG9pbnQgfSkudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRfdmFsID0gKF9hID0gKDAsIGpxdWVyeV8xLmRlZmF1bHQpKCcjb3JnYW5pemF0aW9uX3JlZ2lzdHJhdGlvbl9hZ2VuY3knKS52YWwoKSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJyc7XG4gICAgICAgICAgICBsZXQgdmFsID0gZmFsc2U7XG4gICAgICAgICAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoJyNvcmdhbml6YXRpb25fcmVnaXN0cmF0aW9uX2FnZW5jeScpLmVtcHR5KCk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGRhdGEgaW4gcmVzcG9uc2UuZGF0YSkge1xuICAgICAgICAgICAgICAgIGlmIChkYXRhID09PSBjdXJyZW50X3ZhbCkge1xuICAgICAgICAgICAgICAgICAgICB2YWwgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoJyNvcmdhbml6YXRpb25fcmVnaXN0cmF0aW9uX2FnZW5jeScpXG4gICAgICAgICAgICAgICAgICAgIC5hcHBlbmQobmV3IE9wdGlvbihyZXNwb25zZS5kYXRhW2RhdGFdLCBkYXRhLCB0cnVlLCB0cnVlKSlcbiAgICAgICAgICAgICAgICAgICAgLnZhbCgnJylcbiAgICAgICAgICAgICAgICAgICAgLnRyaWdnZXIoJ2NoYW5nZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKCcjb3JnYW5pemF0aW9uX3JlZ2lzdHJhdGlvbl9hZ2VuY3knKVxuICAgICAgICAgICAgICAgIC52YWwodmFsID8gY3VycmVudF92YWwgOiAnJylcbiAgICAgICAgICAgICAgICAudHJpZ2dlcignY2hhbmdlJyk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoJ2JvZHknKS5vbignc2VsZWN0MjpzZWxlY3QnLCAnI29yZ2FuaXphdGlvbl9jb3VudHJ5JywgZnVuY3Rpb24gKCkge1xuICAgICAgICB1cGRhdGVSZWdpc3RyYXRpb25BZ2VuY3koKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRoaXMpKTtcbiAgICB9KTtcbiAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoJ2JvZHknKS5vbignc2VsZWN0MjpjbGVhcicsICcjb3JnYW5pemF0aW9uX2NvdW50cnknLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHVwZGF0ZVJlZ2lzdHJhdGlvbkFnZW5jeSgoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGhpcykpO1xuICAgIH0pO1xuICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnYm9keScpLm9uKCdzZWxlY3QyOnNlbGVjdCcsICcjb3JnYW5pemF0aW9uX3JlZ2lzdHJhdGlvbl9hZ2VuY3knLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnN0IGlkZW50aWZpZXIgPSAoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGhpcykudmFsKCkgKyAnLScgKyAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoJyNyZWdpc3RyYXRpb25fbnVtYmVyJykudmFsKCk7XG4gICAgICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnI29yZ2FuaXNhdGlvbl9pZGVudGlmaWVyJykudmFsKGlkZW50aWZpZXIpO1xuICAgIH0pO1xuICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnYm9keScpLm9uKCdzZWxlY3QyOmNsZWFyJywgJyNvcmdhbml6YXRpb25fcmVnaXN0cmF0aW9uX2FnZW5jeScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3QgaWRlbnRpZmllciA9ICctJyArICgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnI3JlZ2lzdHJhdGlvbl9udW1iZXInKS52YWwoKTtcbiAgICAgICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKCcjb3JnYW5pc2F0aW9uX2lkZW50aWZpZXInKS52YWwoaWRlbnRpZmllcik7XG4gICAgfSk7XG4gICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKCdib2R5Jykub24oJ2tleXVwJywgJyNyZWdpc3RyYXRpb25fbnVtYmVyJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zdCBpZGVudGlmaWVyID0gKDAsIGpxdWVyeV8xLmRlZmF1bHQpKCcjb3JnYW5pemF0aW9uX3JlZ2lzdHJhdGlvbl9hZ2VuY3knKS52YWwoKSArICctJyArICgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0aGlzKS52YWwoKTtcbiAgICAgICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKCcjb3JnYW5pc2F0aW9uX2lkZW50aWZpZXInKS52YWwoaWRlbnRpZmllcik7XG4gICAgfSk7XG4gICAgLy8gYWRkIGNsYXNzIHRvIHRpdGxlIG9mIGNvbGxlY3Rpb24gd2hlbiB2YWxpZGF0aW9uIGVycm9yIG9jY3VycyBvbiBjb2xsZWN0aW9uIGxldmVsXG4gICAgY29uc3Qgc3ViZWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zdWJlbGVtZW50Jyk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdWJlbGVtZW50Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHRpdGxlID0gc3ViZWxlbWVudFtpXS5xdWVyeVNlbGVjdG9yKCcuY29udHJvbC1sYWJlbCcpO1xuICAgICAgICBjb25zdCBlcnJvckNvbnRhaW5lciA9IHN1YmVsZW1lbnRbaV0ucXVlcnlTZWxlY3RvcignLmNvbGxlY3Rpb25fZXJyb3InKTtcbiAgICAgICAgY29uc3QgY2hpbGRDb3VudCA9IGVycm9yQ29udGFpbmVyID09PSBudWxsIHx8IGVycm9yQ29udGFpbmVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBlcnJvckNvbnRhaW5lci5jaGlsZEVsZW1lbnRDb3VudDtcbiAgICAgICAgaWYgKGNoaWxkQ291bnQgJiYgY2hpbGRDb3VudCA+IDApIHtcbiAgICAgICAgICAgIHRpdGxlID09PSBudWxsIHx8IHRpdGxlID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0aXRsZS5jbGFzc0xpc3QuYWRkKCdlcnJvci10aXRsZScpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIEFkZGluZyBjdXJzb3Igbm90IGFsbG93ZWQgdG8gPHNlbGVjdD4gd2hlcmUgZWxlbWVudEpzb25TY2hlbWEgcmVhZF9vbmx5IDogdHJ1ZVxuICAgIGNvbnN0IHJlYWRPbmx5U2VsZWN0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3NlbGVjdC5jdXJzb3Itbm90LWFsbG93ZWQnKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlYWRPbmx5U2VsZWN0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBzZWxlY3QgPSByZWFkT25seVNlbGVjdHNbaV07XG4gICAgICAgIGNvbnN0IHNlbGVjdEVsZW1lbnRQYXJlbnRXcmFwcGVyID0gc2VsZWN0Lm5leHRTaWJsaW5nO1xuICAgICAgICBjb25zdCBzZWxlY3RFbGVtZW50UGFyZW50ID0gc2VsZWN0RWxlbWVudFBhcmVudFdyYXBwZXIgPT09IG51bGwgfHwgc2VsZWN0RWxlbWVudFBhcmVudFdyYXBwZXIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNlbGVjdEVsZW1lbnRQYXJlbnRXcmFwcGVyLmZpcnN0Q2hpbGQ7XG4gICAgICAgIGNvbnN0IHNlbGVjdEVsZW1lbnQgPSBzZWxlY3RFbGVtZW50UGFyZW50ID09PSBudWxsIHx8IHNlbGVjdEVsZW1lbnRQYXJlbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNlbGVjdEVsZW1lbnRQYXJlbnQuZmlyc3RDaGlsZDtcbiAgICAgICAgaWYgKHNlbGVjdEVsZW1lbnQpIHtcbiAgICAgICAgICAgIHNlbGVjdEVsZW1lbnQuc3R5bGUuY3Vyc29yID0gJ25vdC1hbGxvd2VkJztcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBkZWxldGVCdXR0b25zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmRlbGV0ZS1wYXJlbnQtc2VsZWN0b3InKTtcbiAgICBmdW5jdGlvbiBjaGFuZ2VEZWxldGVCdXR0b25Jbm5lckh0bWwoYnV0dG9uKSB7XG4gICAgICAgIGNvbnN0IGluaXRpYWxUZXh0ID0gZXNjYXBlSHRtbChidXR0b24udGV4dENvbnRlbnQpO1xuICAgICAgICBidXR0b24uaW5uZXJIVE1MID0gYFxuICAgICAgPHN2ZyB3aWR0aD1cIjE2XCIgaGVpZ2h0PVwiMTZcIiB2aWV3Qm94PVwiMCAwIDE2IDE2XCIgZmlsbD1cIm5vbmVcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+XG4gICAgICAgIDxwYXRoIGQ9XCJNNi42NjY2NyAxMkM2Ljg0MzQ4IDEyIDcuMDEzMDUgMTEuOTI5OCA3LjEzODA3IDExLjgwNDdDNy4yNjMxIDExLjY3OTcgNy4zMzMzMyAxMS41MTAxIDcuMzMzMzMgMTEuMzMzM1Y3LjMzMzM0QzcuMzMzMzMgNy4xNTY1MyA3LjI2MzEgNi45ODY5NiA3LjEzODA3IDYuODYxOTNDNy4wMTMwNSA2LjczNjkxIDYuODQzNDggNi42NjY2NyA2LjY2NjY3IDYuNjY2NjdDNi40ODk4NiA2LjY2NjY3IDYuMzIwMjkgNi43MzY5MSA2LjE5NTI2IDYuODYxOTNDNi4wNzAyNCA2Ljk4Njk2IDYgNy4xNTY1MyA2IDcuMzMzMzRWMTEuMzMzM0M2IDExLjUxMDEgNi4wNzAyNCAxMS42Nzk3IDYuMTk1MjYgMTEuODA0N0M2LjMyMDI5IDExLjkyOTggNi40ODk4NiAxMiA2LjY2NjY3IDEyWk0xMy4zMzMzIDRIMTAuNjY2N1YzLjMzMzM0QzEwLjY2NjcgMi44MDI5IDEwLjQ1NiAyLjI5NDIgMTAuMDgwOSAxLjkxOTEyQzkuNzA1ODEgMS41NDQwNSA5LjE5NzEgMS4zMzMzNCA4LjY2NjY3IDEuMzMzMzRINy4zMzMzM0M2LjgwMjkgMS4zMzMzNCA2LjI5NDE5IDEuNTQ0MDUgNS45MTkxMiAxLjkxOTEyQzUuNTQ0MDUgMi4yOTQyIDUuMzMzMzMgMi44MDI5IDUuMzMzMzMgMy4zMzMzNFY0SDIuNjY2NjdDMi40ODk4NiA0IDIuMzIwMjkgNC4wNzAyNCAyLjE5NTI2IDQuMTk1MjZDMi4wNzAyNCA0LjMyMDI5IDIgNC40ODk4NiAyIDQuNjY2NjdDMiA0Ljg0MzQ4IDIuMDcwMjQgNS4wMTMwNSAyLjE5NTI2IDUuMTM4MDdDMi4zMjAyOSA1LjI2MzEgMi40ODk4NiA1LjMzMzM0IDIuNjY2NjcgNS4zMzMzNEgzLjMzMzMzVjEyLjY2NjdDMy4zMzMzMyAxMy4xOTcxIDMuNTQ0MDUgMTMuNzA1OCAzLjkxOTEyIDE0LjA4MDlDNC4yOTQxOSAxNC40NTYgNC44MDI5IDE0LjY2NjcgNS4zMzMzMyAxNC42NjY3SDEwLjY2NjdDMTEuMTk3MSAxNC42NjY3IDExLjcwNTggMTQuNDU2IDEyLjA4MDkgMTQuMDgwOUMxMi40NTYgMTMuNzA1OCAxMi42NjY3IDEzLjE5NzEgMTIuNjY2NyAxMi42NjY3VjUuMzMzMzRIMTMuMzMzM0MxMy41MTAxIDUuMzMzMzQgMTMuNjc5NyA1LjI2MzEgMTMuODA0NyA1LjEzODA3QzEzLjkyOTggNS4wMTMwNSAxNCA0Ljg0MzQ4IDE0IDQuNjY2NjdDMTQgNC40ODk4NiAxMy45Mjk4IDQuMzIwMjkgMTMuODA0NyA0LjE5NTI2QzEzLjY3OTcgNC4wNzAyNCAxMy41MTAxIDQgMTMuMzMzMyA0Wk02LjY2NjY3IDMuMzMzMzRDNi42NjY2NyAzLjE1NjUyIDYuNzM2OSAyLjk4Njk2IDYuODYxOTMgMi44NjE5M0M2Ljk4Njk1IDIuNzM2OTEgNy4xNTY1MiAyLjY2NjY3IDcuMzMzMzMgMi42NjY2N0g4LjY2NjY3QzguODQzNDggMi42NjY2NyA5LjAxMzA1IDIuNzM2OTEgOS4xMzgwNyAyLjg2MTkzQzkuMjYzMSAyLjk4Njk2IDkuMzMzMzMgMy4xNTY1MiA5LjMzMzMzIDMuMzMzMzRWNEg2LjY2NjY3VjMuMzMzMzRaTTExLjMzMzMgMTIuNjY2N0MxMS4zMzMzIDEyLjg0MzUgMTEuMjYzMSAxMy4wMTMxIDExLjEzODEgMTMuMTM4MUMxMS4wMTMgMTMuMjYzMSAxMC44NDM1IDEzLjMzMzMgMTAuNjY2NyAxMy4zMzMzSDUuMzMzMzNDNS4xNTY1MiAxMy4zMzMzIDQuOTg2OTUgMTMuMjYzMSA0Ljg2MTkzIDEzLjEzODFDNC43MzY5IDEzLjAxMzEgNC42NjY2NyAxMi44NDM1IDQuNjY2NjcgMTIuNjY2N1Y1LjMzMzM0SDExLjMzMzNWMTIuNjY2N1pNOS4zMzMzMyAxMkM5LjUxMDE0IDEyIDkuNjc5NzEgMTEuOTI5OCA5LjgwNDc0IDExLjgwNDdDOS45Mjk3NiAxMS42Nzk3IDEwIDExLjUxMDEgMTAgMTEuMzMzM1Y3LjMzMzM0QzEwIDcuMTU2NTMgOS45Mjk3NiA2Ljk4Njk2IDkuODA0NzQgNi44NjE5M0M5LjY3OTcxIDYuNzM2OTEgOS41MTAxNCA2LjY2NjY3IDkuMzMzMzMgNi42NjY2N0M5LjE1NjUyIDYuNjY2NjcgOC45ODY5NSA2LjczNjkxIDguODYxOTMgNi44NjE5M0M4LjczNjkxIDYuOTg2OTYgOC42NjY2NyA3LjE1NjUzIDguNjY2NjcgNy4zMzMzNFYxMS4zMzMzQzguNjY2NjcgMTEuNTEwMSA4LjczNjkxIDExLjY3OTcgOC44NjE5MyAxMS44MDQ3QzguOTg2OTUgMTEuOTI5OCA5LjE1NjUyIDEyIDkuMzMzMzMgMTJaXCIgZmlsbD1cIiNFMzRENUJcIi8+XG4gICAgICA8L3N2Zz5cbiAgICAgICR7aW5pdGlhbFRleHR9YDtcbiAgICB9XG4gICAgZGVsZXRlQnV0dG9ucy5mb3JFYWNoKChidXR0b24pID0+IGNoYW5nZURlbGV0ZUJ1dHRvbklubmVySHRtbChidXR0b24pKTtcbiAgICBjb25zdCBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKChtdXRhdGlvbnNMaXN0KSA9PiB7XG4gICAgICAgIG11dGF0aW9uc0xpc3QuZm9yRWFjaCgobXV0YXRpb24pID0+IHtcbiAgICAgICAgICAgIGlmIChtdXRhdGlvbi5hZGRlZE5vZGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBtdXRhdGlvbi5hZGRlZE5vZGVzLmZvckVhY2goKG5vZGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUgaW5zdGFuY2VvZiBFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobm9kZS5tYXRjaGVzKCcuZGVsZXRlLWl0ZW0tc2VsZWN0b3InKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZURlbGV0ZUJ1dHRvbklubmVySHRtbChub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld0RlbGV0ZUJ1dHRvbnMgPSBub2RlLnF1ZXJ5U2VsZWN0b3JBbGwoJy5kZWxldGUtaXRlbS1zZWxlY3RvcicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0RlbGV0ZUJ1dHRvbnMuZm9yRWFjaCgoYnV0dG9uKSA9PiBjaGFuZ2VEZWxldGVCdXR0b25Jbm5lckh0bWwoYnV0dG9uKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgb2JzZXJ2ZXIub2JzZXJ2ZShkb2N1bWVudC5ib2R5LCB7XG4gICAgICAgIGNoaWxkTGlzdDogdHJ1ZSxcbiAgICAgICAgc3VidHJlZTogdHJ1ZSxcbiAgICB9KTtcbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGRvZXMgdHdvIG1haW4gdGhpbmdzOlxuICAgICAqXG4gICAgICogMS4gQWRkcyBhIGNsaWNrIGV2ZW50IGxpc3RlbmVyIHRvIHRoZSBidXR0b24gdG8gY29udHJvbCB0aGUgY29sbGFwc2libGUgZmxvdzpcbiAgICAgKiAgICAtIEl0IGZpbmRzIHRoZSBjbG9zZXN0IDxsYWJlbD4gZWxlbWVudCByZWxhdGVkIHRvIHRoZSBidXR0b24uXG4gICAgICogICAgLSBXaXRoaW4gdGhhdCA8bGFiZWw+LCBpdCBsb29rcyBmb3IgYW4gZWxlbWVudCB3aXRoIHRoZSBjbGFzcyAnb3B0aW9uYWwtdGV4dCcuIElmIGl0IGZpbmRzICdvcHRpb25hbC10ZXh0JywgaXQgdG9nZ2xlcyBob3cgdGhhdCB0ZXh0IGlzIGRpc3BsYXllZCAoZWl0aGVyIHdpdGggYnJhY2tldHMgb3IgYW4gaWNvbikuXG4gICAgICogICAgLSBJdCBhbHNvIGxvY2F0ZXMgdGhlIG5lYXJlc3QgcGFyZW50IGVsZW1lbnQgd2l0aCB0aGUgY2xhc3NlcyAnc3ViZWxlbWVudCByb3VuZGVkLXQtc20nLiBJZiB0aGF0IHBhcmVudCBzdWJlbGVtZW50IGV4aXN0cywgaXQgdG9nZ2xlcyBpdHMgc3RhdGUgdG8gZWl0aGVyIGNvbGxhcHNlIG9yIGV4cGFuZCB0aGUgZm9ybSBzZWN0aW9uLlxuICAgICAqICAgIC0gRmluYWxseSwgaXQgcm90YXRlcyB0aGUgY29sbGFwc2UgYnV0dG9uIGVhY2ggdGltZSBpdOKAmXMgY2xpY2tlZC5cbiAgICAgKlxuICAgICAqIDIuIEl0IHRyaWdnZXJzIHRoZSBidXR0b24gY2xpY2sgZXZlbnQgaWYgdGhlIHN1YmVsZW1lbnQgaXMgb3B0aW9uYWwgdXNpbmcgdGhlIGZsYWc6IHRoaXNCdXR0b25CZWxvbmdzVG9PcHRpb25hbEZvcm0uXG4gICAgICogICAgVGhpcyBlbnN1cmVzIG9wdGlvbmFsIGZvcm1zIHN0YXJ0IG9mZiBjb2xsYXBzZWQgYnkgZGVmYXVsdCB3aGVuIHJlbmRlcmVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIGJ1dHRvbiAtIFRoZSBidXR0b24gZWxlbWVudCB0aGF0IG1hbmFnZXMgdGhlIGNvbGxhcHNpYmxlIGZvcm0gc2VjdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhdHRhY2hDb2xsYXBzYWJsZUJ1dHRvbkV2ZW50cyhidXR0b24pIHtcbiAgICAgICAgY29uc3QgbGFiZWwgPSBnZXRDbG9zZXN0TGFiZWxEb20oYnV0dG9uKTtcbiAgICAgICAgY29uc3Qgb3B0aW9uYWxMYWJlbCA9IGxhYmVsID8gZ2V0T3B0aW9uYWxUZXh0RG9tKGxhYmVsKSA6IG51bGw7XG4gICAgICAgIGNvbnN0IHN1YmVsZW1lbnQgPSBsYWJlbCA/IGdldENsb3Nlc3RQYXJlbnRTdWJlbGVtZW50RG9tKGxhYmVsKSA6IG51bGw7XG4gICAgICAgIGNvbnN0IHRoaXNCdXR0b25CZWxvbmdzVG9PcHRpb25hbEZvcm0gPSBvcHRpb25hbExhYmVsICE9PSBudWxsO1xuICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSAqLyBjb25zb2xlLmxvZyguLi5vb19vbyhgNzM2ODgyMzI4XzY0MF80XzY0MF8yN180YCwgc3ViZWxlbWVudCkpO1xuICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICBpZiAob3B0aW9uYWxMYWJlbCkge1xuICAgICAgICAgICAgICAgIHRvZ2dsZU9wdGlvbmFsVGV4dChvcHRpb25hbExhYmVsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdWJlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgdG9nZ2xlQWNjb3JkaW9uSXRlbXMoc3ViZWxlbWVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBidXR0b24uY2xhc3NMaXN0LnRvZ2dsZSgncm90YXRlLTE4MCcpO1xuICAgICAgICB9KTtcbiAgICAgICAgLyogZXNsaW50LWRpc2FibGUgKi8gY29uc29sZS5sb2coLi4ub29fb28oYDczNjg4MjMyOF82NTRfNF82NTdfNV80YCwgdGhpc0J1dHRvbkJlbG9uZ3NUb09wdGlvbmFsRm9ybSwgIWVycm9yTWVzc2FnZUV4aXN0cyhzdWJlbGVtZW50KSkpO1xuICAgICAgICBpZiAodGhpc0J1dHRvbkJlbG9uZ3NUb09wdGlvbmFsRm9ybSAmJiAhZXJyb3JNZXNzYWdlRXhpc3RzKHN1YmVsZW1lbnQpKSB7XG4gICAgICAgICAgICBidXR0b24uY2xpY2soKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiBhbnkgZXJyb3IgbWVzc2FnZSBleGlzdHMgaW4gdGhlIHN1YmVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc3ViZWxlbWVudFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVycm9yTWVzc2FnZUV4aXN0cyhzdWJlbGVtZW50KSB7XG4gICAgICAgIGNvbnN0IGVycm9yRGl2cyA9IHN1YmVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmVycm9yJyk7XG4gICAgICAgIGNvbnN0IGVycm9yVGV4dHMgPSBzdWJlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy50ZXh0LWRhbmdlci1lcnJvcicpO1xuICAgICAgICBmb3IgKGNvbnN0IGRpdiBvZiBlcnJvckRpdnMpIHtcbiAgICAgICAgICAgIGlmIChkaXYudGV4dENvbnRlbnQudHJpbSgpICE9PSAnJykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgZGl2IG9mIGVycm9yVGV4dHMpIHtcbiAgICAgICAgICAgIGlmIChkaXYudGV4dENvbnRlbnQudHJpbSgpICE9PSAnJykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBjbG9zZXN0IDxsYWJlbD4gZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBidXR0b25cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRDbG9zZXN0TGFiZWxEb20oYnV0dG9uKSB7XG4gICAgICAgIHJldHVybiBidXR0b24uY2xvc2VzdCgnbGFiZWwnKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBjbG9zZXN0IGVsZW1lbnQgd2l0aCBjbGFzcyAnb3B0aW9uYWwtdGV4dCcuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbGFiZWxcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRPcHRpb25hbFRleHREb20obGFiZWwpIHtcbiAgICAgICAgcmV0dXJuIGxhYmVsLnF1ZXJ5U2VsZWN0b3IoJy5vcHRpb25hbC10ZXh0Jyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGZpcnN0IE50aCBwYXJlbnQgdGhhdCBoYXMgY2xhc3MgJ3N1YmVsZW1lbnQnLlxuICAgICAqXG4gICAgICogQHBhcmFtIGxhYmVsXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0Q2xvc2VzdFBhcmVudFN1YmVsZW1lbnREb20obGFiZWwpIHtcbiAgICAgICAgcmV0dXJuIGxhYmVsLmNsb3Nlc3QoJy5zdWJlbGVtZW50LnJvdW5kZWQtdC1zbScpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUb2dnbGVzIHdoYXQgaXMgcmVuZGVyZWQgb24gb3B0aW9uYWwgdGV4dC4gKGRvdCBvciBicmFja2V0KVxuICAgICAqXG4gICAgICogQHBhcmFtIG9wdGlvbmFsTGFiZWxcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b2dnbGVPcHRpb25hbFRleHQob3B0aW9uYWxMYWJlbCkge1xuICAgICAgICBjb25zdCBvcHRpb25hbExhYmVsV2l0aFN2ZyA9ICc8c3ZnIHZpZXdCb3g9XCIwIDAgMTYgMThcIiBmaWxsPVwibm9uZVwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj48cGF0aCBkPVwiTTYgOWExLjg3IDEuODcgMCAxIDAgMy43NCAwQTEuODcgMS44NyAwIDAgMCA2IDlaXCIgZmlsbD1cIiM2ODc5N0VcIj48L3BhdGg+PC9zdmc+PHNwYW4+T3B0aW9uYWw8L3NwYW4+JztcbiAgICAgICAgY29uc3Qgb3B0aW9uYWxMYWJlbFdpdGhCcmFja2V0cyA9ICc8c3Bhbj4oIE9wdGlvbmFsICk8L3NwYW4+JztcbiAgICAgICAgY29uc3Qgc3ZnRXhpc3RzID0gb3B0aW9uYWxMYWJlbC5xdWVyeVNlbGVjdG9yKCdzdmcnKSAhPT0gbnVsbDtcbiAgICAgICAgaWYgKHN2Z0V4aXN0cykge1xuICAgICAgICAgICAgb3B0aW9uYWxMYWJlbC5pbm5lckhUTUwgPSBvcHRpb25hbExhYmVsV2l0aEJyYWNrZXRzO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb3B0aW9uYWxMYWJlbC5pbm5lckhUTUwgPSBvcHRpb25hbExhYmVsV2l0aFN2ZztcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBUb2dnbGVzIGNvbGxhcHNlZCBzdGF0ZS4gKGV4cGFuZCBvciBjb2xsYXBzZWQpXG4gICAgICpcbiAgICAgKiBLZXkgY29uc2lkZXJhdGlvbnM6XG4gICAgICogMS4gVGhlIFwiQWRkIEFkZGl0aW9uYWxcIiBidXR0b24gY2FuIGJlIGVpdGhlciBpbnNpZGUgb3Igb3V0c2lkZSB0aGUgc3ViZWxlbWVudC5cbiAgICAgKiAyLiBXaGVuIHRoZSBidXR0b24gaXMgb3V0c2lkZSwgaXQgd2lsbCBhbHdheXMgYmUgdGhlIGltbWVkaWF0ZSBzaWJsaW5nIHRvIHRoZSBzdWJlbGVtZW50LlxuICAgICAqIDMuIFRoZSBjb2xsYXBzZSBtZWNoYW5pc20gaXMgaGFuZGxlZCBieSBhZGp1c3RpbmcgdGhlIG1heCBoZWlnaHQgdG8gZ2l2ZSB0aGUgaWxsdXNpb24gb2Ygc2xpZGluZyB1cC5cbiAgICAgKiA0LiBJZiB0aGUgYnV0dG9uIGlzIG91dHNpZGUgdGhlIHN1YmVsZW1lbnQsIHRoZSBzbGlkZS11cCBlZmZlY3Qgd2lsbCBub3QgYWZmZWN0IHRoZSBidXR0b24uXG4gICAgICogICAgVGhlcmVmb3JlLCB3ZSB0b2dnbGUgdGhlICdkaXNwbGF5LW5vbmUnIGNsYXNzIHRvIGNvbnRyb2wgaXRzIHZpc2liaWxpdHkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc3ViZWxlbWVudFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvZ2dsZUFjY29yZGlvbkl0ZW1zKHN1YmVsZW1lbnQpIHtcbiAgICAgICAgZnVuY3Rpb24gaXNBZGRBZGRpdGlvbmFsQnV0dG9uT3V0c2lkZShzdWJlbGVtZW50KSB7XG4gICAgICAgICAgICBjb25zdCBuZXh0U2libGluZyA9IHN1YmVsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nO1xuICAgICAgICAgICAgaWYgKG5leHRTaWJsaW5nICYmIG5leHRTaWJsaW5nLnRhZ05hbWUgPT09ICdCVVRUT04nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChuZXh0U2libGluZy5jbGFzc0xpc3QuY29udGFpbnMoJ2FkZF9tb3JlJykgJiZcbiAgICAgICAgICAgICAgICAgICAgbmV4dFNpYmxpbmcuY2xhc3NMaXN0LmNvbnRhaW5zKCdidXR0b24nKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaGlkZWFibGVTdWJlbGVtZW50cyA9IFsuLi5zdWJlbGVtZW50LmNoaWxkcmVuXS5maWx0ZXIoKGNoaWxkKSA9PiBjaGlsZC50YWdOYW1lICE9PSAnTEFCRUwnKTtcbiAgICAgICAgbGV0IG91dHNpZGVCdXR0b24gPSBudWxsO1xuICAgICAgICBjb25zdCBoYXNBZGRBZGRpdGlvbmFsQnV0dG9uT3V0c2lkZSA9IGlzQWRkQWRkaXRpb25hbEJ1dHRvbk91dHNpZGUoc3ViZWxlbWVudCk7XG4gICAgICAgIGlmIChoYXNBZGRBZGRpdGlvbmFsQnV0dG9uT3V0c2lkZSkge1xuICAgICAgICAgICAgb3V0c2lkZUJ1dHRvbiA9IHN1YmVsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nO1xuICAgICAgICAgICAgaWYgKG91dHNpZGVCdXR0b24pIHtcbiAgICAgICAgICAgICAgICBvdXRzaWRlQnV0dG9uLmNsYXNzTGlzdC50b2dnbGUoJ2Rpc3BsYXktbm9uZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGhpZGVhYmxlU3ViZWxlbWVudHMuZm9yRWFjaCgoY2hpbGQpID0+IHtcbiAgICAgICAgICAgIGlmIChoYXNBZGRBZGRpdGlvbmFsQnV0dG9uT3V0c2lkZSAmJiBvdXRzaWRlQnV0dG9uKSB7XG4gICAgICAgICAgICAgICAgc3ViZWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKCdtYi02Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2hpbGQuY2xhc3NMaXN0LmNvbnRhaW5zKCdoZWlnaHQtaGlkZScpKSB7XG4gICAgICAgICAgICAgICAgY2hpbGQuY2xhc3NMaXN0LnJlbW92ZSgnaGVpZ2h0LWhpZGUnKTtcbiAgICAgICAgICAgICAgICBjaGlsZC5jbGFzc0xpc3QuYWRkKCdoZWlnaHQtc2hvdycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY2hpbGQuY2xhc3NMaXN0LnJlbW92ZSgnaGVpZ2h0LXNob3cnKTtcbiAgICAgICAgICAgICAgICBjaGlsZC5jbGFzc0xpc3QuYWRkKCdoZWlnaHQtaGlkZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBoYW5kbGVzIHRoZSBmb3JtcyByZW5kZXJlZCBvbiBpbml0aWFsIHBhZ2UgbG9hZC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhdHRhY2hJbml0aWFsQ29sbGFwc2FibGVCdXR0b25FdmVudHMoKSB7XG4gICAgICAgIGNvbnN0IGFsbENvbGxhcHNhYmxlQnV0dG9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5jb2xsYXBzYWJsZS1idXR0b24nKTtcbiAgICAgICAgYWxsQ29sbGFwc2FibGVCdXR0b25zLmZvckVhY2goKGJ1dHRvbikgPT4gYXR0YWNoQ29sbGFwc2FibGVCdXR0b25FdmVudHMoYnV0dG9uKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaGFuZGxlcyB0aGUgZm9ybXMgcmVuZGVyZWQgb24gY2xpY2tpbmcgJ0FERCBBRERJVElPTkFMIFgnIGJ1dHRvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvYnNlcnZlTmV3Q29sbGFwc2FibGVCdXR0b25zKCkge1xuICAgICAgICBjb25zdCBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKChtdXRhdGlvbnNMaXN0KSA9PiB7XG4gICAgICAgICAgICBtdXRhdGlvbnNMaXN0LmZvckVhY2goKG11dGF0aW9uKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKG11dGF0aW9uLnR5cGUgPT09ICdjaGlsZExpc3QnKSB7XG4gICAgICAgICAgICAgICAgICAgIG11dGF0aW9uLmFkZGVkTm9kZXMuZm9yRWFjaCgobm9kZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld0NvbGxhcHNhYmxlQnV0dG9ucyA9IG5vZGUucXVlcnlTZWxlY3RvckFsbCgnLmNvbGxhcHNhYmxlLWJ1dHRvbicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0NvbGxhcHNhYmxlQnV0dG9ucy5mb3JFYWNoKChidXR0b24pID0+IGF0dGFjaENvbGxhcHNhYmxlQnV0dG9uRXZlbnRzKGJ1dHRvbikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIG9ic2VydmVyLm9ic2VydmUoZG9jdW1lbnQuYm9keSwgeyBjaGlsZExpc3Q6IHRydWUsIHN1YnRyZWU6IHRydWUgfSk7XG4gICAgfVxuICAgIGF0dGFjaEluaXRpYWxDb2xsYXBzYWJsZUJ1dHRvbkV2ZW50cygpO1xuICAgIG9ic2VydmVOZXdDb2xsYXBzYWJsZUJ1dHRvbnMoKTtcbn0pO1xuZnVuY3Rpb24gZXNjYXBlSHRtbCh1bnNhZmUpIHtcbiAgICByZXR1cm4gdW5zYWZlXG4gICAgICAgIC5yZXBsYWNlKC8mL2csICcmYW1wOycpXG4gICAgICAgIC5yZXBsYWNlKC88L2csICcmbHQ7JylcbiAgICAgICAgLnJlcGxhY2UoLz4vZywgJyZndDsnKVxuICAgICAgICAucmVwbGFjZSgvXCIvZywgJyZxdW90OycpXG4gICAgICAgIC5yZXBsYWNlKC8nL2csICcmIzAzOTsnKTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIC8qIGM4IGlnbm9yZSBzdGFydCAqLyAvKiBlc2xpbnQtZGlzYWJsZSAqLyA7XG5mdW5jdGlvbiBvb19jbSgpIHsgdHJ5IHtcbiAgICByZXR1cm4gKDAsIGV2YWwpKFwiZ2xvYmFsVGhpcy5fY29uc29sZV9uaW5qYVwiKSB8fCAoMCwgZXZhbCkoXCIvKiBodHRwczovL2dpdGh1Yi5jb20vd2FsbGFieWpzL2NvbnNvbGUtbmluamEjaG93LWRvZXMtaXQtd29yayAqLyd1c2Ugc3RyaWN0Jzt2YXIgXzB4MjE2MGRlPV8weDIxYTM7ZnVuY3Rpb24gXzB4MzYzMigpe3ZhciBfMHg1Njk4MmY9WydkZWZhdWx0Jywnc2VuZCcsJyVjXFxcXHgyMENvbnNvbGVcXFxceDIwTmluamFcXFxceDIwZXh0ZW5zaW9uXFxcXHgyMGlzXFxcXHgyMGNvbm5lY3RlZFxcXFx4MjB0b1xcXFx4MjAnLCdfSFRNTEFsbENvbGxlY3Rpb24nLCdleHByZXNzaW9uc1RvRXZhbHVhdGUnLCdob3N0JywnJywndmVyc2lvbnMnLCdwZXJmX2hvb2tzJywncG9zaXRpdmVJbmZpbml0eScsJzEyNy4wLjAuMScsJ3NldCcsJ19jb25uZWN0VG9Ib3N0Tm93JywnYm9vbGVhbicsJ19pc0FycmF5JywnZ2V0T3duUHJvcGVydHlOYW1lcycsJ2xvZ2dlclxcXFx4MjB3ZWJzb2NrZXRcXFxceDIwZXJyb3InLCdkYXRlJywnX2RhdGVUb1N0cmluZycsJ2JpbmQnLCdsb2NhdGlvbicsJzUyNjQyNTkwSnNMcnppJywnXFxcXHgyMHNlcnZlcicsJ2xvZycsJzI2NjAyNTBHcFFsTnUnLCdmdW5jTmFtZScsJ2NvdW50JywnaW5jbHVkZXMnLCdlZGdlJywnX2FkZExvYWROb2RlJywnbWF0Y2gnLCdvbmNsb3NlJywnX2NvbnNvbGVOaW5qYUFsbG93ZWRUb1N0YXJ0JywnaHR0cHM6Ly90aW55dXJsLmNvbS8zN3g4Yjc5dCcsJ29ubWVzc2FnZScsJ3Jvb3RFeHByZXNzaW9uJywnbm9kZScsJ2xvZ2dlclxcXFx4MjBmYWlsZWRcXFxceDIwdG9cXFxceDIwY29ubmVjdFxcXFx4MjB0b1xcXFx4MjBob3N0LFxcXFx4MjBzZWVcXFxceDIwJywnX2NhcElmU3RyaW5nJywnX29iamVjdFRvU3RyaW5nJywnY29uY2F0JywnX3BfbmFtZScsJ25leHQuanMnLCdvbmVycm9yJywndW5kZWZpbmVkJywnbmVnYXRpdmVJbmZpbml0eScsJ3RvTG93ZXJDYXNlJywnX3NldE5vZGVFeHByZXNzaW9uUGF0aCcsJ3NsaWNlJywnbWVzc2FnZScsJ2FzdHJvJywnX2Nvbm5lY3RlZCcsJ3RvVXBwZXJDYXNlJywnY2F0Y2gnLCdiYWNrZ3JvdW5kOlxcXFx4MjByZ2IoMzAsMzAsMzApO1xcXFx4MjBjb2xvcjpcXFxceDIwcmdiKDI1NSwyMTMsOTIpJywnZmFpbGVkXFxcXHgyMHRvXFxcXHgyMGNvbm5lY3RcXFxceDIwdG9cXFxceDIwaG9zdDpcXFxceDIwJywnX3F1b3RlZFJlZ0V4cCcsJ3Vua25vd24nLCd1bnNoaWZ0JywnYXV0b0V4cGFuZFByb3BlcnR5Q291bnQnLCdfdHlwZScsJzI3OTNSTXlrZmcnLCdzdHJpbmdpZnknLCdjdXJyZW50JywnaGFzT3duUHJvcGVydHknLCd3ZWJwYWNrJywnX2dldE93blByb3BlcnR5U3ltYm9scycsJ2lzRXhwcmVzc2lvblRvRXZhbHVhdGUnLCd0aGVuJywnX2dldE93blByb3BlcnR5RGVzY3JpcHRvcicsJ3VucmVmJywnX2lzU2V0Jywnb25vcGVuJywnX2hhc01hcE9uSXRzUGF0aCcsJ2hpdHMnLCdfaXNVbmRlZmluZWQnLCdfaGFzU3ltYm9sUHJvcGVydHlPbkl0c1BhdGgnLCd2YWx1ZU9mJywncG9wJywnMjU3MDgxNFhIdlBhaScsJ2F1dG9FeHBhbmRNYXhEZXB0aCcsJ251bGwnLCdfcHJvcGVydHlOYW1lJywnW29iamVjdFxcXFx4MjBEYXRlXScsJ3Byb2Nlc3MnLCd0b3RhbFN0ckxlbmd0aCcsJ2NhcHBlZEVsZW1lbnRzJywnc2V0dGVyJyxbXFxcImxvY2FsaG9zdFxcXCIsXFxcIjEyNy4wLjAuMVxcXCIsXFxcImV4YW1wbGUuY3lwcmVzcy5pb1xcXCIsXFxcImZsdWZmeVxcXCIsXFxcIjE5Mi4xNjguMTAuMTc2XFxcIl0sJ19hbGxvd2VkVG9TZW5kJywncG9ydCcsJ2ZvckVhY2gnLCdSZWdFeHAnLCd3czovLycsJ19yZWdFeHBUb1N0cmluZycsJ3Jvb3RfZXhwX2lkJywncmVtaXgnLCdfbmluamFJZ25vcmVOZXh0RXJyb3InLCdmdW5jdGlvbicsJ1tvYmplY3RcXFxceDIwU2V0XScsJ2JpZ2ludCcsJ19pc1ByaW1pdGl2ZVR5cGUnLCcxLjAuMCcsJ19XZWJTb2NrZXRDbGFzcycsJ3VybCcsJ1tvYmplY3RcXFxceDIwTWFwXScsJ0NvbnNvbGVcXFxceDIwTmluamFcXFxceDIwZmFpbGVkXFxcXHgyMHRvXFxcXHgyMHNlbmRcXFxceDIwbG9ncyxcXFxceDIwcmVzdGFydGluZ1xcXFx4MjB0aGVcXFxceDIwcHJvY2Vzc1xcXFx4MjBtYXlcXFxceDIwaGVscDtcXFxceDIwYWxzb1xcXFx4MjBzZWVcXFxceDIwJywncHJvdG90eXBlJywnZ2xvYmFsJywnZ2V0V2ViU29ja2V0Q2xhc3MnLCdfc29ydFByb3BzJywnW29iamVjdFxcXFx4MjBBcnJheV0nLCdlbGFwc2VkJywnX3RyZWVOb2RlUHJvcGVydGllc0JlZm9yZUZ1bGxWYWx1ZScsJ29iamVjdCcsJ1N0cmluZycsJ19pbk5leHRFZGdlJywnX2FkZFByb3BlcnR5Jywnc29ydFByb3BzJywnZXZlbnRSZWNlaXZlZENhbGxiYWNrJywnb3JpZ2luJywncHVzaCcsJ3N0YWNrVHJhY2VMaW1pdCcsJ3N5bWJvbCcsJ1NldCcsJ19jb25uZWN0QXR0ZW1wdENvdW50JywnbmFtZScsJ3RvU3RyaW5nJywnX2FkZEZ1bmN0aW9uc05vZGUnLCdfaXNQcmltaXRpdmVXcmFwcGVyVHlwZScsJ3JlZHVjZUxpbWl0cycsJ190cmVlTm9kZVByb3BlcnRpZXNBZnRlckZ1bGxWYWx1ZScsJ19zb2NrZXQnLCd3YXJuJywnX2hhc1NldE9uSXRzUGF0aCcsJ19zZW5kRXJyb3JNZXNzYWdlJywnX251bWJlclJlZ0V4cCcsJ3Byb3BzJywnaW5kZXgnLCdhdXRvRXhwYW5kJywnXFxcXHgyMGJyb3dzZXInLCdfc2V0Tm9kZUxhYmVsJywnY29uc3RydWN0b3InLCdwYXRoJywnX3NldE5vZGVQZXJtaXNzaW9ucycsJ2luZGV4T2YnLCdzdWJzdHInLCdzcGxpdCcsJ2FyZ3MnLCdfY2xlYW5Ob2RlJywnTkVHQVRJVkVfSU5GSU5JVFknLCdfYWRkT2JqZWN0UHJvcGVydHknLCd2YWx1ZScsJ2Rpc2FibGVkTG9nJywnbm9GdW5jdGlvbnMnLCdyZWxvYWQnLCdwYXJlbnQnLCdsb2dnZXJcXFxceDIwZmFpbGVkXFxcXHgyMHRvXFxcXHgyMGNvbm5lY3RcXFxceDIwdG9cXFxceDIwaG9zdCcsJ19wcm9wZXJ0eScsJ2dldHRlcicsJ19wcm9jZXNzVHJlZU5vZGVSZXN1bHQnLCdwYXJzZScsJ2VsZW1lbnRzJywndHlwZScsJ19zZXROb2RlUXVlcnlQYXRoJywnZGVwdGgnLCdmYWlsZWRcXFxceDIwdG9cXFxceDIwZmluZFxcXFx4MjBhbmRcXFxceDIwbG9hZFxcXFx4MjBXZWJTb2NrZXQnLCcxMjUzMjBwa2lia0gnLCcxNzMyMDk5NzkzODkyJywnbm93Jywnam9pbicsJ2FycmF5JywncGVyZm9ybWFuY2UnLCdjYWxsJywnZG9ja2VyaXplZEFwcCcsJ2Zyb21DaGFyQ29kZScsJ2RhdGEnLCdnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3InLCdfYWRkaXRpb25hbE1ldGFkYXRhJywnbnVtYmVyJywnX1N5bWJvbCcsJ051bWJlcicsJ2dldCcsJ19yZWNvbm5lY3RUaW1lb3V0JywncGF0aFRvRmlsZVVSTCcsJ3N0ckxlbmd0aCcsJzEwQWZnbmVDJywnY2FwcGVkUHJvcHMnLCdDb25zb2xlXFxcXHgyME5pbmphXFxcXHgyMGZhaWxlZFxcXFx4MjB0b1xcXFx4MjBzZW5kXFxcXHgyMGxvZ3MsXFxcXHgyMHJlZnJlc2hpbmdcXFxceDIwdGhlXFxcXHgyMHBhZ2VcXFxceDIwbWF5XFxcXHgyMGhlbHA7XFxcXHgyMGFsc29cXFxceDIwc2VlXFxcXHgyMCcsJ3N0cmluZycsJ19fZXMnKydNb2R1bGUnLCdsZW5ndGgnLCdCb29sZWFuJywnX2lzTmVnYXRpdmVaZXJvJywnX3dlYlNvY2tldEVycm9yRG9jc0xpbmsnLCcuLi4nLCdyZXBsYWNlJywnMTExNHRwa25vdScsJ3RpbWUnLCdfc2V0Tm9kZUlkJywnaHJ0aW1lJywnTWFwJywnX2NvbnNvbGVfbmluamFfc2Vzc2lvbicsJ0J1ZmZlcicsJ25lZ2F0aXZlWmVybycsJ19jb25zb2xlX25pbmphJywnYXV0b0V4cGFuZExpbWl0JywnX2F0dGVtcHRUb1JlY29ubmVjdFNob3J0bHknLCdfYWxsb3dlZFRvQ29ubmVjdE9uU2VuZCcsJ19ibGFja2xpc3RlZFByb3BlcnR5JywnMScsJ2FuZ3VsYXInLCdjb25zb2xlJywnNzM3NDQ1NnNDQkdlbicsJ2dhdGV3YXkuZG9ja2VyLmludGVybmFsJywnSFRNTEFsbENvbGxlY3Rpb24nLCduYW4nLCcnLCdob3N0bmFtZScsJ2V4cElkJywnY3JlYXRlJywnY2FwcGVkJywnc2VyaWFsaXplJywnc3RhY2snLCdfd3MnLCdfc2V0Tm9kZUV4cGFuZGFibGVTdGF0ZScsJ19wXycsJ05FWFRfUlVOVElNRScsJ2lzQXJyYXknLCdlbmRzV2l0aCcsJ19jb25uZWN0aW5nJywnZGVmaW5lUHJvcGVydHknLCdfdW5kZWZpbmVkJywnYXV0b0V4cGFuZFByZXZpb3VzT2JqZWN0cycsJzE2MWtBSUdPZScsXFxcIi9ob21lL2ZsdWZmeS8udnNjb2RlL2V4dGVuc2lvbnMvd2FsbGFieWpzLmNvbnNvbGUtbmluamEtMS4wLjM2OS9ub2RlX21vZHVsZXNcXFwiLCdub2RlTW9kdWxlcycsJ19XZWJTb2NrZXQnLCdlbnYnLCd0ZXN0JywndHJhY2UnLCdsZXZlbCcsJ21ldGhvZCcsJ19pbkJyb3dzZXInLCdlcnJvcicsJ19kaXNwb3NlV2Vic29ja2V0JywnX2lzTWFwJywnNDk1NjQ4OVFxcXZ4VCcsJ2FsbFN0ckxlbmd0aCcsJ1tvYmplY3RcXFxceDIwQmlnSW50XScsJ19nZXRPd25Qcm9wZXJ0eU5hbWVzJywncmVzb2x2ZUdldHRlcnMnLCdfbWF4Q29ubmVjdEF0dGVtcHRDb3VudCddO18weDM2MzI9ZnVuY3Rpb24oKXtyZXR1cm4gXzB4NTY5ODJmO307cmV0dXJuIF8weDM2MzIoKTt9KGZ1bmN0aW9uKF8weDRjMzAyNCxfMHgyN2ViMjMpe3ZhciBfMHg0N2U3ZmY9XzB4MjFhMyxfMHg0ODE3OTI9XzB4NGMzMDI0KCk7d2hpbGUoISFbXSl7dHJ5e3ZhciBfMHgyMjRhYjM9LXBhcnNlSW50KF8weDQ3ZTdmZigweDFiYSkpLzB4MSoocGFyc2VJbnQoXzB4NDdlN2ZmKDB4MTQ1KSkvMHgyKStwYXJzZUludChfMHg0N2U3ZmYoMHgxY2MpKS8weDMrLXBhcnNlSW50KF8weDQ3ZTdmZigweDE1NSkpLzB4NCtwYXJzZUludChfMHg0N2U3ZmYoMHgxM2EpKS8weDUqKC1wYXJzZUludChfMHg0N2U3ZmYoMHgxOTUpKS8weDYpK3BhcnNlSW50KF8weDQ3ZTdmZigweDE2YSkpLzB4NyooLXBhcnNlSW50KF8weDQ3ZTdmZigweDEyNykpLzB4OCkrLXBhcnNlSW50KF8weDQ3ZTdmZigweDE3NykpLzB4OStwYXJzZUludChfMHg0N2U3ZmYoMHgxOTIpKS8weGE7aWYoXzB4MjI0YWIzPT09XzB4MjdlYjIzKWJyZWFrO2Vsc2UgXzB4NDgxNzkyWydwdXNoJ10oXzB4NDgxNzkyWydzaGlmdCddKCkpO31jYXRjaChfMHgyODA5ZjApe18weDQ4MTc5MlsncHVzaCddKF8weDQ4MTc5Mlsnc2hpZnQnXSgpKTt9fX0oXzB4MzYzMiwweGUxOWQ0KSk7dmFyIEs9T2JqZWN0W18weDIxNjBkZSgweDE1YyldLFE9T2JqZWN0W18weDIxNjBkZSgweDE2NyldLEc9T2JqZWN0WydnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3InXSxlZT1PYmplY3RbXzB4MjE2MGRlKDB4MThjKV0sdGU9T2JqZWN0WydnZXRQcm90b3R5cGVPZiddLG5lPU9iamVjdFsncHJvdG90eXBlJ11bXzB4MjE2MGRlKDB4MWJkKV0scmU9KF8weGI2MGU2YyxfMHgyNzIzYTcsXzB4NTBhNDhiLF8weDI0MzU5Mik9Pnt2YXIgXzB4YTc2YzQ9XzB4MjE2MGRlO2lmKF8weDI3MjNhNyYmdHlwZW9mIF8weDI3MjNhNz09XzB4YTc2YzQoMHhmMil8fHR5cGVvZiBfMHgyNzIzYTc9PV8weGE3NmM0KDB4MWRmKSl7Zm9yKGxldCBfMHhiOWY4NjMgb2YgZWUoXzB4MjcyM2E3KSkhbmVbXzB4YTc2YzQoMHgxMmQpXShfMHhiNjBlNmMsXzB4YjlmODYzKSYmXzB4YjlmODYzIT09XzB4NTBhNDhiJiZRKF8weGI2MGU2YyxfMHhiOWY4NjMseydnZXQnOigpPT5fMHgyNzIzYTdbXzB4YjlmODYzXSwnZW51bWVyYWJsZSc6IShfMHgyNDM1OTI9RyhfMHgyNzIzYTcsXzB4YjlmODYzKSl8fF8weDI0MzU5MlsnZW51bWVyYWJsZSddfSk7fXJldHVybiBfMHhiNjBlNmM7fSxWPShfMHg4YzJhYjgsXzB4NDY4YzFiLF8weDE0ZTUxMyk9PihfMHgxNGU1MTM9XzB4OGMyYWI4IT1udWxsP0sodGUoXzB4OGMyYWI4KSk6e30scmUoXzB4NDY4YzFifHwhXzB4OGMyYWI4fHwhXzB4OGMyYWI4W18weDIxNjBkZSgweDEzZSldP1EoXzB4MTRlNTEzLF8weDIxNjBkZSgweDE3ZCkseyd2YWx1ZSc6XzB4OGMyYWI4LCdlbnVtZXJhYmxlJzohMHgwfSk6XzB4MTRlNTEzLF8weDhjMmFiOCkpLFo9Y2xhc3N7Y29uc3RydWN0b3IoXzB4MWQyZTIzLF8weGRhYjYwZSxfMHg0MGU5NGMsXzB4MTQyZWIxLF8weDIxNDFkYixfMHhhMjA1Zjkpe3ZhciBfMHg1Y2NlZDQ9XzB4MjE2MGRlLF8weDVjMTA4YyxfMHgyYTAzZGMsXzB4MTg0ZTQzLF8weDNiZDJlOTt0aGlzWydnbG9iYWwnXT1fMHgxZDJlMjMsdGhpc1tfMHg1Y2NlZDQoMHgxODIpXT1fMHhkYWI2MGUsdGhpc1tfMHg1Y2NlZDQoMHgxZDcpXT1fMHg0MGU5NGMsdGhpc1snbm9kZU1vZHVsZXMnXT1fMHgxNDJlYjEsdGhpc1tfMHg1Y2NlZDQoMHgxMmUpXT1fMHgyMTQxZGIsdGhpc1snZXZlbnRSZWNlaXZlZENhbGxiYWNrJ109XzB4YTIwNWY5LHRoaXNbXzB4NWNjZWQ0KDB4MWQ2KV09ITB4MCx0aGlzW18weDVjY2VkNCgweDE1MCldPSEweDAsdGhpc1tfMHg1Y2NlZDQoMHgxYjApXT0hMHgxLHRoaXNbXzB4NWNjZWQ0KDB4MTY2KV09ITB4MSx0aGlzW18weDVjY2VkNCgweGY0KV09KChfMHgyYTAzZGM9KF8weDVjMTA4Yz1fMHgxZDJlMjNbXzB4NWNjZWQ0KDB4MWQxKV0pPT1udWxsP3ZvaWQgMHgwOl8weDVjMTA4Y1tfMHg1Y2NlZDQoMHgxNmUpXSk9PW51bGw/dm9pZCAweDA6XzB4MmEwM2RjW18weDVjY2VkNCgweDE2MyldKT09PV8weDVjY2VkNCgweDE5OSksdGhpc1tfMHg1Y2NlZDQoMHgxNzMpXT0hKChfMHgzYmQyZTk9KF8weDE4NGU0Mz10aGlzW18weDVjY2VkNCgweDFlOSldW18weDVjY2VkNCgweDFkMSldKT09bnVsbD92b2lkIDB4MDpfMHgxODRlNDNbXzB4NWNjZWQ0KDB4MTg0KV0pIT1udWxsJiZfMHgzYmQyZTlbXzB4NWNjZWQ0KDB4MWExKV0pJiYhdGhpc1tfMHg1Y2NlZDQoMHhmNCldLHRoaXNbXzB4NWNjZWQ0KDB4MWU0KV09bnVsbCx0aGlzWydfY29ubmVjdEF0dGVtcHRDb3VudCddPTB4MCx0aGlzW18weDVjY2VkNCgweDE3YyldPTB4MTQsdGhpc1tfMHg1Y2NlZDQoMHgxNDIpXT1fMHg1Y2NlZDQoMHgxOWUpLHRoaXNbXzB4NWNjZWQ0KDB4MTA3KV09KHRoaXNbXzB4NWNjZWQ0KDB4MTczKV0/XzB4NWNjZWQ0KDB4MTNjKTpfMHg1Y2NlZDQoMHgxZTcpKSt0aGlzW18weDVjY2VkNCgweDE0MildO31hc3luY1tfMHgyMTYwZGUoMHgxZWEpXSgpe3ZhciBfMHgxMjhhNDk9XzB4MjE2MGRlLF8weDNiYzZjYixfMHgyYzkyMDA7aWYodGhpc1snX1dlYlNvY2tldENsYXNzJ10pcmV0dXJuIHRoaXNbXzB4MTI4YTQ5KDB4MWU0KV07bGV0IF8weDFhZGI1NztpZih0aGlzWydfaW5Ccm93c2VyJ118fHRoaXNbJ19pbk5leHRFZGdlJ10pXzB4MWFkYjU3PXRoaXNbJ2dsb2JhbCddWydXZWJTb2NrZXQnXTtlbHNle2lmKChfMHgzYmM2Y2I9dGhpc1tfMHgxMjhhNDkoMHgxZTkpXVsncHJvY2VzcyddKSE9bnVsbCYmXzB4M2JjNmNiW18weDEyOGE0OSgweDE2ZCldKV8weDFhZGI1Nz0oXzB4MmM5MjAwPXRoaXNbXzB4MTI4YTQ5KDB4MWU5KV1bXzB4MTI4YTQ5KDB4MWQxKV0pPT1udWxsP3ZvaWQgMHgwOl8weDJjOTIwMFtfMHgxMjhhNDkoMHgxNmQpXTtlbHNlIHRyeXtsZXQgXzB4MzEyODNlPWF3YWl0IGltcG9ydChfMHgxMjhhNDkoMHgxMGYpKTtfMHgxYWRiNTc9KGF3YWl0IGltcG9ydCgoYXdhaXQgaW1wb3J0KF8weDEyOGE0OSgweDFlNSkpKVtfMHgxMjhhNDkoMHgxMzgpXShfMHgzMTI4M2VbXzB4MTI4YTQ5KDB4MTJhKV0odGhpc1tfMHgxMjhhNDkoMHgxNmMpXSwnd3MvaW5kZXguanMnKSlbXzB4MTI4YTQ5KDB4ZmYpXSgpKSlbXzB4MTI4YTQ5KDB4MTdkKV07fWNhdGNoe3RyeXtfMHgxYWRiNTc9cmVxdWlyZShyZXF1aXJlKF8weDEyOGE0OSgweDEwZikpW18weDEyOGE0OSgweDEyYSldKHRoaXNbJ25vZGVNb2R1bGVzJ10sJ3dzJykpO31jYXRjaHt0aHJvdyBuZXcgRXJyb3IoXzB4MTI4YTQ5KDB4MTI2KSk7fX19cmV0dXJuIHRoaXNbXzB4MTI4YTQ5KDB4MWU0KV09XzB4MWFkYjU3LF8weDFhZGI1Nzt9W18weDIxNjBkZSgweDE4OSldKCl7dmFyIF8weDNlYTVmNz1fMHgyMTYwZGU7dGhpc1tfMHgzZWE1ZjcoMHgxNjYpXXx8dGhpc1snX2Nvbm5lY3RlZCddfHx0aGlzW18weDNlYTVmNygweGZkKV0+PXRoaXNbXzB4M2VhNWY3KDB4MTdjKV18fCh0aGlzW18weDNlYTVmNygweDE1MCldPSEweDEsdGhpc1tfMHgzZWE1ZjcoMHgxNjYpXT0hMHgwLHRoaXNbXzB4M2VhNWY3KDB4ZmQpXSsrLHRoaXNbXzB4M2VhNWY3KDB4MTYwKV09bmV3IFByb21pc2UoKF8weDFjZGZlNixfMHgzOTMwNzYpPT57dmFyIF8weDMyOTMyOD1fMHgzZWE1Zjc7dGhpc1tfMHgzMjkzMjgoMHgxZWEpXSgpWyd0aGVuJ10oXzB4NTllYzU0PT57dmFyIF8weDFlYmZkOT1fMHgzMjkzMjg7bGV0IF8weDVhNWIxNz1uZXcgXzB4NTllYzU0KF8weDFlYmZkOSgweDFkYSkrKCF0aGlzWydfaW5Ccm93c2VyJ10mJnRoaXNbXzB4MWViZmQ5KDB4MTJlKV0/XzB4MWViZmQ5KDB4MTU2KTp0aGlzWydob3N0J10pKyc6Jyt0aGlzW18weDFlYmZkOSgweDFkNyldKTtfMHg1YTViMTdbJ29uZXJyb3InXT0oKT0+e3ZhciBfMHg1ZThkNjA9XzB4MWViZmQ5O3RoaXNbXzB4NWU4ZDYwKDB4MWQ2KV09ITB4MSx0aGlzW18weDVlOGQ2MCgweDE3NSldKF8weDVhNWIxNyksdGhpc1tfMHg1ZThkNjAoMHgxNGYpXSgpLF8weDM5MzA3NihuZXcgRXJyb3IoXzB4NWU4ZDYwKDB4MThkKSkpO30sXzB4NWE1YjE3Wydvbm9wZW4nXT0oKT0+e3ZhciBfMHhiZDM4YTI9XzB4MWViZmQ5O3RoaXNbXzB4YmQzOGEyKDB4MTczKV18fF8weDVhNWIxN1tfMHhiZDM4YTIoMHgxMDQpXSYmXzB4NWE1YjE3W18weGJkMzhhMigweDEwNCldWyd1bnJlZiddJiZfMHg1YTViMTdbXzB4YmQzOGEyKDB4MTA0KV1bXzB4YmQzOGEyKDB4MWMzKV0oKSxfMHgxY2RmZTYoXzB4NWE1YjE3KTt9LF8weDVhNWIxN1tfMHgxZWJmZDkoMHgxOWMpXT0oKT0+e3ZhciBfMHgyOTUyNzk9XzB4MWViZmQ5O3RoaXNbXzB4Mjk1Mjc5KDB4MTUwKV09ITB4MCx0aGlzW18weDI5NTI3OSgweDE3NSldKF8weDVhNWIxNyksdGhpc1snX2F0dGVtcHRUb1JlY29ubmVjdFNob3J0bHknXSgpO30sXzB4NWE1YjE3W18weDFlYmZkOSgweDE5ZildPV8weDQ3ODMyMT0+e3ZhciBfMHgyMTAzNTY9XzB4MWViZmQ5O3RyeXtpZighKF8weDQ3ODMyMSE9bnVsbCYmXzB4NDc4MzIxWydkYXRhJ10pfHwhdGhpc1tfMHgyMTAzNTYoMHhmNyldKXJldHVybjtsZXQgXzB4MjMxMTdkPUpTT05bXzB4MjEwMzU2KDB4MTIxKV0oXzB4NDc4MzIxW18weDIxMDM1NigweDEzMCldKTt0aGlzW18weDIxMDM1NigweGY3KV0oXzB4MjMxMTdkW18weDIxMDM1NigweDE3MildLF8weDIzMTE3ZFtfMHgyMTAzNTYoMHgxMTQpXSx0aGlzW18weDIxMDM1NigweDFlOSldLHRoaXNbXzB4MjEwMzU2KDB4MTczKV0pO31jYXRjaHt9fTt9KVtfMHgzMjkzMjgoMHgxYzEpXShfMHgxNzAxZDk9Pih0aGlzW18weDMyOTMyOCgweDFiMCldPSEweDAsdGhpc1snX2Nvbm5lY3RpbmcnXT0hMHgxLHRoaXNbJ19hbGxvd2VkVG9Db25uZWN0T25TZW5kJ109ITB4MSx0aGlzW18weDMyOTMyOCgweDFkNildPSEweDAsdGhpc1snX2Nvbm5lY3RBdHRlbXB0Q291bnQnXT0weDAsXzB4MTcwMWQ5KSlbXzB4MzI5MzI4KDB4MWIyKV0oXzB4MWM4OGIwPT4odGhpc1tfMHgzMjkzMjgoMHgxYjApXT0hMHgxLHRoaXNbJ19jb25uZWN0aW5nJ109ITB4MSxjb25zb2xlW18weDMyOTMyOCgweDEwNSldKF8weDMyOTMyOCgweDFhMikrdGhpc1snX3dlYlNvY2tldEVycm9yRG9jc0xpbmsnXSksXzB4MzkzMDc2KG5ldyBFcnJvcihfMHgzMjkzMjgoMHgxYjQpKyhfMHgxYzg4YjAmJl8weDFjODhiMFsnbWVzc2FnZSddKSkpKSk7fSkpO31bXzB4MjE2MGRlKDB4MTc1KV0oXzB4M2RiNTEzKXt2YXIgXzB4MzY4MjRkPV8weDIxNjBkZTt0aGlzW18weDM2ODI0ZCgweDFiMCldPSEweDEsdGhpc1tfMHgzNjgyNGQoMHgxNjYpXT0hMHgxO3RyeXtfMHgzZGI1MTNbXzB4MzY4MjRkKDB4MTljKV09bnVsbCxfMHgzZGI1MTNbXzB4MzY4MjRkKDB4MWE4KV09bnVsbCxfMHgzZGI1MTNbXzB4MzY4MjRkKDB4MWM1KV09bnVsbDt9Y2F0Y2h7fXRyeXtfMHgzZGI1MTNbJ3JlYWR5U3RhdGUnXTwweDImJl8weDNkYjUxM1snY2xvc2UnXSgpO31jYXRjaHt9fVtfMHgyMTYwZGUoMHgxNGYpXSgpe3ZhciBfMHg2YmNiOWQ9XzB4MjE2MGRlO2NsZWFyVGltZW91dCh0aGlzW18weDZiY2I5ZCgweDEzNyldKSwhKHRoaXNbXzB4NmJjYjlkKDB4ZmQpXT49dGhpc1tfMHg2YmNiOWQoMHgxN2MpXSkmJih0aGlzW18weDZiY2I5ZCgweDEzNyldPXNldFRpbWVvdXQoKCk9Pnt2YXIgXzB4NTc3ZGI5PV8weDZiY2I5ZCxfMHg1Y2JhYTY7dGhpc1tfMHg1NzdkYjkoMHgxYjApXXx8dGhpc1tfMHg1NzdkYjkoMHgxNjYpXXx8KHRoaXNbJ19jb25uZWN0VG9Ib3N0Tm93J10oKSwoXzB4NWNiYWE2PXRoaXNbJ193cyddKT09bnVsbHx8XzB4NWNiYWE2W18weDU3N2RiOSgweDFiMildKCgpPT50aGlzW18weDU3N2RiOSgweDE0ZildKCkpKTt9LDB4MWY0KSx0aGlzW18weDZiY2I5ZCgweDEzNyldW18weDZiY2I5ZCgweDFjMyldJiZ0aGlzW18weDZiY2I5ZCgweDEzNyldW18weDZiY2I5ZCgweDFjMyldKCkpO31hc3luY1tfMHgyMTYwZGUoMHgxN2UpXShfMHgxMmI3OTYpe3ZhciBfMHgyMjMyN2M9XzB4MjE2MGRlO3RyeXtpZighdGhpc1tfMHgyMjMyN2MoMHgxZDYpXSlyZXR1cm47dGhpc1tfMHgyMjMyN2MoMHgxNTApXSYmdGhpc1snX2Nvbm5lY3RUb0hvc3ROb3cnXSgpLChhd2FpdCB0aGlzW18weDIyMzI3YygweDE2MCldKVtfMHgyMjMyN2MoMHgxN2UpXShKU09OWydzdHJpbmdpZnknXShfMHgxMmI3OTYpKTt9Y2F0Y2goXzB4NTczMzdhKXtjb25zb2xlW18weDIyMzI3YygweDEwNSldKHRoaXNbXzB4MjIzMjdjKDB4MTA3KV0rJzpcXFxceDIwJysoXzB4NTczMzdhJiZfMHg1NzMzN2FbJ21lc3NhZ2UnXSkpLHRoaXNbJ19hbGxvd2VkVG9TZW5kJ109ITB4MSx0aGlzW18weDIyMzI3YygweDE0ZildKCk7fX19O2Z1bmN0aW9uIHEoXzB4MWY5NjNiLF8weDI2MzMyMixfMHgzZjFiMzgsXzB4NDNjOGNkLF8weGY2MDY3ZCxfMHhmM2U3OSxfMHg0NzM4MjYsXzB4NTA0ZWU0PWllKXt2YXIgXzB4NjUwNDBiPV8weDIxNjBkZTtsZXQgXzB4NWUzM2NiPV8weDNmMWIzOFtfMHg2NTA0MGIoMHgxMTMpXSgnLCcpWydtYXAnXShfMHg1NzdlNjQ9Pnt2YXIgXzB4NWNmZWFiPV8weDY1MDQwYixfMHgxZWVlYjAsXzB4NWJlZmNmLF8weDJlZDQ5MCxfMHg0NTEzMzI7dHJ5e2lmKCFfMHgxZjk2M2JbXzB4NWNmZWFiKDB4MTRhKV0pe2xldCBfMHgyMTM1MDM9KChfMHg1YmVmY2Y9KF8weDFlZWViMD1fMHgxZjk2M2JbJ3Byb2Nlc3MnXSk9PW51bGw/dm9pZCAweDA6XzB4MWVlZWIwW18weDVjZmVhYigweDE4NCldKT09bnVsbD92b2lkIDB4MDpfMHg1YmVmY2ZbXzB4NWNmZWFiKDB4MWExKV0pfHwoKF8weDQ1MTMzMj0oXzB4MmVkNDkwPV8weDFmOTYzYltfMHg1Y2ZlYWIoMHgxZDEpXSk9PW51bGw/dm9pZCAweDA6XzB4MmVkNDkwW18weDVjZmVhYigweDE2ZSldKT09bnVsbD92b2lkIDB4MDpfMHg0NTEzMzJbXzB4NWNmZWFiKDB4MTYzKV0pPT09XzB4NWNmZWFiKDB4MTk5KTsoXzB4ZjYwNjdkPT09XzB4NWNmZWFiKDB4MWE3KXx8XzB4ZjYwNjdkPT09XzB4NWNmZWFiKDB4MWRkKXx8XzB4ZjYwNjdkPT09XzB4NWNmZWFiKDB4MWFmKXx8XzB4ZjYwNjdkPT09XzB4NWNmZWFiKDB4MTUzKSkmJihfMHhmNjA2N2QrPV8weDIxMzUwMz9fMHg1Y2ZlYWIoMHgxOTMpOl8weDVjZmVhYigweDEwYykpLF8weDFmOTYzYltfMHg1Y2ZlYWIoMHgxNGEpXT17J2lkJzorbmV3IERhdGUoKSwndG9vbCc6XzB4ZjYwNjdkfSxfMHg0NzM4MjYmJl8weGY2MDY3ZCYmIV8weDIxMzUwMyYmY29uc29sZVtfMHg1Y2ZlYWIoMHgxOTQpXShfMHg1Y2ZlYWIoMHgxN2YpKyhfMHhmNjA2N2RbJ2NoYXJBdCddKDB4MClbXzB4NWNmZWFiKDB4MWIxKV0oKStfMHhmNjA2N2RbJ3N1YnN0ciddKDB4MSkpKycsJyxfMHg1Y2ZlYWIoMHgxYjMpLCdzZWVcXFxceDIwaHR0cHM6Ly90aW55dXJsLmNvbS8ydnQ4anh6d1xcXFx4MjBmb3JcXFxceDIwbW9yZVxcXFx4MjBpbmZvLicpO31sZXQgXzB4ODBiODM1PW5ldyBaKF8weDFmOTYzYixfMHgyNjMzMjIsXzB4NTc3ZTY0LF8weDQzYzhjZCxfMHhmM2U3OSxfMHg1MDRlZTQpO3JldHVybiBfMHg4MGI4MzVbXzB4NWNmZWFiKDB4MTdlKV1bXzB4NWNmZWFiKDB4MTkwKV0oXzB4ODBiODM1KTt9Y2F0Y2goXzB4MWNiMDI0KXtyZXR1cm4gY29uc29sZVtfMHg1Y2ZlYWIoMHgxMDUpXShfMHg1Y2ZlYWIoMHgxMWQpLF8weDFjYjAyNCYmXzB4MWNiMDI0WydtZXNzYWdlJ10pLCgpPT57fTt9fSk7cmV0dXJuIF8weDE4M2QxMT0+XzB4NWUzM2NiW18weDY1MDQwYigweDFkOCldKF8weDQwNGI0Zj0+XzB4NDA0YjRmKF8weDE4M2QxMSkpO31mdW5jdGlvbiBpZShfMHg1YTVkNmUsXzB4M2FiNTk0LF8weDNkMzk5ZSxfMHgzMDkxNjkpe3ZhciBfMHgyYjAyMTQ9XzB4MjE2MGRlO18weDMwOTE2OSYmXzB4NWE1ZDZlPT09XzB4MmIwMjE0KDB4MTFiKSYmXzB4M2QzOTllW18weDJiMDIxNCgweDE5MSldW18weDJiMDIxNCgweDExYildKCk7fWZ1bmN0aW9uIF8weDIxYTMoXzB4M2M0ZmQ3LF8weDI0NWFiZSl7dmFyIF8weDM2MzJjOD1fMHgzNjMyKCk7cmV0dXJuIF8weDIxYTM9ZnVuY3Rpb24oXzB4MjFhM2QxLF8weDI0ZDJkZSl7XzB4MjFhM2QxPV8weDIxYTNkMS0weGVlO3ZhciBfMHgzNDA2ZjU9XzB4MzYzMmM4W18weDIxYTNkMV07cmV0dXJuIF8weDM0MDZmNTt9LF8weDIxYTMoXzB4M2M0ZmQ3LF8weDI0NWFiZSk7fWZ1bmN0aW9uIEIoXzB4NDc5YWRlKXt2YXIgXzB4NTVlNGI2PV8weDIxNjBkZSxfMHgxZGI2ZGYsXzB4MjY3NWZjO2xldCBfMHgyNTNlODM9ZnVuY3Rpb24oXzB4NDYxY2IsXzB4NTFhZWY3KXtyZXR1cm4gXzB4NTFhZWY3LV8weDQ2MWNiO30sXzB4MjQ2NDhiO2lmKF8weDQ3OWFkZVtfMHg1NWU0YjYoMHgxMmMpXSlfMHgyNDY0OGI9ZnVuY3Rpb24oKXt2YXIgXzB4MjhjNDI4PV8weDU1ZTRiNjtyZXR1cm4gXzB4NDc5YWRlW18weDI4YzQyOCgweDEyYyldW18weDI4YzQyOCgweDEyOSldKCk7fTtlbHNle2lmKF8weDQ3OWFkZVtfMHg1NWU0YjYoMHgxZDEpXSYmXzB4NDc5YWRlW18weDU1ZTRiNigweDFkMSldW18weDU1ZTRiNigweDE0OCldJiYoKF8weDI2NzVmYz0oXzB4MWRiNmRmPV8weDQ3OWFkZVsncHJvY2VzcyddKT09bnVsbD92b2lkIDB4MDpfMHgxZGI2ZGZbXzB4NTVlNGI2KDB4MTZlKV0pPT1udWxsP3ZvaWQgMHgwOl8weDI2NzVmY1tfMHg1NWU0YjYoMHgxNjMpXSkhPT1fMHg1NWU0YjYoMHgxOTkpKV8weDI0NjQ4Yj1mdW5jdGlvbigpe3ZhciBfMHg0NGRjYzQ9XzB4NTVlNGI2O3JldHVybiBfMHg0NzlhZGVbXzB4NDRkY2M0KDB4MWQxKV1bXzB4NDRkY2M0KDB4MTQ4KV0oKTt9LF8weDI1M2U4Mz1mdW5jdGlvbihfMHgxZTExYzUsXzB4YTM3ZDU0KXtyZXR1cm4gMHgzZTgqKF8weGEzN2Q1NFsweDBdLV8weDFlMTFjNVsweDBdKSsoXzB4YTM3ZDU0WzB4MV0tXzB4MWUxMWM1WzB4MV0pLzB4ZjQyNDA7fTtlbHNlIHRyeXtsZXQge3BlcmZvcm1hbmNlOl8weDU2OGZkNn09cmVxdWlyZShfMHg1NWU0YjYoMHgxODUpKTtfMHgyNDY0OGI9ZnVuY3Rpb24oKXt2YXIgXzB4NWY1N2VkPV8weDU1ZTRiNjtyZXR1cm4gXzB4NTY4ZmQ2W18weDVmNTdlZCgweDEyOSldKCk7fTt9Y2F0Y2h7XzB4MjQ2NDhiPWZ1bmN0aW9uKCl7cmV0dXJuK25ldyBEYXRlKCk7fTt9fXJldHVybnsnZWxhcHNlZCc6XzB4MjUzZTgzLCd0aW1lU3RhbXAnOl8weDI0NjQ4Yiwnbm93JzooKT0+RGF0ZVsnbm93J10oKX07fWZ1bmN0aW9uIEgoXzB4MTBkY2NiLF8weDFlODBhZixfMHgzNTIxNzQpe3ZhciBfMHg0OTk3YWM9XzB4MjE2MGRlLF8weDViMWJhMixfMHgxMWY5YzAsXzB4MjdhYzkzLF8weDM2YjdhZixfMHgyYjQ4NzE7aWYoXzB4MTBkY2NiW18weDQ5OTdhYygweDE5ZCldIT09dm9pZCAweDApcmV0dXJuIF8weDEwZGNjYlsnX2NvbnNvbGVOaW5qYUFsbG93ZWRUb1N0YXJ0J107bGV0IF8weDM5MmI2Mz0oKF8weDExZjljMD0oXzB4NWIxYmEyPV8weDEwZGNjYltfMHg0OTk3YWMoMHgxZDEpXSk9PW51bGw/dm9pZCAweDA6XzB4NWIxYmEyW18weDQ5OTdhYygweDE4NCldKT09bnVsbD92b2lkIDB4MDpfMHgxMWY5YzBbXzB4NDk5N2FjKDB4MWExKV0pfHwoKF8weDM2YjdhZj0oXzB4MjdhYzkzPV8weDEwZGNjYltfMHg0OTk3YWMoMHgxZDEpXSk9PW51bGw/dm9pZCAweDA6XzB4MjdhYzkzWydlbnYnXSk9PW51bGw/dm9pZCAweDA6XzB4MzZiN2FmWydORVhUX1JVTlRJTUUnXSk9PT1fMHg0OTk3YWMoMHgxOTkpO2Z1bmN0aW9uIF8weDJkOGUwMihfMHgxNTQ0ZGIpe3ZhciBfMHgzNmRiZGE9XzB4NDk5N2FjO2lmKF8weDE1NDRkYlsnc3RhcnRzV2l0aCddKCcvJykmJl8weDE1NDRkYltfMHgzNmRiZGEoMHgxNjUpXSgnLycpKXtsZXQgXzB4NDk3NGZiPW5ldyBSZWdFeHAoXzB4MTU0NGRiW18weDM2ZGJkYSgweDFhZCldKDB4MSwtMHgxKSk7cmV0dXJuIF8weDE0MDFkMz0+XzB4NDk3NGZiW18weDM2ZGJkYSgweDE2ZildKF8weDE0MDFkMyk7fWVsc2V7aWYoXzB4MTU0NGRiW18weDM2ZGJkYSgweDE5OCldKCcqJyl8fF8weDE1NDRkYltfMHgzNmRiZGEoMHgxOTgpXSgnPycpKXtsZXQgXzB4MmNiM2I5PW5ldyBSZWdFeHAoJ14nK18weDE1NDRkYltfMHgzNmRiZGEoMHgxNDQpXSgvXFxcXC4vZyxTdHJpbmdbXzB4MzZkYmRhKDB4MTJmKV0oMHg1YykrJy4nKVsncmVwbGFjZSddKC9cXFxcKi9nLCcuKicpWydyZXBsYWNlJ10oL1xcXFw/L2csJy4nKStTdHJpbmdbJ2Zyb21DaGFyQ29kZSddKDB4MjQpKTtyZXR1cm4gXzB4MzIwYjk3PT5fMHgyY2IzYjlbXzB4MzZkYmRhKDB4MTZmKV0oXzB4MzIwYjk3KTt9ZWxzZSByZXR1cm4gXzB4M2Q3ODViPT5fMHgzZDc4NWI9PT1fMHgxNTQ0ZGI7fX1sZXQgXzB4MmJkYTVhPV8weDFlODBhZlsnbWFwJ10oXzB4MmQ4ZTAyKTtyZXR1cm4gXzB4MTBkY2NiWydfY29uc29sZU5pbmphQWxsb3dlZFRvU3RhcnQnXT1fMHgzOTJiNjN8fCFfMHgxZTgwYWYsIV8weDEwZGNjYltfMHg0OTk3YWMoMHgxOWQpXSYmKChfMHgyYjQ4NzE9XzB4MTBkY2NiW18weDQ5OTdhYygweDE5MSldKT09bnVsbD92b2lkIDB4MDpfMHgyYjQ4NzFbXzB4NDk5N2FjKDB4MTVhKV0pJiYoXzB4MTBkY2NiW18weDQ5OTdhYygweDE5ZCldPV8weDJiZGE1YVsnc29tZSddKF8weDQ1ZmU2Mz0+XzB4NDVmZTYzKF8weDEwZGNjYltfMHg0OTk3YWMoMHgxOTEpXVtfMHg0OTk3YWMoMHgxNWEpXSkpKSxfMHgxMGRjY2JbXzB4NDk5N2FjKDB4MTlkKV07fWZ1bmN0aW9uIFgoXzB4M2U3N2MwLF8weDM2ODUwMixfMHgzZDJkNGMsXzB4MzkxZmI0KXt2YXIgXzB4MTQ0YTc5PV8weDIxNjBkZTtfMHgzZTc3YzA9XzB4M2U3N2MwLF8weDM2ODUwMj1fMHgzNjg1MDIsXzB4M2QyZDRjPV8weDNkMmQ0YyxfMHgzOTFmYjQ9XzB4MzkxZmI0O2xldCBfMHg4M2M3NDM9QihfMHgzZTc3YzApLF8weDQ3YTM5NT1fMHg4M2M3NDNbXzB4MTQ0YTc5KDB4ZjApXSxfMHgyNGQxMzA9XzB4ODNjNzQzWyd0aW1lU3RhbXAnXTtjbGFzcyBfMHg0ZTEzOGN7Y29uc3RydWN0b3IoKXt2YXIgXzB4NTBkZjBmPV8weDE0NGE3OTt0aGlzWydfa2V5U3RyUmVnRXhwJ109L14oPyEoPzpkb3xpZnxpbnxmb3J8bGV0fG5ld3x0cnl8dmFyfGNhc2V8ZWxzZXxlbnVtfGV2YWx8ZmFsc2V8bnVsbHx0aGlzfHRydWV8dm9pZHx3aXRofGJyZWFrfGNhdGNofGNsYXNzfGNvbnN0fHN1cGVyfHRocm93fHdoaWxlfHlpZWxkfGRlbGV0ZXxleHBvcnR8aW1wb3J0fHB1YmxpY3xyZXR1cm58c3RhdGljfHN3aXRjaHx0eXBlb2Z8ZGVmYXVsdHxleHRlbmRzfGZpbmFsbHl8cGFja2FnZXxwcml2YXRlfGNvbnRpbnVlfGRlYnVnZ2VyfGZ1bmN0aW9ufGFyZ3VtZW50c3xpbnRlcmZhY2V8cHJvdGVjdGVkfGltcGxlbWVudHN8aW5zdGFuY2VvZikkKVtfJGEtekEtWlxcXFx4QTAtXFxcXHVGRkZGXVtfJGEtekEtWjAtOVxcXFx4QTAtXFxcXHVGRkZGXSokLyx0aGlzW18weDUwZGYwZigweDEwOCldPS9eKDB8WzEtOV1bMC05XSopJC8sdGhpc1tfMHg1MGRmMGYoMHgxYjUpXT0vJyhbXlxcXFxcXFxcJ118XFxcXFxcXFwnKSonLyx0aGlzW18weDUwZGYwZigweDE2OCldPV8weDNlNzdjMFtfMHg1MGRmMGYoMHgxYTkpXSx0aGlzW18weDUwZGYwZigweDE4MCldPV8weDNlNzdjMFtfMHg1MGRmMGYoMHgxNTcpXSx0aGlzW18weDUwZGYwZigweDFjMildPU9iamVjdFtfMHg1MGRmMGYoMHgxMzEpXSx0aGlzW18weDUwZGYwZigweDE3YSldPU9iamVjdFtfMHg1MGRmMGYoMHgxOGMpXSx0aGlzW18weDUwZGYwZigweDEzNCldPV8weDNlNzdjMFsnU3ltYm9sJ10sdGhpc1tfMHg1MGRmMGYoMHgxZGIpXT1SZWdFeHBbXzB4NTBkZjBmKDB4MWU4KV1bJ3RvU3RyaW5nJ10sdGhpc1tfMHg1MGRmMGYoMHgxOGYpXT1EYXRlWydwcm90b3R5cGUnXVtfMHg1MGRmMGYoMHhmZildO31bXzB4MTQ0YTc5KDB4MTVlKV0oXzB4NTQxNmQ3LF8weDExNjAxMixfMHg0MDY0ZSxfMHg1ZDI0OWEpe3ZhciBfMHgyNzY4MjI9XzB4MTQ0YTc5LF8weDQ5ZTZkNT10aGlzLF8weDU3YjdhZT1fMHg0MDY0ZVtfMHgyNzY4MjIoMHgxMGIpXTtmdW5jdGlvbiBfMHgzYjNmNmEoXzB4NWQ2OGEwLF8weDc5MDI5MCxfMHg1ZDY3YTcpe3ZhciBfMHgzOTUwNDY9XzB4Mjc2ODIyO18weDc5MDI5MFtfMHgzOTUwNDYoMHgxMjMpXT1fMHgzOTUwNDYoMHgxYjYpLF8weDc5MDI5MFtfMHgzOTUwNDYoMHgxNzQpXT1fMHg1ZDY4YTBbXzB4Mzk1MDQ2KDB4MWFlKV0sXzB4M2Q3MGY4PV8weDVkNjdhN1snbm9kZSddW18weDM5NTA0NigweDFiYyldLF8weDVkNjdhN1tfMHgzOTUwNDYoMHgxYTEpXVtfMHgzOTUwNDYoMHgxYmMpXT1fMHg3OTAyOTAsXzB4NDllNmQ1W18weDM5NTA0NigweGYxKV0oXzB4NzkwMjkwLF8weDVkNjdhNyk7fXRyeXtfMHg0MDY0ZVtfMHgyNzY4MjIoMHgxNzEpXSsrLF8weDQwNjRlW18weDI3NjgyMigweDEwYildJiZfMHg0MDY0ZVsnYXV0b0V4cGFuZFByZXZpb3VzT2JqZWN0cyddW18weDI3NjgyMigweGY5KV0oXzB4MTE2MDEyKTt2YXIgXzB4NDA5ODA5LF8weDRiMTFkNixfMHg0YzUxOWMsXzB4NzcxMTZmLF8weDIyYjVhMT1bXSxfMHg1OTg4YmQ9W10sXzB4MzllZTNiLF8weDIxZDNmOD10aGlzWydfdHlwZSddKF8weDExNjAxMiksXzB4MmQxNTA0PV8weDIxZDNmOD09PV8weDI3NjgyMigweDEyYiksXzB4YjM4MWRlPSEweDEsXzB4MmFhMGE5PV8weDIxZDNmOD09PSdmdW5jdGlvbicsXzB4M2ZkYzhhPXRoaXNbXzB4Mjc2ODIyKDB4MWUyKV0oXzB4MjFkM2Y4KSxfMHgyNzk1YzY9dGhpc1snX2lzUHJpbWl0aXZlV3JhcHBlclR5cGUnXShfMHgyMWQzZjgpLF8weDU5OTViYT1fMHgzZmRjOGF8fF8weDI3OTVjNixfMHgxMTM0YjQ9e30sXzB4M2U2MTdiPTB4MCxfMHgzNGI4Mzg9ITB4MSxfMHgzZDcwZjgsXzB4NDQ4MzkyPS9eKChbMS05XXsxfVswLTldKil8MCkkLztpZihfMHg0MDY0ZVtfMHgyNzY4MjIoMHgxMjUpXSl7aWYoXzB4MmQxNTA0KXtpZihfMHg0YjExZDY9XzB4MTE2MDEyWydsZW5ndGgnXSxfMHg0YjExZDY+XzB4NDA2NGVbJ2VsZW1lbnRzJ10pe2ZvcihfMHg0YzUxOWM9MHgwLF8weDc3MTE2Zj1fMHg0MDY0ZVtfMHgyNzY4MjIoMHgxMjIpXSxfMHg0MDk4MDk9XzB4NGM1MTljO18weDQwOTgwOTxfMHg3NzExNmY7XzB4NDA5ODA5KyspXzB4NTk4OGJkWydwdXNoJ10oXzB4NDllNmQ1W18weDI3NjgyMigweGY1KV0oXzB4MjJiNWExLF8weDExNjAxMixfMHgyMWQzZjgsXzB4NDA5ODA5LF8weDQwNjRlKSk7XzB4NTQxNmQ3W18weDI3NjgyMigweDFkMyldPSEweDA7fWVsc2V7Zm9yKF8weDRjNTE5Yz0weDAsXzB4NzcxMTZmPV8weDRiMTFkNixfMHg0MDk4MDk9XzB4NGM1MTljO18weDQwOTgwOTxfMHg3NzExNmY7XzB4NDA5ODA5KyspXzB4NTk4OGJkW18weDI3NjgyMigweGY5KV0oXzB4NDllNmQ1W18weDI3NjgyMigweGY1KV0oXzB4MjJiNWExLF8weDExNjAxMixfMHgyMWQzZjgsXzB4NDA5ODA5LF8weDQwNjRlKSk7fV8weDQwNjRlW18weDI3NjgyMigweDFiOCldKz1fMHg1OTg4YmRbXzB4Mjc2ODIyKDB4MTNmKV07fWlmKCEoXzB4MjFkM2Y4PT09XzB4Mjc2ODIyKDB4MWNlKXx8XzB4MjFkM2Y4PT09J3VuZGVmaW5lZCcpJiYhXzB4M2ZkYzhhJiZfMHgyMWQzZjghPT1fMHgyNzY4MjIoMHhmMykmJl8weDIxZDNmOCE9PV8weDI3NjgyMigweDE0YikmJl8weDIxZDNmOCE9PV8weDI3NjgyMigweDFlMSkpe3ZhciBfMHg1YmJjNTk9XzB4NWQyNDlhW18weDI3NjgyMigweDEwOSldfHxfMHg0MDY0ZVsncHJvcHMnXTtpZih0aGlzWydfaXNTZXQnXShfMHgxMTYwMTIpPyhfMHg0MDk4MDk9MHgwLF8weDExNjAxMltfMHgyNzY4MjIoMHgxZDgpXShmdW5jdGlvbihfMHgzNzA5MjYpe3ZhciBfMHgzN2ViMGQ9XzB4Mjc2ODIyO2lmKF8weDNlNjE3YisrLF8weDQwNjRlW18weDM3ZWIwZCgweDFiOCldKyssXzB4M2U2MTdiPl8weDViYmM1OSl7XzB4MzRiODM4PSEweDA7cmV0dXJuO31pZighXzB4NDA2NGVbXzB4MzdlYjBkKDB4MWMwKV0mJl8weDQwNjRlW18weDM3ZWIwZCgweDEwYildJiZfMHg0MDY0ZVsnYXV0b0V4cGFuZFByb3BlcnR5Q291bnQnXT5fMHg0MDY0ZVtfMHgzN2ViMGQoMHgxNGUpXSl7XzB4MzRiODM4PSEweDA7cmV0dXJuO31fMHg1OTg4YmRbJ3B1c2gnXShfMHg0OWU2ZDVbJ19hZGRQcm9wZXJ0eSddKF8weDIyYjVhMSxfMHgxMTYwMTIsXzB4MzdlYjBkKDB4ZmMpLF8weDQwOTgwOSsrLF8weDQwNjRlLGZ1bmN0aW9uKF8weDFiMDEwYSl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIF8weDFiMDEwYTt9O30oXzB4MzcwOTI2KSkpO30pKTp0aGlzW18weDI3NjgyMigweDE3NildKF8weDExNjAxMikmJl8weDExNjAxMlsnZm9yRWFjaCddKGZ1bmN0aW9uKF8weDNlOTY2NCxfMHgyODNkYzEpe3ZhciBfMHg2YjlmOWI9XzB4Mjc2ODIyO2lmKF8weDNlNjE3YisrLF8weDQwNjRlWydhdXRvRXhwYW5kUHJvcGVydHlDb3VudCddKyssXzB4M2U2MTdiPl8weDViYmM1OSl7XzB4MzRiODM4PSEweDA7cmV0dXJuO31pZighXzB4NDA2NGVbXzB4NmI5ZjliKDB4MWMwKV0mJl8weDQwNjRlW18weDZiOWY5YigweDEwYildJiZfMHg0MDY0ZVtfMHg2YjlmOWIoMHgxYjgpXT5fMHg0MDY0ZVtfMHg2YjlmOWIoMHgxNGUpXSl7XzB4MzRiODM4PSEweDA7cmV0dXJuO312YXIgXzB4NDI0NDdlPV8weDI4M2RjMVtfMHg2YjlmOWIoMHhmZildKCk7XzB4NDI0NDdlW18weDZiOWY5YigweDEzZildPjB4NjQmJihfMHg0MjQ0N2U9XzB4NDI0NDdlW18weDZiOWY5YigweDFhZCldKDB4MCwweDY0KStfMHg2YjlmOWIoMHgxNDMpKSxfMHg1OTg4YmRbJ3B1c2gnXShfMHg0OWU2ZDVbJ19hZGRQcm9wZXJ0eSddKF8weDIyYjVhMSxfMHgxMTYwMTIsJ01hcCcsXzB4NDI0NDdlLF8weDQwNjRlLGZ1bmN0aW9uKF8weDQ5MGVhZil7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIF8weDQ5MGVhZjt9O30oXzB4M2U5NjY0KSkpO30pLCFfMHhiMzgxZGUpe3RyeXtmb3IoXzB4MzllZTNiIGluIF8weDExNjAxMilpZighKF8weDJkMTUwNCYmXzB4NDQ4MzkyWyd0ZXN0J10oXzB4MzllZTNiKSkmJiF0aGlzW18weDI3NjgyMigweDE1MSldKF8weDExNjAxMixfMHgzOWVlM2IsXzB4NDA2NGUpKXtpZihfMHgzZTYxN2IrKyxfMHg0MDY0ZVtfMHgyNzY4MjIoMHgxYjgpXSsrLF8weDNlNjE3Yj5fMHg1YmJjNTkpe18weDM0YjgzOD0hMHgwO2JyZWFrO31pZighXzB4NDA2NGVbXzB4Mjc2ODIyKDB4MWMwKV0mJl8weDQwNjRlWydhdXRvRXhwYW5kJ10mJl8weDQwNjRlW18weDI3NjgyMigweDFiOCldPl8weDQwNjRlW18weDI3NjgyMigweDE0ZSldKXtfMHgzNGI4Mzg9ITB4MDticmVhazt9XzB4NTk4OGJkW18weDI3NjgyMigweGY5KV0oXzB4NDllNmQ1W18weDI3NjgyMigweDExNyldKF8weDIyYjVhMSxfMHgxMTM0YjQsXzB4MTE2MDEyLF8weDIxZDNmOCxfMHgzOWVlM2IsXzB4NDA2NGUpKTt9fWNhdGNoe31pZihfMHgxMTM0YjRbJ19wX2xlbmd0aCddPSEweDAsXzB4MmFhMGE5JiYoXzB4MTEzNGI0W18weDI3NjgyMigweDFhNildPSEweDApLCFfMHgzNGI4Mzgpe3ZhciBfMHg0NmZhYmI9W11bXzB4Mjc2ODIyKDB4MWE1KV0odGhpc1tfMHgyNzY4MjIoMHgxN2EpXShfMHgxMTYwMTIpKVtfMHgyNzY4MjIoMHgxYTUpXSh0aGlzWydfZ2V0T3duUHJvcGVydHlTeW1ib2xzJ10oXzB4MTE2MDEyKSk7Zm9yKF8weDQwOTgwOT0weDAsXzB4NGIxMWQ2PV8weDQ2ZmFiYlsnbGVuZ3RoJ107XzB4NDA5ODA5PF8weDRiMTFkNjtfMHg0MDk4MDkrKylpZihfMHgzOWVlM2I9XzB4NDZmYWJiW18weDQwOTgwOV0sIShfMHgyZDE1MDQmJl8weDQ0ODM5MltfMHgyNzY4MjIoMHgxNmYpXShfMHgzOWVlM2JbXzB4Mjc2ODIyKDB4ZmYpXSgpKSkmJiF0aGlzW18weDI3NjgyMigweDE1MSldKF8weDExNjAxMixfMHgzOWVlM2IsXzB4NDA2NGUpJiYhXzB4MTEzNGI0W18weDI3NjgyMigweDE2MikrXzB4MzllZTNiW18weDI3NjgyMigweGZmKV0oKV0pe2lmKF8weDNlNjE3YisrLF8weDQwNjRlWydhdXRvRXhwYW5kUHJvcGVydHlDb3VudCddKyssXzB4M2U2MTdiPl8weDViYmM1OSl7XzB4MzRiODM4PSEweDA7YnJlYWs7fWlmKCFfMHg0MDY0ZVsnaXNFeHByZXNzaW9uVG9FdmFsdWF0ZSddJiZfMHg0MDY0ZVtfMHgyNzY4MjIoMHgxMGIpXSYmXzB4NDA2NGVbJ2F1dG9FeHBhbmRQcm9wZXJ0eUNvdW50J10+XzB4NDA2NGVbXzB4Mjc2ODIyKDB4MTRlKV0pe18weDM0YjgzOD0hMHgwO2JyZWFrO31fMHg1OTg4YmRbXzB4Mjc2ODIyKDB4ZjkpXShfMHg0OWU2ZDVbXzB4Mjc2ODIyKDB4MTE3KV0oXzB4MjJiNWExLF8weDExMzRiNCxfMHgxMTYwMTIsXzB4MjFkM2Y4LF8weDM5ZWUzYixfMHg0MDY0ZSkpO319fX19aWYoXzB4NTQxNmQ3W18weDI3NjgyMigweDEyMyldPV8weDIxZDNmOCxfMHg1OTk1YmE/KF8weDU0MTZkN1tfMHgyNzY4MjIoMHgxMTgpXT1fMHgxMTYwMTJbXzB4Mjc2ODIyKDB4MWNhKV0oKSx0aGlzW18weDI3NjgyMigweDFhMyldKF8weDIxZDNmOCxfMHg1NDE2ZDcsXzB4NDA2NGUsXzB4NWQyNDlhKSk6XzB4MjFkM2Y4PT09XzB4Mjc2ODIyKDB4MThlKT9fMHg1NDE2ZDdbXzB4Mjc2ODIyKDB4MTE4KV09dGhpc1tfMHgyNzY4MjIoMHgxOGYpXVsnY2FsbCddKF8weDExNjAxMik6XzB4MjFkM2Y4PT09XzB4Mjc2ODIyKDB4MWUxKT9fMHg1NDE2ZDdbXzB4Mjc2ODIyKDB4MTE4KV09XzB4MTE2MDEyW18weDI3NjgyMigweGZmKV0oKTpfMHgyMWQzZjg9PT1fMHgyNzY4MjIoMHgxZDkpP18weDU0MTZkN1tfMHgyNzY4MjIoMHgxMTgpXT10aGlzW18weDI3NjgyMigweDFkYildW18weDI3NjgyMigweDEyZCldKF8weDExNjAxMik6XzB4MjFkM2Y4PT09XzB4Mjc2ODIyKDB4ZmIpJiZ0aGlzWydfU3ltYm9sJ10/XzB4NTQxNmQ3W18weDI3NjgyMigweDExOCldPXRoaXNbXzB4Mjc2ODIyKDB4MTM0KV1bJ3Byb3RvdHlwZSddWyd0b1N0cmluZyddW18weDI3NjgyMigweDEyZCldKF8weDExNjAxMik6IV8weDQwNjRlW18weDI3NjgyMigweDEyNSldJiYhKF8weDIxZDNmOD09PV8weDI3NjgyMigweDFjZSl8fF8weDIxZDNmOD09PV8weDI3NjgyMigweDFhOSkpJiYoZGVsZXRlIF8weDU0MTZkN1tfMHgyNzY4MjIoMHgxMTgpXSxfMHg1NDE2ZDdbXzB4Mjc2ODIyKDB4MTVkKV09ITB4MCksXzB4MzRiODM4JiYoXzB4NTQxNmQ3W18weDI3NjgyMigweDEzYildPSEweDApLF8weDNkNzBmOD1fMHg0MDY0ZVtfMHgyNzY4MjIoMHgxYTEpXVtfMHgyNzY4MjIoMHgxYmMpXSxfMHg0MDY0ZVtfMHgyNzY4MjIoMHgxYTEpXVsnY3VycmVudCddPV8weDU0MTZkNyx0aGlzW18weDI3NjgyMigweGYxKV0oXzB4NTQxNmQ3LF8weDQwNjRlKSxfMHg1OTg4YmRbXzB4Mjc2ODIyKDB4MTNmKV0pe2ZvcihfMHg0MDk4MDk9MHgwLF8weDRiMTFkNj1fMHg1OTg4YmRbXzB4Mjc2ODIyKDB4MTNmKV07XzB4NDA5ODA5PF8weDRiMTFkNjtfMHg0MDk4MDkrKylfMHg1OTg4YmRbXzB4NDA5ODA5XShfMHg0MDk4MDkpO31fMHgyMmI1YTFbXzB4Mjc2ODIyKDB4MTNmKV0mJihfMHg1NDE2ZDdbXzB4Mjc2ODIyKDB4MTA5KV09XzB4MjJiNWExKTt9Y2F0Y2goXzB4NTQ1Y2ZjKXtfMHgzYjNmNmEoXzB4NTQ1Y2ZjLF8weDU0MTZkNyxfMHg0MDY0ZSk7fXJldHVybiB0aGlzW18weDI3NjgyMigweDEzMildKF8weDExNjAxMixfMHg1NDE2ZDcpLHRoaXNbXzB4Mjc2ODIyKDB4MTAzKV0oXzB4NTQxNmQ3LF8weDQwNjRlKSxfMHg0MDY0ZVsnbm9kZSddW18weDI3NjgyMigweDFiYyldPV8weDNkNzBmOCxfMHg0MDY0ZVtfMHgyNzY4MjIoMHgxNzEpXS0tLF8weDQwNjRlW18weDI3NjgyMigweDEwYildPV8weDU3YjdhZSxfMHg0MDY0ZVsnYXV0b0V4cGFuZCddJiZfMHg0MDY0ZVtfMHgyNzY4MjIoMHgxNjkpXVtfMHgyNzY4MjIoMHgxY2IpXSgpLF8weDU0MTZkNzt9W18weDE0NGE3OSgweDFiZildKF8weDM0MmVjZil7cmV0dXJuIE9iamVjdFsnZ2V0T3duUHJvcGVydHlTeW1ib2xzJ10/T2JqZWN0WydnZXRPd25Qcm9wZXJ0eVN5bWJvbHMnXShfMHgzNDJlY2YpOltdO31bXzB4MTQ0YTc5KDB4MWM0KV0oXzB4NWJhMmFlKXt2YXIgXzB4NWE3Njg3PV8weDE0NGE3OTtyZXR1cm4hIShfMHg1YmEyYWUmJl8weDNlNzdjMFtfMHg1YTc2ODcoMHhmYyldJiZ0aGlzWydfb2JqZWN0VG9TdHJpbmcnXShfMHg1YmEyYWUpPT09XzB4NWE3Njg3KDB4MWUwKSYmXzB4NWJhMmFlW18weDVhNzY4NygweDFkOCldKTt9W18weDE0NGE3OSgweDE1MSldKF8weDFjYjE3NixfMHgyMWY2ZmYsXzB4MjJjZGE1KXt2YXIgXzB4MjIzYjg0PV8weDE0NGE3OTtyZXR1cm4gXzB4MjJjZGE1W18weDIyM2I4NCgweDExYSldP3R5cGVvZiBfMHgxY2IxNzZbXzB4MjFmNmZmXT09XzB4MjIzYjg0KDB4MWRmKTohMHgxO31bXzB4MTQ0YTc5KDB4MWI5KV0oXzB4MTRmYmY1KXt2YXIgXzB4NTQwZGZlPV8weDE0NGE3OSxfMHgyMWQzN2U9Jyc7cmV0dXJuIF8weDIxZDM3ZT10eXBlb2YgXzB4MTRmYmY1LF8weDIxZDM3ZT09PV8weDU0MGRmZSgweGYyKT90aGlzWydfb2JqZWN0VG9TdHJpbmcnXShfMHgxNGZiZjUpPT09XzB4NTQwZGZlKDB4ZWYpP18weDIxZDM3ZT1fMHg1NDBkZmUoMHgxMmIpOnRoaXNbXzB4NTQwZGZlKDB4MWE0KV0oXzB4MTRmYmY1KT09PV8weDU0MGRmZSgweDFkMCk/XzB4MjFkMzdlPSdkYXRlJzp0aGlzW18weDU0MGRmZSgweDFhNCldKF8weDE0ZmJmNSk9PT1fMHg1NDBkZmUoMHgxNzkpP18weDIxZDM3ZT1fMHg1NDBkZmUoMHgxZTEpOl8weDE0ZmJmNT09PW51bGw/XzB4MjFkMzdlPV8weDU0MGRmZSgweDFjZSk6XzB4MTRmYmY1W18weDU0MGRmZSgweDEwZSldJiYoXzB4MjFkMzdlPV8weDE0ZmJmNVsnY29uc3RydWN0b3InXVtfMHg1NDBkZmUoMHhmZSldfHxfMHgyMWQzN2UpOl8weDIxZDM3ZT09PV8weDU0MGRmZSgweDFhOSkmJnRoaXNbXzB4NTQwZGZlKDB4MTgwKV0mJl8weDE0ZmJmNSBpbnN0YW5jZW9mIHRoaXNbJ19IVE1MQWxsQ29sbGVjdGlvbiddJiYoXzB4MjFkMzdlPV8weDU0MGRmZSgweDE1NykpLF8weDIxZDM3ZTt9W18weDE0NGE3OSgweDFhNCldKF8weDhlMmMzMyl7dmFyIF8weDI1MjI3Nz1fMHgxNDRhNzk7cmV0dXJuIE9iamVjdFtfMHgyNTIyNzcoMHgxZTgpXVsndG9TdHJpbmcnXVtfMHgyNTIyNzcoMHgxMmQpXShfMHg4ZTJjMzMpO31bXzB4MTQ0YTc5KDB4MWUyKV0oXzB4NTc1NzQxKXt2YXIgXzB4MjNkODkxPV8weDE0NGE3OTtyZXR1cm4gXzB4NTc1NzQxPT09XzB4MjNkODkxKDB4MThhKXx8XzB4NTc1NzQxPT09J3N0cmluZyd8fF8weDU3NTc0MT09PV8weDIzZDg5MSgweDEzMyk7fVtfMHgxNDRhNzkoMHgxMDEpXShfMHg0NDU2Yjcpe3ZhciBfMHgyZGU4Mzc9XzB4MTQ0YTc5O3JldHVybiBfMHg0NDU2Yjc9PT1fMHgyZGU4MzcoMHgxNDApfHxfMHg0NDU2Yjc9PT0nU3RyaW5nJ3x8XzB4NDQ1NmI3PT09XzB4MmRlODM3KDB4MTM1KTt9W18weDE0NGE3OSgweGY1KV0oXzB4NDM1NGY1LF8weDJlNjYxMyxfMHg1ODc0YjUsXzB4NTYxY2E4LF8weDIyZTlmYSxfMHhmN2FmMWMpe3ZhciBfMHgxY2Y1NjQ9dGhpcztyZXR1cm4gZnVuY3Rpb24oXzB4Mzg0OTQwKXt2YXIgXzB4NTk4MTI4PV8weDIxYTMsXzB4MWM3YzBiPV8weDIyZTlmYVtfMHg1OTgxMjgoMHgxYTEpXVtfMHg1OTgxMjgoMHgxYmMpXSxfMHg0NmMwMGM9XzB4MjJlOWZhW18weDU5ODEyOCgweDFhMSldW18weDU5ODEyOCgweDEwYSldLF8weDE2YmUwYj1fMHgyMmU5ZmFbXzB4NTk4MTI4KDB4MWExKV1bXzB4NTk4MTI4KDB4MTFjKV07XzB4MjJlOWZhW18weDU5ODEyOCgweDFhMSldW18weDU5ODEyOCgweDExYyldPV8weDFjN2MwYixfMHgyMmU5ZmFbXzB4NTk4MTI4KDB4MWExKV1bXzB4NTk4MTI4KDB4MTBhKV09dHlwZW9mIF8weDU2MWNhOD09J251bWJlcic/XzB4NTYxY2E4Ol8weDM4NDk0MCxfMHg0MzU0ZjVbXzB4NTk4MTI4KDB4ZjkpXShfMHgxY2Y1NjRbJ19wcm9wZXJ0eSddKF8weDJlNjYxMyxfMHg1ODc0YjUsXzB4NTYxY2E4LF8weDIyZTlmYSxfMHhmN2FmMWMpKSxfMHgyMmU5ZmFbXzB4NTk4MTI4KDB4MWExKV1bXzB4NTk4MTI4KDB4MTFjKV09XzB4MTZiZTBiLF8weDIyZTlmYVsnbm9kZSddWydpbmRleCddPV8weDQ2YzAwYzt9O31bXzB4MTQ0YTc5KDB4MTE3KV0oXzB4NThkMDU2LF8weDNmM2Q4MSxfMHg0MjNmMTUsXzB4N2VhYTZlLF8weGQ4ZTgwLF8weDU3NzgwZixfMHg0ZGZmYmMpe3ZhciBfMHgzMmExNDY9XzB4MTQ0YTc5LF8weDQxZWZhOD10aGlzO3JldHVybiBfMHgzZjNkODFbXzB4MzJhMTQ2KDB4MTYyKStfMHhkOGU4MFsndG9TdHJpbmcnXSgpXT0hMHgwLGZ1bmN0aW9uKF8weDRkOTIwYil7dmFyIF8weDQ5YjVjMj1fMHgzMmExNDYsXzB4NWFjMTNjPV8weDU3NzgwZltfMHg0OWI1YzIoMHgxYTEpXVtfMHg0OWI1YzIoMHgxYmMpXSxfMHgzYjJlN2Y9XzB4NTc3ODBmWydub2RlJ11bXzB4NDliNWMyKDB4MTBhKV0sXzB4MTg4Y2YzPV8weDU3NzgwZltfMHg0OWI1YzIoMHgxYTEpXVsncGFyZW50J107XzB4NTc3ODBmW18weDQ5YjVjMigweDFhMSldW18weDQ5YjVjMigweDExYyldPV8weDVhYzEzYyxfMHg1Nzc4MGZbJ25vZGUnXVtfMHg0OWI1YzIoMHgxMGEpXT1fMHg0ZDkyMGIsXzB4NThkMDU2W18weDQ5YjVjMigweGY5KV0oXzB4NDFlZmE4W18weDQ5YjVjMigweDExZSldKF8weDQyM2YxNSxfMHg3ZWFhNmUsXzB4ZDhlODAsXzB4NTc3ODBmLF8weDRkZmZiYykpLF8weDU3NzgwZltfMHg0OWI1YzIoMHgxYTEpXVtfMHg0OWI1YzIoMHgxMWMpXT1fMHgxODhjZjMsXzB4NTc3ODBmW18weDQ5YjVjMigweDFhMSldW18weDQ5YjVjMigweDEwYSldPV8weDNiMmU3Zjt9O31bXzB4MTQ0YTc5KDB4MTFlKV0oXzB4MzBkNTk0LF8weDMxM2M2MCxfMHgxMTZiM2YsXzB4MTEwNTI4LF8weDRjOWFjMCl7dmFyIF8weDg2MGJhZD1fMHgxNDRhNzksXzB4M2M2MWMyPXRoaXM7XzB4NGM5YWMwfHwoXzB4NGM5YWMwPWZ1bmN0aW9uKF8weDM3NGZjZixfMHgzNDFmZGQpe3JldHVybiBfMHgzNzRmY2ZbXzB4MzQxZmRkXTt9KTt2YXIgXzB4NWViYzhjPV8weDExNmIzZltfMHg4NjBiYWQoMHhmZildKCksXzB4MzJmNjczPV8weDExMDUyOFtfMHg4NjBiYWQoMHgxODEpXXx8e30sXzB4Mzg5NjhlPV8weDExMDUyOFsnZGVwdGgnXSxfMHhkNzI3N2Q9XzB4MTEwNTI4W18weDg2MGJhZCgweDFjMCldO3RyeXt2YXIgXzB4MTRiODVmPXRoaXNbJ19pc01hcCddKF8weDMwZDU5NCksXzB4MzE2Zjc4PV8weDVlYmM4YztfMHgxNGI4NWYmJl8weDMxNmY3OFsweDBdPT09J1xcXFx4MjcnJiYoXzB4MzE2Zjc4PV8weDMxNmY3OFtfMHg4NjBiYWQoMHgxMTIpXSgweDEsXzB4MzE2Zjc4WydsZW5ndGgnXS0weDIpKTt2YXIgXzB4NDA5OWQ4PV8weDExMDUyOFtfMHg4NjBiYWQoMHgxODEpXT1fMHgzMmY2NzNbJ19wXycrXzB4MzE2Zjc4XTtfMHg0MDk5ZDgmJihfMHgxMTA1MjhbXzB4ODYwYmFkKDB4MTI1KV09XzB4MTEwNTI4W18weDg2MGJhZCgweDEyNSldKzB4MSksXzB4MTEwNTI4W18weDg2MGJhZCgweDFjMCldPSEhXzB4NDA5OWQ4O3ZhciBfMHgyOGY3ZmQ9dHlwZW9mIF8weDExNmIzZj09XzB4ODYwYmFkKDB4ZmIpLF8weDMzYTBkMD17J25hbWUnOl8weDI4ZjdmZHx8XzB4MTRiODVmP18weDVlYmM4Yzp0aGlzW18weDg2MGJhZCgweDFjZildKF8weDVlYmM4Yyl9O2lmKF8weDI4ZjdmZCYmKF8weDMzYTBkMFtfMHg4NjBiYWQoMHhmYildPSEweDApLCEoXzB4MzEzYzYwPT09XzB4ODYwYmFkKDB4MTJiKXx8XzB4MzEzYzYwPT09J0Vycm9yJykpe3ZhciBfMHgxZGI0YTU9dGhpc1tfMHg4NjBiYWQoMHgxYzIpXShfMHgzMGQ1OTQsXzB4MTE2YjNmKTtpZihfMHgxZGI0YTUmJihfMHgxZGI0YTVbXzB4ODYwYmFkKDB4MTg4KV0mJihfMHgzM2EwZDBbXzB4ODYwYmFkKDB4MWQ0KV09ITB4MCksXzB4MWRiNGE1W18weDg2MGJhZCgweDEzNildJiYhXzB4NDA5OWQ4JiYhXzB4MTEwNTI4W18weDg2MGJhZCgweDE3YildKSlyZXR1cm4gXzB4MzNhMGQwW18weDg2MGJhZCgweDExZildPSEweDAsdGhpc1snX3Byb2Nlc3NUcmVlTm9kZVJlc3VsdCddKF8weDMzYTBkMCxfMHgxMTA1MjgpLF8weDMzYTBkMDt9dmFyIF8weDQ1ZWVmMjt0cnl7XzB4NDVlZWYyPV8weDRjOWFjMChfMHgzMGQ1OTQsXzB4MTE2YjNmKTt9Y2F0Y2goXzB4MzQ5Mjc2KXtyZXR1cm4gXzB4MzNhMGQwPXsnbmFtZSc6XzB4NWViYzhjLCd0eXBlJzondW5rbm93bicsJ2Vycm9yJzpfMHgzNDkyNzZbXzB4ODYwYmFkKDB4MWFlKV19LHRoaXNbXzB4ODYwYmFkKDB4MTIwKV0oXzB4MzNhMGQwLF8weDExMDUyOCksXzB4MzNhMGQwO312YXIgXzB4NTM5Mzk0PXRoaXNbXzB4ODYwYmFkKDB4MWI5KV0oXzB4NDVlZWYyKSxfMHg0OTBjODI9dGhpc1tfMHg4NjBiYWQoMHgxZTIpXShfMHg1MzkzOTQpO2lmKF8weDMzYTBkMFtfMHg4NjBiYWQoMHgxMjMpXT1fMHg1MzkzOTQsXzB4NDkwYzgyKXRoaXNbXzB4ODYwYmFkKDB4MTIwKV0oXzB4MzNhMGQwLF8weDExMDUyOCxfMHg0NWVlZjIsZnVuY3Rpb24oKXt2YXIgXzB4NWEzNzQ5PV8weDg2MGJhZDtfMHgzM2EwZDBbXzB4NWEzNzQ5KDB4MTE4KV09XzB4NDVlZWYyWyd2YWx1ZU9mJ10oKSwhXzB4NDA5OWQ4JiZfMHgzYzYxYzJbXzB4NWEzNzQ5KDB4MWEzKV0oXzB4NTM5Mzk0LF8weDMzYTBkMCxfMHgxMTA1Mjgse30pO30pO2Vsc2V7dmFyIF8weDNjZTliMT1fMHgxMTA1MjhbJ2F1dG9FeHBhbmQnXSYmXzB4MTEwNTI4W18weDg2MGJhZCgweDE3MSldPF8weDExMDUyOFtfMHg4NjBiYWQoMHgxY2QpXSYmXzB4MTEwNTI4W18weDg2MGJhZCgweDE2OSldW18weDg2MGJhZCgweDExMSldKF8weDQ1ZWVmMik8MHgwJiZfMHg1MzkzOTQhPT0nZnVuY3Rpb24nJiZfMHgxMTA1MjhbJ2F1dG9FeHBhbmRQcm9wZXJ0eUNvdW50J108XzB4MTEwNTI4W18weDg2MGJhZCgweDE0ZSldO18weDNjZTliMXx8XzB4MTEwNTI4W18weDg2MGJhZCgweDE3MSldPF8weDM4OTY4ZXx8XzB4NDA5OWQ4Pyh0aGlzW18weDg2MGJhZCgweDE1ZSldKF8weDMzYTBkMCxfMHg0NWVlZjIsXzB4MTEwNTI4LF8weDQwOTlkOHx8e30pLHRoaXNbXzB4ODYwYmFkKDB4MTMyKV0oXzB4NDVlZWYyLF8weDMzYTBkMCkpOnRoaXNbXzB4ODYwYmFkKDB4MTIwKV0oXzB4MzNhMGQwLF8weDExMDUyOCxfMHg0NWVlZjIsZnVuY3Rpb24oKXt2YXIgXzB4NGU4NzFhPV8weDg2MGJhZDtfMHg1MzkzOTQ9PT1fMHg0ZTg3MWEoMHgxY2UpfHxfMHg1MzkzOTQ9PT1fMHg0ZTg3MWEoMHgxYTkpfHwoZGVsZXRlIF8weDMzYTBkMFtfMHg0ZTg3MWEoMHgxMTgpXSxfMHgzM2EwZDBbJ2NhcHBlZCddPSEweDApO30pO31yZXR1cm4gXzB4MzNhMGQwO31maW5hbGx5e18weDExMDUyOFtfMHg4NjBiYWQoMHgxODEpXT1fMHgzMmY2NzMsXzB4MTEwNTI4WydkZXB0aCddPV8weDM4OTY4ZSxfMHgxMTA1MjhbXzB4ODYwYmFkKDB4MWMwKV09XzB4ZDcyNzdkO319W18weDE0NGE3OSgweDFhMyldKF8weDQ4MDM3YixfMHgyZjFkZDAsXzB4NDczYzQzLF8weDJlYzI5Myl7dmFyIF8weDM5ZWNhNz1fMHgxNDRhNzksXzB4M2YxNzFmPV8weDJlYzI5M1tfMHgzOWVjYTcoMHgxMzkpXXx8XzB4NDczYzQzW18weDM5ZWNhNygweDEzOSldO2lmKChfMHg0ODAzN2I9PT0nc3RyaW5nJ3x8XzB4NDgwMzdiPT09XzB4MzllY2E3KDB4ZjMpKSYmXzB4MmYxZGQwW18weDM5ZWNhNygweDExOCldKXtsZXQgXzB4MmQ0NjVkPV8weDJmMWRkMFtfMHgzOWVjYTcoMHgxMTgpXVtfMHgzOWVjYTcoMHgxM2YpXTtfMHg0NzNjNDNbXzB4MzllY2E3KDB4MTc4KV0rPV8weDJkNDY1ZCxfMHg0NzNjNDNbXzB4MzllY2E3KDB4MTc4KV0+XzB4NDczYzQzW18weDM5ZWNhNygweDFkMildPyhfMHgyZjFkZDBbXzB4MzllY2E3KDB4MTVkKV09JycsZGVsZXRlIF8weDJmMWRkMFsndmFsdWUnXSk6XzB4MmQ0NjVkPl8weDNmMTcxZiYmKF8weDJmMWRkMFtfMHgzOWVjYTcoMHgxNWQpXT1fMHgyZjFkZDBbXzB4MzllY2E3KDB4MTE4KV1bXzB4MzllY2E3KDB4MTEyKV0oMHgwLF8weDNmMTcxZiksZGVsZXRlIF8weDJmMWRkMFtfMHgzOWVjYTcoMHgxMTgpXSk7fX1bXzB4MTQ0YTc5KDB4MTc2KV0oXzB4NWUxMmE5KXt2YXIgXzB4MmU2ODA1PV8weDE0NGE3OTtyZXR1cm4hIShfMHg1ZTEyYTkmJl8weDNlNzdjMFtfMHgyZTY4MDUoMHgxNDkpXSYmdGhpc1tfMHgyZTY4MDUoMHgxYTQpXShfMHg1ZTEyYTkpPT09XzB4MmU2ODA1KDB4MWU2KSYmXzB4NWUxMmE5W18weDJlNjgwNSgweDFkOCldKTt9W18weDE0NGE3OSgweDFjZildKF8weDQ1OTcyYSl7dmFyIF8weDU4YWU5ZD1fMHgxNDRhNzk7aWYoXzB4NDU5NzJhW18weDU4YWU5ZCgweDE5YildKC9eXFxcXGQrJC8pKXJldHVybiBfMHg0NTk3MmE7dmFyIF8weDMxOTg1MDt0cnl7XzB4MzE5ODUwPUpTT05bXzB4NThhZTlkKDB4MWJiKV0oJycrXzB4NDU5NzJhKTt9Y2F0Y2h7XzB4MzE5ODUwPSdcXFxceDIyJyt0aGlzW18weDU4YWU5ZCgweDFhNCldKF8weDQ1OTcyYSkrJ1xcXFx4MjInO31yZXR1cm4gXzB4MzE5ODUwW18weDU4YWU5ZCgweDE5YildKC9eXFxcIihbYS16QS1aX11bYS16QS1aXzAtOV0qKVxcXCIkLyk/XzB4MzE5ODUwPV8weDMxOTg1MFtfMHg1OGFlOWQoMHgxMTIpXSgweDEsXzB4MzE5ODUwWydsZW5ndGgnXS0weDIpOl8weDMxOTg1MD1fMHgzMTk4NTBbJ3JlcGxhY2UnXSgvJy9nLCdcXFxceDVjXFxcXHgyNycpW18weDU4YWU5ZCgweDE0NCldKC9cXFxcXFxcXFxcXCIvZywnXFxcXHgyMicpW18weDU4YWU5ZCgweDE0NCldKC8oXlxcXCJ8XFxcIiQpL2csJ1xcXFx4MjcnKSxfMHgzMTk4NTA7fVtfMHgxNDRhNzkoMHgxMjApXShfMHgxYmQ4ZGMsXzB4MmVkNGJkLF8weDMyNGRlZixfMHg0ZTJiYWUpe3ZhciBfMHgzNTdlYmM9XzB4MTQ0YTc5O3RoaXNbXzB4MzU3ZWJjKDB4ZjEpXShfMHgxYmQ4ZGMsXzB4MmVkNGJkKSxfMHg0ZTJiYWUmJl8weDRlMmJhZSgpLHRoaXNbXzB4MzU3ZWJjKDB4MTMyKV0oXzB4MzI0ZGVmLF8weDFiZDhkYyksdGhpc1tfMHgzNTdlYmMoMHgxMDMpXShfMHgxYmQ4ZGMsXzB4MmVkNGJkKTt9WydfdHJlZU5vZGVQcm9wZXJ0aWVzQmVmb3JlRnVsbFZhbHVlJ10oXzB4MTA3ZDY1LF8weDNlZDdjYSl7dmFyIF8weDIxOWIxNj1fMHgxNDRhNzk7dGhpc1snX3NldE5vZGVJZCddKF8weDEwN2Q2NSxfMHgzZWQ3Y2EpLHRoaXNbXzB4MjE5YjE2KDB4MTI0KV0oXzB4MTA3ZDY1LF8weDNlZDdjYSksdGhpc1tfMHgyMTliMTYoMHgxYWMpXShfMHgxMDdkNjUsXzB4M2VkN2NhKSx0aGlzW18weDIxOWIxNigweDExMCldKF8weDEwN2Q2NSxfMHgzZWQ3Y2EpO31bXzB4MTQ0YTc5KDB4MTQ3KV0oXzB4NTZjZTUwLF8weDU4Mjg1YSl7fVtfMHgxNDRhNzkoMHgxMjQpXShfMHgyZmQzODksXzB4MTEzYjE5KXt9W18weDE0NGE3OSgweDEwZCldKF8weDQ2ZmVkYyxfMHgxZmIzZDEpe31bXzB4MTQ0YTc5KDB4MWM4KV0oXzB4NTNkNmE0KXt2YXIgXzB4MzE0ZjRiPV8weDE0NGE3OTtyZXR1cm4gXzB4NTNkNmE0PT09dGhpc1tfMHgzMTRmNGIoMHgxNjgpXTt9W18weDE0NGE3OSgweDEwMyldKF8weDk0ZjBkNCxfMHgxZjc4YTIpe3ZhciBfMHhjNDE2Yzk9XzB4MTQ0YTc5O3RoaXNbXzB4YzQxNmM5KDB4MTBkKV0oXzB4OTRmMGQ0LF8weDFmNzhhMiksdGhpc1snX3NldE5vZGVFeHBhbmRhYmxlU3RhdGUnXShfMHg5NGYwZDQpLF8weDFmNzhhMlsnc29ydFByb3BzJ10mJnRoaXNbXzB4YzQxNmM5KDB4ZWUpXShfMHg5NGYwZDQpLHRoaXNbXzB4YzQxNmM5KDB4MTAwKV0oXzB4OTRmMGQ0LF8weDFmNzhhMiksdGhpc1tfMHhjNDE2YzkoMHgxOWEpXShfMHg5NGYwZDQsXzB4MWY3OGEyKSx0aGlzW18weGM0MTZjOSgweDExNSldKF8weDk0ZjBkNCk7fVtfMHgxNDRhNzkoMHgxMzIpXShfMHg5MTI2MzIsXzB4NWY1NTQ0KXt2YXIgXzB4MjBiNTIyPV8weDE0NGE3OTtsZXQgXzB4NTBmNTk0O3RyeXtfMHgzZTc3YzBbXzB4MjBiNTIyKDB4MTU0KV0mJihfMHg1MGY1OTQ9XzB4M2U3N2MwW18weDIwYjUyMigweDE1NCldW18weDIwYjUyMigweDE3NCldLF8weDNlNzdjMFtfMHgyMGI1MjIoMHgxNTQpXVtfMHgyMGI1MjIoMHgxNzQpXT1mdW5jdGlvbigpe30pLF8weDkxMjYzMiYmdHlwZW9mIF8weDkxMjYzMlsnbGVuZ3RoJ109PV8weDIwYjUyMigweDEzMykmJihfMHg1ZjU1NDRbJ2xlbmd0aCddPV8weDkxMjYzMlsnbGVuZ3RoJ10pO31jYXRjaHt9ZmluYWxseXtfMHg1MGY1OTQmJihfMHgzZTc3YzBbXzB4MjBiNTIyKDB4MTU0KV1bJ2Vycm9yJ109XzB4NTBmNTk0KTt9aWYoXzB4NWY1NTQ0W18weDIwYjUyMigweDEyMyldPT09J251bWJlcid8fF8weDVmNTU0NFtfMHgyMGI1MjIoMHgxMjMpXT09PV8weDIwYjUyMigweDEzNSkpe2lmKGlzTmFOKF8weDVmNTU0NFtfMHgyMGI1MjIoMHgxMTgpXSkpXzB4NWY1NTQ0W18weDIwYjUyMigweDE1OCldPSEweDAsZGVsZXRlIF8weDVmNTU0NFsndmFsdWUnXTtlbHNlIHN3aXRjaChfMHg1ZjU1NDRbXzB4MjBiNTIyKDB4MTE4KV0pe2Nhc2UgTnVtYmVyWydQT1NJVElWRV9JTkZJTklUWSddOl8weDVmNTU0NFtfMHgyMGI1MjIoMHgxODYpXT0hMHgwLGRlbGV0ZSBfMHg1ZjU1NDRbXzB4MjBiNTIyKDB4MTE4KV07YnJlYWs7Y2FzZSBOdW1iZXJbXzB4MjBiNTIyKDB4MTE2KV06XzB4NWY1NTQ0W18weDIwYjUyMigweDFhYSldPSEweDAsZGVsZXRlIF8weDVmNTU0NFtfMHgyMGI1MjIoMHgxMTgpXTticmVhaztjYXNlIDB4MDp0aGlzW18weDIwYjUyMigweDE0MSldKF8weDVmNTU0NFtfMHgyMGI1MjIoMHgxMTgpXSkmJihfMHg1ZjU1NDRbXzB4MjBiNTIyKDB4MTRjKV09ITB4MCk7YnJlYWs7fX1lbHNlIF8weDVmNTU0NFtfMHgyMGI1MjIoMHgxMjMpXT09PV8weDIwYjUyMigweDFkZikmJnR5cGVvZiBfMHg5MTI2MzJbJ25hbWUnXT09XzB4MjBiNTIyKDB4MTNkKSYmXzB4OTEyNjMyW18weDIwYjUyMigweGZlKV0mJl8weDVmNTU0NFtfMHgyMGI1MjIoMHhmZSldJiZfMHg5MTI2MzJbXzB4MjBiNTIyKDB4ZmUpXSE9PV8weDVmNTU0NFsnbmFtZSddJiYoXzB4NWY1NTQ0W18weDIwYjUyMigweDE5NildPV8weDkxMjYzMlsnbmFtZSddKTt9W18weDE0NGE3OSgweDE0MSldKF8weDNkOGRlNyl7dmFyIF8weDViZDBmYT1fMHgxNDRhNzk7cmV0dXJuIDB4MS9fMHgzZDhkZTc9PT1OdW1iZXJbXzB4NWJkMGZhKDB4MTE2KV07fVsnX3NvcnRQcm9wcyddKF8weDRhYTZkZCl7dmFyIF8weDExOTY2Nj1fMHgxNDRhNzk7IV8weDRhYTZkZFtfMHgxMTk2NjYoMHgxMDkpXXx8IV8weDRhYTZkZFtfMHgxMTk2NjYoMHgxMDkpXVtfMHgxMTk2NjYoMHgxM2YpXXx8XzB4NGFhNmRkW18weDExOTY2NigweDEyMyldPT09XzB4MTE5NjY2KDB4MTJiKXx8XzB4NGFhNmRkW18weDExOTY2NigweDEyMyldPT09XzB4MTE5NjY2KDB4MTQ5KXx8XzB4NGFhNmRkW18weDExOTY2NigweDEyMyldPT09XzB4MTE5NjY2KDB4ZmMpfHxfMHg0YWE2ZGRbXzB4MTE5NjY2KDB4MTA5KV1bJ3NvcnQnXShmdW5jdGlvbihfMHgzMWFkMWIsXzB4MWUxZmJmKXt2YXIgXzB4MmQ2NjBlPV8weDExOTY2NixfMHgxZDM5Yzc9XzB4MzFhZDFiW18weDJkNjYwZSgweGZlKV1bXzB4MmQ2NjBlKDB4MWFiKV0oKSxfMHg1OGJiYzU9XzB4MWUxZmJmWyduYW1lJ11bXzB4MmQ2NjBlKDB4MWFiKV0oKTtyZXR1cm4gXzB4MWQzOWM3PF8weDU4YmJjNT8tMHgxOl8weDFkMzljNz5fMHg1OGJiYzU/MHgxOjB4MDt9KTt9W18weDE0NGE3OSgweDEwMCldKF8weDI1NmY4NyxfMHgzOWNhZTEpe3ZhciBfMHgzZDA2MTY9XzB4MTQ0YTc5O2lmKCEoXzB4MzljYWUxW18weDNkMDYxNigweDExYSldfHwhXzB4MjU2Zjg3Wydwcm9wcyddfHwhXzB4MjU2Zjg3Wydwcm9wcyddW18weDNkMDYxNigweDEzZildKSl7Zm9yKHZhciBfMHgxMmE3OGI9W10sXzB4MTFjMzgyPVtdLF8weDU2NGViND0weDAsXzB4MTI4MDQzPV8weDI1NmY4N1sncHJvcHMnXVtfMHgzZDA2MTYoMHgxM2YpXTtfMHg1NjRlYjQ8XzB4MTI4MDQzO18weDU2NGViNCsrKXt2YXIgXzB4NWIyMGMzPV8weDI1NmY4N1tfMHgzZDA2MTYoMHgxMDkpXVtfMHg1NjRlYjRdO18weDViMjBjM1tfMHgzZDA2MTYoMHgxMjMpXT09PSdmdW5jdGlvbic/XzB4MTJhNzhiW18weDNkMDYxNigweGY5KV0oXzB4NWIyMGMzKTpfMHgxMWMzODJbXzB4M2QwNjE2KDB4ZjkpXShfMHg1YjIwYzMpO31pZighKCFfMHgxMWMzODJbXzB4M2QwNjE2KDB4MTNmKV18fF8weDEyYTc4YlsnbGVuZ3RoJ108PTB4MSkpe18weDI1NmY4N1tfMHgzZDA2MTYoMHgxMDkpXT1fMHgxMWMzODI7dmFyIF8weDMyZGFmOD17J2Z1bmN0aW9uc05vZGUnOiEweDAsJ3Byb3BzJzpfMHgxMmE3OGJ9O3RoaXNbXzB4M2QwNjE2KDB4MTQ3KV0oXzB4MzJkYWY4LF8weDM5Y2FlMSksdGhpc1tfMHgzZDA2MTYoMHgxMGQpXShfMHgzMmRhZjgsXzB4MzljYWUxKSx0aGlzWydfc2V0Tm9kZUV4cGFuZGFibGVTdGF0ZSddKF8weDMyZGFmOCksdGhpc1tfMHgzZDA2MTYoMHgxMTApXShfMHgzMmRhZjgsXzB4MzljYWUxKSxfMHgzMmRhZjhbJ2lkJ10rPSdcXFxceDIwZicsXzB4MjU2Zjg3W18weDNkMDYxNigweDEwOSldW18weDNkMDYxNigweDFiNyldKF8weDMyZGFmOCk7fX19W18weDE0NGE3OSgweDE5YSldKF8weDE1YWNjMCxfMHgxNTVlZmQpe31bXzB4MTQ0YTc5KDB4MTYxKV0oXzB4MmUyODJhKXt9W18weDE0NGE3OSgweDE4YildKF8weDIzNzEwMyl7dmFyIF8weGZlZGVlND1fMHgxNDRhNzk7cmV0dXJuIEFycmF5W18weGZlZGVlNCgweDE2NCldKF8weDIzNzEwMyl8fHR5cGVvZiBfMHgyMzcxMDM9PV8weGZlZGVlNCgweGYyKSYmdGhpc1snX29iamVjdFRvU3RyaW5nJ10oXzB4MjM3MTAzKT09PV8weGZlZGVlNCgweGVmKTt9W18weDE0NGE3OSgweDExMCldKF8weDkzZDZiMSxfMHg1NTU1MzIpe31bXzB4MTQ0YTc5KDB4MTE1KV0oXzB4MjMyOGVjKXt2YXIgXzB4NDQzYzA0PV8weDE0NGE3OTtkZWxldGUgXzB4MjMyOGVjW18weDQ0M2MwNCgweDFjOSldLGRlbGV0ZSBfMHgyMzI4ZWNbXzB4NDQzYzA0KDB4MTA2KV0sZGVsZXRlIF8weDIzMjhlY1tfMHg0NDNjMDQoMHgxYzYpXTt9W18weDE0NGE3OSgweDFhYyldKF8weDQ3M2U4YSxfMHgxZjNkZTIpe319bGV0IF8weDE4MjE4Nj1uZXcgXzB4NGUxMzhjKCksXzB4NGM3MTk2PXsncHJvcHMnOjB4NjQsJ2VsZW1lbnRzJzoweDY0LCdzdHJMZW5ndGgnOjB4NDAwKjB4MzIsJ3RvdGFsU3RyTGVuZ3RoJzoweDQwMCoweDMyLCdhdXRvRXhwYW5kTGltaXQnOjB4MTM4OCwnYXV0b0V4cGFuZE1heERlcHRoJzoweGF9LF8weDM3MDFmYT17J3Byb3BzJzoweDUsJ2VsZW1lbnRzJzoweDUsJ3N0ckxlbmd0aCc6MHgxMDAsJ3RvdGFsU3RyTGVuZ3RoJzoweDEwMCoweDMsJ2F1dG9FeHBhbmRMaW1pdCc6MHgxZSwnYXV0b0V4cGFuZE1heERlcHRoJzoweDJ9O2Z1bmN0aW9uIF8weDIxM2UzZShfMHgyZmY3MDAsXzB4MTAyOGQzLF8weDYyMzdiOCxfMHgzNTEyYTEsXzB4Y2IwOTAsXzB4M2I2YzRiKXt2YXIgXzB4NDA3ZTMxPV8weDE0NGE3OTtsZXQgXzB4MjEyODM3LF8weDRlMzQ3Zjt0cnl7XzB4NGUzNDdmPV8weDI0ZDEzMCgpLF8weDIxMjgzNz1fMHgzZDJkNGNbXzB4MTAyOGQzXSwhXzB4MjEyODM3fHxfMHg0ZTM0N2YtXzB4MjEyODM3Wyd0cyddPjB4MWY0JiZfMHgyMTI4MzdbXzB4NDA3ZTMxKDB4MTk3KV0mJl8weDIxMjgzN1tfMHg0MDdlMzEoMHgxNDYpXS9fMHgyMTI4MzdbXzB4NDA3ZTMxKDB4MTk3KV08MHg2ND8oXzB4M2QyZDRjW18weDEwMjhkM109XzB4MjEyODM3PXsnY291bnQnOjB4MCwndGltZSc6MHgwLCd0cyc6XzB4NGUzNDdmfSxfMHgzZDJkNGNbXzB4NDA3ZTMxKDB4MWM3KV09e30pOl8weDRlMzQ3Zi1fMHgzZDJkNGNbJ2hpdHMnXVsndHMnXT4weDMyJiZfMHgzZDJkNGNbXzB4NDA3ZTMxKDB4MWM3KV1bXzB4NDA3ZTMxKDB4MTk3KV0mJl8weDNkMmQ0Y1snaGl0cyddW18weDQwN2UzMSgweDE0NildL18weDNkMmQ0Y1tfMHg0MDdlMzEoMHgxYzcpXVsnY291bnQnXTwweDY0JiYoXzB4M2QyZDRjW18weDQwN2UzMSgweDFjNyldPXt9KTtsZXQgXzB4MzZhM2YyPVtdLF8weDI0NTU0Yj1fMHgyMTI4MzdbXzB4NDA3ZTMxKDB4MTAyKV18fF8weDNkMmQ0Y1tfMHg0MDdlMzEoMHgxYzcpXVtfMHg0MDdlMzEoMHgxMDIpXT9fMHgzNzAxZmE6XzB4NGM3MTk2LF8weDM0N2ZkNz1fMHgyNjFhN2Q9Pnt2YXIgXzB4M2VkY2I0PV8weDQwN2UzMTtsZXQgXzB4M2EyNzEzPXt9O3JldHVybiBfMHgzYTI3MTNbJ3Byb3BzJ109XzB4MjYxYTdkWydwcm9wcyddLF8weDNhMjcxM1tfMHgzZWRjYjQoMHgxMjIpXT1fMHgyNjFhN2RbXzB4M2VkY2I0KDB4MTIyKV0sXzB4M2EyNzEzW18weDNlZGNiNCgweDEzOSldPV8weDI2MWE3ZFtfMHgzZWRjYjQoMHgxMzkpXSxfMHgzYTI3MTNbXzB4M2VkY2I0KDB4MWQyKV09XzB4MjYxYTdkW18weDNlZGNiNCgweDFkMildLF8weDNhMjcxM1tfMHgzZWRjYjQoMHgxNGUpXT1fMHgyNjFhN2RbXzB4M2VkY2I0KDB4MTRlKV0sXzB4M2EyNzEzW18weDNlZGNiNCgweDFjZCldPV8weDI2MWE3ZFtfMHgzZWRjYjQoMHgxY2QpXSxfMHgzYTI3MTNbXzB4M2VkY2I0KDB4ZjYpXT0hMHgxLF8weDNhMjcxM1tfMHgzZWRjYjQoMHgxMWEpXT0hXzB4MzY4NTAyLF8weDNhMjcxM1tfMHgzZWRjYjQoMHgxMjUpXT0weDEsXzB4M2EyNzEzW18weDNlZGNiNCgweDE3MSldPTB4MCxfMHgzYTI3MTNbXzB4M2VkY2I0KDB4MTViKV09XzB4M2VkY2I0KDB4MWRjKSxfMHgzYTI3MTNbXzB4M2VkY2I0KDB4MWEwKV09J3Jvb3RfZXhwJyxfMHgzYTI3MTNbXzB4M2VkY2I0KDB4MTBiKV09ITB4MCxfMHgzYTI3MTNbJ2F1dG9FeHBhbmRQcmV2aW91c09iamVjdHMnXT1bXSxfMHgzYTI3MTNbXzB4M2VkY2I0KDB4MWI4KV09MHgwLF8weDNhMjcxM1tfMHgzZWRjYjQoMHgxN2IpXT0hMHgwLF8weDNhMjcxM1tfMHgzZWRjYjQoMHgxNzgpXT0weDAsXzB4M2EyNzEzW18weDNlZGNiNCgweDFhMSldPXsnY3VycmVudCc6dm9pZCAweDAsJ3BhcmVudCc6dm9pZCAweDAsJ2luZGV4JzoweDB9LF8weDNhMjcxMzt9O2Zvcih2YXIgXzB4MjUzODNhPTB4MDtfMHgyNTM4M2E8XzB4Y2IwOTBbXzB4NDA3ZTMxKDB4MTNmKV07XzB4MjUzODNhKyspXzB4MzZhM2YyW18weDQwN2UzMSgweGY5KV0oXzB4MTgyMTg2WydzZXJpYWxpemUnXSh7J3RpbWVOb2RlJzpfMHgyZmY3MDA9PT1fMHg0MDdlMzEoMHgxNDYpfHx2b2lkIDB4MH0sXzB4Y2IwOTBbXzB4MjUzODNhXSxfMHgzNDdmZDcoXzB4MjQ1NTRiKSx7fSkpO2lmKF8weDJmZjcwMD09PSd0cmFjZSd8fF8weDJmZjcwMD09PV8weDQwN2UzMSgweDE3NCkpe2xldCBfMHg1YTFhMTQ9RXJyb3JbXzB4NDA3ZTMxKDB4ZmEpXTt0cnl7RXJyb3JbXzB4NDA3ZTMxKDB4ZmEpXT0weDEvMHgwLF8weDM2YTNmMltfMHg0MDdlMzEoMHhmOSldKF8weDE4MjE4NltfMHg0MDdlMzEoMHgxNWUpXSh7J3N0YWNrTm9kZSc6ITB4MH0sbmV3IEVycm9yKClbXzB4NDA3ZTMxKDB4MTVmKV0sXzB4MzQ3ZmQ3KF8weDI0NTU0YikseydzdHJMZW5ndGgnOjB4MS8weDB9KSk7fWZpbmFsbHl7RXJyb3JbXzB4NDA3ZTMxKDB4ZmEpXT1fMHg1YTFhMTQ7fX1yZXR1cm57J21ldGhvZCc6XzB4NDA3ZTMxKDB4MTk0KSwndmVyc2lvbic6XzB4MzkxZmI0LCdhcmdzJzpbeyd0cyc6XzB4NjIzN2I4LCdzZXNzaW9uJzpfMHgzNTEyYTEsJ2FyZ3MnOl8weDM2YTNmMiwnaWQnOl8weDEwMjhkMywnY29udGV4dCc6XzB4M2I2YzRifV19O31jYXRjaChfMHg1ZGIwNGIpe3JldHVybnsnbWV0aG9kJzpfMHg0MDdlMzEoMHgxOTQpLCd2ZXJzaW9uJzpfMHgzOTFmYjQsJ2FyZ3MnOlt7J3RzJzpfMHg2MjM3YjgsJ3Nlc3Npb24nOl8weDM1MTJhMSwnYXJncyc6W3sndHlwZSc6XzB4NDA3ZTMxKDB4MWI2KSwnZXJyb3InOl8weDVkYjA0YiYmXzB4NWRiMDRiW18weDQwN2UzMSgweDFhZSldfV0sJ2lkJzpfMHgxMDI4ZDMsJ2NvbnRleHQnOl8weDNiNmM0Yn1dfTt9ZmluYWxseXt0cnl7aWYoXzB4MjEyODM3JiZfMHg0ZTM0N2Ype2xldCBfMHg0NWUyOTk9XzB4MjRkMTMwKCk7XzB4MjEyODM3Wydjb3VudCddKyssXzB4MjEyODM3W18weDQwN2UzMSgweDE0NildKz1fMHg0N2EzOTUoXzB4NGUzNDdmLF8weDQ1ZTI5OSksXzB4MjEyODM3Wyd0cyddPV8weDQ1ZTI5OSxfMHgzZDJkNGNbXzB4NDA3ZTMxKDB4MWM3KV1bXzB4NDA3ZTMxKDB4MTk3KV0rKyxfMHgzZDJkNGNbXzB4NDA3ZTMxKDB4MWM3KV1bXzB4NDA3ZTMxKDB4MTQ2KV0rPV8weDQ3YTM5NShfMHg0ZTM0N2YsXzB4NDVlMjk5KSxfMHgzZDJkNGNbXzB4NDA3ZTMxKDB4MWM3KV1bJ3RzJ109XzB4NDVlMjk5LChfMHgyMTI4MzdbXzB4NDA3ZTMxKDB4MTk3KV0+MHgzMnx8XzB4MjEyODM3W18weDQwN2UzMSgweDE0NildPjB4NjQpJiYoXzB4MjEyODM3WydyZWR1Y2VMaW1pdHMnXT0hMHgwKSwoXzB4M2QyZDRjW18weDQwN2UzMSgweDFjNyldW18weDQwN2UzMSgweDE5NyldPjB4M2U4fHxfMHgzZDJkNGNbXzB4NDA3ZTMxKDB4MWM3KV1bJ3RpbWUnXT4weDEyYykmJihfMHgzZDJkNGNbXzB4NDA3ZTMxKDB4MWM3KV1bJ3JlZHVjZUxpbWl0cyddPSEweDApO319Y2F0Y2h7fX19cmV0dXJuIF8weDIxM2UzZTt9KChfMHg1ZDY1ZTksXzB4NTcxYWY5LF8weDM3ZTFlNCxfMHg0MzNkNDgsXzB4MWIwMmY2LF8weDQzMDA4MyxfMHg1NDMyZDgsXzB4MTAyZGNiLF8weDQ5M2EzYyxfMHgyNDBkYTUsXzB4MjgyMWI5KT0+e3ZhciBfMHg1NTZkZDY9XzB4MjE2MGRlO2lmKF8weDVkNjVlOVtfMHg1NTZkZDYoMHgxNGQpXSlyZXR1cm4gXzB4NWQ2NWU5W18weDU1NmRkNigweDE0ZCldO2lmKCFIKF8weDVkNjVlOSxfMHgxMDJkY2IsXzB4MWIwMmY2KSlyZXR1cm4gXzB4NWQ2NWU5W18weDU1NmRkNigweDE0ZCldPXsnY29uc29sZUxvZyc6KCk9Pnt9LCdjb25zb2xlVHJhY2UnOigpPT57fSwnY29uc29sZVRpbWUnOigpPT57fSwnY29uc29sZVRpbWVFbmQnOigpPT57fSwnYXV0b0xvZyc6KCk9Pnt9LCdhdXRvTG9nTWFueSc6KCk9Pnt9LCdhdXRvVHJhY2VNYW55JzooKT0+e30sJ2NvdmVyYWdlJzooKT0+e30sJ2F1dG9UcmFjZSc6KCk9Pnt9LCdhdXRvVGltZSc6KCk9Pnt9LCdhdXRvVGltZUVuZCc6KCk9Pnt9fSxfMHg1ZDY1ZTlbJ19jb25zb2xlX25pbmphJ107bGV0IF8weDFkNjM0MD1CKF8weDVkNjVlOSksXzB4Mzk3ZmY2PV8weDFkNjM0MFsnZWxhcHNlZCddLF8weDFhOTFkYT1fMHgxZDYzNDBbJ3RpbWVTdGFtcCddLF8weGEyMmFhOT1fMHgxZDYzNDBbXzB4NTU2ZGQ2KDB4MTI5KV0sXzB4NGRkNDZmPXsnaGl0cyc6e30sJ3RzJzp7fX0sXzB4MjJmYTQzPVgoXzB4NWQ2NWU5LF8weDQ5M2EzYyxfMHg0ZGQ0NmYsXzB4NDMwMDgzKSxfMHg1OTBlNWU9XzB4NDRjNTM5PT57XzB4NGRkNDZmWyd0cyddW18weDQ0YzUzOV09XzB4MWE5MWRhKCk7fSxfMHgxZWNjNmI9KF8weDM5MjEyMSxfMHgxZDA0NmEpPT57bGV0IF8weDQ4OWJjMj1fMHg0ZGQ0NmZbJ3RzJ11bXzB4MWQwNDZhXTtpZihkZWxldGUgXzB4NGRkNDZmWyd0cyddW18weDFkMDQ2YV0sXzB4NDg5YmMyKXtsZXQgXzB4MzQ2NTc4PV8weDM5N2ZmNihfMHg0ODliYzIsXzB4MWE5MWRhKCkpO18weDM3Yjc4MChfMHgyMmZhNDMoJ3RpbWUnLF8weDM5MjEyMSxfMHhhMjJhYTkoKSxfMHg0ZWUxYzUsW18weDM0NjU3OF0sXzB4MWQwNDZhKSk7fX0sXzB4MTFhYzYwPV8weDMwOTdmZj0+e3ZhciBfMHg0MzIxMmM9XzB4NTU2ZGQ2LF8weDVkZTczZTtyZXR1cm4gXzB4MWIwMmY2PT09XzB4NDMyMTJjKDB4MWE3KSYmXzB4NWQ2NWU5W18weDQzMjEyYygweGY4KV0mJigoXzB4NWRlNzNlPV8weDMwOTdmZj09bnVsbD92b2lkIDB4MDpfMHgzMDk3ZmZbJ2FyZ3MnXSk9PW51bGw/dm9pZCAweDA6XzB4NWRlNzNlWydsZW5ndGgnXSkmJihfMHgzMDk3ZmZbXzB4NDMyMTJjKDB4MTE0KV1bMHgwXVsnb3JpZ2luJ109XzB4NWQ2NWU5W18weDQzMjEyYygweGY4KV0pLF8weDMwOTdmZjt9O18weDVkNjVlOVtfMHg1NTZkZDYoMHgxNGQpXT17J2NvbnNvbGVMb2cnOihfMHgzZGYzZGIsXzB4MWJiNWFiKT0+e3ZhciBfMHgyODY0ZWM9XzB4NTU2ZGQ2O18weDVkNjVlOVtfMHgyODY0ZWMoMHgxNTQpXVtfMHgyODY0ZWMoMHgxOTQpXVtfMHgyODY0ZWMoMHhmZSldIT09XzB4Mjg2NGVjKDB4MTE5KSYmXzB4MzdiNzgwKF8weDIyZmE0MyhfMHgyODY0ZWMoMHgxOTQpLF8weDNkZjNkYixfMHhhMjJhYTkoKSxfMHg0ZWUxYzUsXzB4MWJiNWFiKSk7fSwnY29uc29sZVRyYWNlJzooXzB4MjlkYTQ5LF8weDNmODM3NCk9Pnt2YXIgXzB4MjgwYmY4PV8weDU1NmRkNixfMHgyMjU0YzEsXzB4MWU0MTMwO18weDVkNjVlOVsnY29uc29sZSddW18weDI4MGJmOCgweDE5NCldW18weDI4MGJmOCgweGZlKV0hPT0nZGlzYWJsZWRUcmFjZScmJigoXzB4MWU0MTMwPShfMHgyMjU0YzE9XzB4NWQ2NWU5W18weDI4MGJmOCgweDFkMSldKT09bnVsbD92b2lkIDB4MDpfMHgyMjU0YzFbJ3ZlcnNpb25zJ10pIT1udWxsJiZfMHgxZTQxMzBbXzB4MjgwYmY4KDB4MWExKV0mJihfMHg1ZDY1ZTlbXzB4MjgwYmY4KDB4MWRlKV09ITB4MCksXzB4MzdiNzgwKF8weDExYWM2MChfMHgyMmZhNDMoXzB4MjgwYmY4KDB4MTcwKSxfMHgyOWRhNDksXzB4YTIyYWE5KCksXzB4NGVlMWM1LF8weDNmODM3NCkpKSk7fSwnY29uc29sZUVycm9yJzooXzB4NTQ3ZjBhLF8weDUwZGJjNyk9Pnt2YXIgXzB4MzU5N2E5PV8weDU1NmRkNjtfMHg1ZDY1ZTlbXzB4MzU5N2E5KDB4MWRlKV09ITB4MCxfMHgzN2I3ODAoXzB4MTFhYzYwKF8weDIyZmE0MygnZXJyb3InLF8weDU0N2YwYSxfMHhhMjJhYTkoKSxfMHg0ZWUxYzUsXzB4NTBkYmM3KSkpO30sJ2NvbnNvbGVUaW1lJzpfMHgxMjNmZmU9PntfMHg1OTBlNWUoXzB4MTIzZmZlKTt9LCdjb25zb2xlVGltZUVuZCc6KF8weDIxNzFhMCxfMHg0MDNiYjgpPT57XzB4MWVjYzZiKF8weDQwM2JiOCxfMHgyMTcxYTApO30sJ2F1dG9Mb2cnOihfMHg0OTk4ZDAsXzB4MWJhYzM3KT0+e3ZhciBfMHhkNzNkMjM9XzB4NTU2ZGQ2O18weDM3Yjc4MChfMHgyMmZhNDMoXzB4ZDczZDIzKDB4MTk0KSxfMHgxYmFjMzcsXzB4YTIyYWE5KCksXzB4NGVlMWM1LFtfMHg0OTk4ZDBdKSk7fSwnYXV0b0xvZ01hbnknOihfMHg0MzFkMTgsXzB4MzZkMTc1KT0+e3ZhciBfMHg3M2Q1ZmM9XzB4NTU2ZGQ2O18weDM3Yjc4MChfMHgyMmZhNDMoXzB4NzNkNWZjKDB4MTk0KSxfMHg0MzFkMTgsXzB4YTIyYWE5KCksXzB4NGVlMWM1LF8weDM2ZDE3NSkpO30sJ2F1dG9UcmFjZSc6KF8weDQ1OWM0OSxfMHgyN2ZmMmIpPT57dmFyIF8weDQzM2IwNj1fMHg1NTZkZDY7XzB4MzdiNzgwKF8weDExYWM2MChfMHgyMmZhNDMoXzB4NDMzYjA2KDB4MTcwKSxfMHgyN2ZmMmIsXzB4YTIyYWE5KCksXzB4NGVlMWM1LFtfMHg0NTljNDldKSkpO30sJ2F1dG9UcmFjZU1hbnknOihfMHgyZmY0ZjcsXzB4MThjZTI3KT0+e18weDM3Yjc4MChfMHgxMWFjNjAoXzB4MjJmYTQzKCd0cmFjZScsXzB4MmZmNGY3LF8weGEyMmFhOSgpLF8weDRlZTFjNSxfMHgxOGNlMjcpKSk7fSwnYXV0b1RpbWUnOihfMHgyZTQxYmMsXzB4NWViOGVjLF8weDFjMzhkZCk9PntfMHg1OTBlNWUoXzB4MWMzOGRkKTt9LCdhdXRvVGltZUVuZCc6KF8weDQ3YzAwOCxfMHhhZDliMTMsXzB4NGZjNTMyKT0+e18weDFlY2M2YihfMHhhZDliMTMsXzB4NGZjNTMyKTt9LCdjb3ZlcmFnZSc6XzB4NGRlOTFiPT57XzB4MzdiNzgwKHsnbWV0aG9kJzonY292ZXJhZ2UnLCd2ZXJzaW9uJzpfMHg0MzAwODMsJ2FyZ3MnOlt7J2lkJzpfMHg0ZGU5MWJ9XX0pO319O2xldCBfMHgzN2I3ODA9cShfMHg1ZDY1ZTksXzB4NTcxYWY5LF8weDM3ZTFlNCxfMHg0MzNkNDgsXzB4MWIwMmY2LF8weDI0MGRhNSxfMHgyODIxYjkpLF8weDRlZTFjNT1fMHg1ZDY1ZTlbXzB4NTU2ZGQ2KDB4MTRhKV07cmV0dXJuIF8weDVkNjVlOVsnX2NvbnNvbGVfbmluamEnXTt9KShnbG9iYWxUaGlzLF8weDIxNjBkZSgweDE4NyksJzMzNDUzJyxfMHgyMTYwZGUoMHgxNmIpLF8weDIxNjBkZSgweDFiZSksXzB4MjE2MGRlKDB4MWUzKSxfMHgyMTYwZGUoMHgxMjgpLF8weDIxNjBkZSgweDFkNSksXzB4MjE2MGRlKDB4MTU5KSxfMHgyMTYwZGUoMHgxODMpLF8weDIxNjBkZSgweDE1MikpO1wiKTtcbn1cbmNhdGNoIChlKSB7IH0gfVxuOyAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZnVuY3Rpb24gb29fb28oaSwgLi4udikgeyB0cnkge1xuICAgIG9vX2NtKCkuY29uc29sZUxvZyhpLCB2KTtcbn1cbmNhdGNoIChlKSB7IH0gcmV0dXJuIHY7IH1cbjtcbm9vX29vOyAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZnVuY3Rpb24gb29fdHIoaSwgLi4udikgeyB0cnkge1xuICAgIG9vX2NtKCkuY29uc29sZVRyYWNlKGksIHYpO1xufVxuY2F0Y2ggKGUpIHsgfSByZXR1cm4gdjsgfVxuO1xub29fdHI7IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBvb190eChpLCAuLi52KSB7IHRyeSB7XG4gICAgb29fY20oKS5jb25zb2xlRXJyb3IoaSwgdik7XG59XG5jYXRjaCAoZSkgeyB9IHJldHVybiB2OyB9XG47XG5vb190eDsgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIG9vX3RzKHYpIHsgdHJ5IHtcbiAgICBvb19jbSgpLmNvbnNvbGVUaW1lKHYpO1xufVxuY2F0Y2ggKGUpIHsgfSByZXR1cm4gdjsgfVxuO1xub29fdHM7IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBvb190ZSh2LCBpKSB7IHRyeSB7XG4gICAgb29fY20oKS5jb25zb2xlVGltZUVuZCh2LCBpKTtcbn1cbmNhdGNoIChlKSB7IH0gcmV0dXJuIHY7IH1cbjtcbm9vX3RlOyAvKmVzbGludCB1bmljb3JuL25vLWFidXNpdmUtZXNsaW50LWRpc2FibGU6LGVzbGludC1jb21tZW50cy9kaXNhYmxlLWVuYWJsZS1wYWlyOixlc2xpbnQtY29tbWVudHMvbm8tdW5saW1pdGVkLWRpc2FibGU6LGVzbGludC1jb21tZW50cy9uby1hZ2dyZWdhdGluZy1lbmFibGU6LGVzbGludC1jb21tZW50cy9uby1kdXBsaWNhdGUtZGlzYWJsZTosZXNsaW50LWNvbW1lbnRzL25vLXVudXNlZC1kaXNhYmxlOixlc2xpbnQtY29tbWVudHMvbm8tdW51c2VkLWVuYWJsZTosKi9cbiJdLCJuYW1lcyI6WyJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiX2RlZmluZVByb3BlcnRpZXMiLCJ0YXJnZXQiLCJwcm9wcyIsImkiLCJsZW5ndGgiLCJkZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJrZXkiLCJfY3JlYXRlQ2xhc3MiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJwcm90b3R5cGUiLCJfX2ltcG9ydERlZmF1bHQiLCJtb2QiLCJfX2VzTW9kdWxlIiwiZXhwb3J0cyIsInZhbHVlIiwiRHluYW1pY0ZpZWxkIiwianF1ZXJ5XzEiLCJyZXF1aXJlIiwiaGlkZVNob3dGb3JtRmllbGRzIiwiaHVtYW5pdGFyaWFuU2NvcGVIaWRlVm9jYWJ1bGFyeVVyaSIsImNvdW50cnlCdWRnZXRIaWRlQ29kZUZpZWxkIiwiYWlkVHlwZVZvY2FidWxhcnlIaWRlRmllbGQiLCJzZWN0b3JWb2NhYnVsYXJ5SGlkZUZpZWxkIiwicG9saWN5Vm9jYWJ1bGFyeUhpZGVGaWVsZCIsInJlY2lwaWVudFZvY2FidWxhcnlIaWRlRmllbGQiLCJ0YWdWb2NhYnVsYXJ5SGlkZUZpZWxkIiwidHJhbnNhY3Rpb25BaWRUeXBlVm9jYWJ1bGFyeUhpZGVGaWVsZCIsImluZGljYXRvclJlZmVyZW5jZUhpZGVGaWVsZFVyaSIsIl90aGlzIiwiaHVtYW5pdGFyaWFuU2NvcGVWb2NhYnVsYXJ5IiwiZWFjaCIsImluZGV4Iiwic2NvcGUiLCJfYSIsInZhbCIsImhpZGVIdW1hbml0YXJpYW5TY29wZUZpZWxkIiwidG9TdHJpbmciLCJvbiIsImUiLCJwYXJhbXMiLCJkYXRhIiwiaWQiLCJjbG9zZXN0IiwiZmluZCIsInNob3ciLCJyZW1vdmVBdHRyIiwidHJpZ2dlciIsImhpZGUiLCJhdHRyIiwiX3RoaXMyIiwicmVmZXJlbmNlVm9jYWJ1bGFyeSIsImluZGljYXRvclJlZmVyZW5jZUhpZGVGaWVsZCIsInJlZmVyZW5jZVVyaSIsIl90aGlzMyIsImNvdW50cnlCdWRnZXRWb2NhYnVsYXJ5IiwiaGlkZUNvdW50cnlCdWRnZXRGaWVsZCIsImNvdW50cnlCdWRnZXRDb2RlSW5wdXQiLCJjb3VudHJ5QnVkZ2V0Q29kZVNlbGVjdCIsIl90aGlzNCIsImFpZHR5cGVfdm9jYWJ1bGFyeSIsIml0ZW0iLCJoaWRlQWlkVHlwZVNlbGVjdEZpZWxkIiwiX3RoaXM1IiwiaGlkZVRyYW5zYWN0aW9uQWlkVHlwZVNlbGVjdEZpZWxkIiwiZGVmYXVsdF9haWRfdHlwZSIsImVhcm1hcmtpbmdfY2F0ZWdvcnkiLCJlYXJtYXJraW5nX21vZGFsaXR5IiwiY2FzaF9hbmRfdm91Y2hlcl9tb2RhbGl0aWVzIiwiY2FzZTEiLCJjYXNlMiIsImNhc2UzIiwiY2FzZTQiLCJhaWRfdHlwZSIsIl90aGlzNiIsInBvbGljeW1ha2VyX3ZvY2FidWxhcnkiLCJwb2xpY3lfbWFya2VyIiwiaGlkZVBvbGljeU1ha2VyRmllbGQiLCJjYXNlMV9zaG93IiwiY2FzZTJfc2hvdyIsIl90aGlzNyIsInNlY3Rvcl92b2NhYnVsYXJ5Iiwic2VjdG9yIiwiaGlkZVNlY3RvckZpZWxkIiwiY2FzZTdfc2hvdyIsImNhc2U4X3Nob3ciLCJjYXNlOThfOTlfc2hvdyIsImRlZmF1bHRfc2hvdyIsImNhc2U3IiwiY2FzZTgiLCJjYXNlOThfOTkiLCJkZWZhdWx0X2hpZGUiLCJfdGhpczgiLCJyZWdpb25fdm9jYWJ1bGFyeSIsInJlZ2lvbl92b2NhYiIsImhpZGVSZWNpcGllbnRSZWdpb25GaWVsZCIsImNhc2U5OV9zaG93IiwiY2FzZTk5IiwidXBkYXRlQWN0aXZpdHlJZGVudGlmaWVyIiwiYWN0aXZpdHlfaWRlbnRpZmllciIsImNvbmNhdCIsIl90aGlzOSIsInRhZ192b2NhYnVsYXJ5IiwidGFnIiwiaGlkZVRhZ0ZpZWxkIiwiY2FzZTNfc2hvdyIsIl9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIiwibyIsImFsbG93QXJyYXlMaWtlIiwiaXQiLCJTeW1ib2wiLCJpdGVyYXRvciIsIkFycmF5IiwiaXNBcnJheSIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIkYiLCJzIiwibiIsImRvbmUiLCJfZSIsImYiLCJub3JtYWxDb21wbGV0aW9uIiwiZGlkRXJyIiwiZXJyIiwiY2FsbCIsInN0ZXAiLCJuZXh0IiwiX2UyIiwiX3RvQ29uc3VtYWJsZUFycmF5IiwiYXJyIiwiX2FycmF5V2l0aG91dEhvbGVzIiwiX2l0ZXJhYmxlVG9BcnJheSIsIl9ub25JdGVyYWJsZVNwcmVhZCIsIm1pbkxlbiIsIl9hcnJheUxpa2VUb0FycmF5Iiwic2xpY2UiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJmcm9tIiwidGVzdCIsIml0ZXIiLCJsZW4iLCJhcnIyIiwiYXhpb3NfMSIsIkR5bmFtaWNGaWVsZF8xIiwiZHluYW1pY0ZpZWxkIiwiRm9ybUJ1aWxkZXIiLCJhZGRGb3JtIiwiZXYiLCJwcmV2ZW50RGVmYXVsdCIsImNvbnRhaW5lciIsImNvdW50IiwicGFyc2VJbnQiLCJwYXJlbnQiLCJwYXJlbnRfY291bnQiLCJwYXJlbnRzIiwid3JhcHBlcl9wYXJlbnRfY291bnQiLCJwcm90byIsInJlcGxhY2UiLCJwcmV2IiwiYXBwZW5kIiwiY2hpbGRyZW4iLCJsYXN0Iiwic2VsZWN0MiIsInBsYWNlaG9sZGVyIiwiYWxsb3dDbGVhciIsIndyYXBBbGwiLCJhZGRQYXJlbnRGb3JtIiwiYWRkV3JhcHBlck9uQWRkIiwiZGVsZXRlRm9ybSIsImNvbGxlY3Rpb25MZW5ndGgiLCJ0ZyIsInJlbW92ZSIsImRlbGV0ZVBhcmVudEZvcm0iLCJhZGRXcmFwcGVyIiwiZm9ybUZpZWxkIiwidGV4dEFyZWFIZWlnaHQiLCJoZWlnaHQiLCJzY3JvbGxIZWlnaHQiLCJjc3MiLCJhZGRUb0NvbGxlY3Rpb24iLCJldmVudCIsImhhc0NsYXNzIiwic3RvcFByb3BhZ2F0aW9uIiwiaGFuZGxlRGVsZXRlUGFyZW50QnV0dG9ucyIsImRlbGV0ZUNvbGxlY3Rpb24iLCJkZWxldGVDb25maXJtYXRpb24iLCJjYW5jZWxQb3B1cCIsImRlbGV0ZUNvbmZpcm0iLCJkZWxldGVJbmRleCIsImNoaWxkT3JQYXJlbnQiLCJmYWRlSW4iLCJmYWRlT3V0IiwiZGVsZXRlQnV0dG9uIiwibXVsdGlGb3JtIiwiYmFja2dyb3VuZCIsIm91dGxpbmUiLCJmaWxlUGF0aCIsImRvY3VtZW50IiwidXJsIiwiZ2V0IiwidGhlbiIsInJlc3BvbnNlIiwic3VjY2VzcyIsImZvcm1hdCIsIm1pbWV0eXBlIiwibWVzc2FnZSIsImZpbGVVcmwiLCJkZWxldGVCdXR0b25zIiwicXVlcnlTZWxlY3RvckFsbCIsImNoYW5nZURlbGV0ZUJ1dHRvbklubmVySHRtbCIsImJ1dHRvbiIsImluaXRpYWxUZXh0IiwiZXNjYXBlSHRtbCIsInRleHRDb250ZW50IiwiaW5uZXJIVE1MIiwiZm9yRWFjaCIsImZvcm1CdWlsZGVyIiwidGV4dEFyZWFUYXJnZXQiLCJzZWxlY3Rfc2VhcmNoIiwicXVlcnlTZWxlY3RvciIsImZvY3VzIiwidXBkYXRlUmVnaXN0cmF0aW9uQWdlbmN5IiwiY291bnRyeSIsImVuZHBvaW50IiwiYWpheCIsImN1cnJlbnRfdmFsIiwiZW1wdHkiLCJPcHRpb24iLCJpZGVudGlmaWVyIiwic3ViZWxlbWVudCIsInRpdGxlIiwiZXJyb3JDb250YWluZXIiLCJjaGlsZENvdW50IiwiY2hpbGRFbGVtZW50Q291bnQiLCJjbGFzc0xpc3QiLCJhZGQiLCJyZWFkT25seVNlbGVjdHMiLCJzZWxlY3QiLCJzZWxlY3RFbGVtZW50UGFyZW50V3JhcHBlciIsIm5leHRTaWJsaW5nIiwic2VsZWN0RWxlbWVudFBhcmVudCIsImZpcnN0Q2hpbGQiLCJzZWxlY3RFbGVtZW50Iiwic3R5bGUiLCJjdXJzb3IiLCJvYnNlcnZlciIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJtdXRhdGlvbnNMaXN0IiwibXV0YXRpb24iLCJhZGRlZE5vZGVzIiwibm9kZSIsIkVsZW1lbnQiLCJtYXRjaGVzIiwibmV3RGVsZXRlQnV0dG9ucyIsIm9ic2VydmUiLCJib2R5IiwiY2hpbGRMaXN0Iiwic3VidHJlZSIsImF0dGFjaENvbGxhcHNhYmxlQnV0dG9uRXZlbnRzIiwiX2NvbnNvbGUiLCJfY29uc29sZTIiLCJsYWJlbCIsImdldENsb3Nlc3RMYWJlbERvbSIsIm9wdGlvbmFsTGFiZWwiLCJnZXRPcHRpb25hbFRleHREb20iLCJnZXRDbG9zZXN0UGFyZW50U3ViZWxlbWVudERvbSIsInRoaXNCdXR0b25CZWxvbmdzVG9PcHRpb25hbEZvcm0iLCJjb25zb2xlIiwibG9nIiwiYXBwbHkiLCJvb19vbyIsImFkZEV2ZW50TGlzdGVuZXIiLCJ0b2dnbGVPcHRpb25hbFRleHQiLCJ0b2dnbGVBY2NvcmRpb25JdGVtcyIsInRvZ2dsZSIsImVycm9yTWVzc2FnZUV4aXN0cyIsImNsaWNrIiwiZXJyb3JEaXZzIiwiZXJyb3JUZXh0cyIsIl9pdGVyYXRvciIsIl9zdGVwIiwiZGl2IiwidHJpbSIsIl9pdGVyYXRvcjIiLCJfc3RlcDIiLCJvcHRpb25hbExhYmVsV2l0aFN2ZyIsIm9wdGlvbmFsTGFiZWxXaXRoQnJhY2tldHMiLCJzdmdFeGlzdHMiLCJpc0FkZEFkZGl0aW9uYWxCdXR0b25PdXRzaWRlIiwibmV4dEVsZW1lbnRTaWJsaW5nIiwidGFnTmFtZSIsImNvbnRhaW5zIiwiaGlkZWFibGVTdWJlbGVtZW50cyIsImZpbHRlciIsImNoaWxkIiwib3V0c2lkZUJ1dHRvbiIsImhhc0FkZEFkZGl0aW9uYWxCdXR0b25PdXRzaWRlIiwiYXR0YWNoSW5pdGlhbENvbGxhcHNhYmxlQnV0dG9uRXZlbnRzIiwiYWxsQ29sbGFwc2FibGVCdXR0b25zIiwib2JzZXJ2ZU5ld0NvbGxhcHNhYmxlQnV0dG9ucyIsInR5cGUiLCJIVE1MRWxlbWVudCIsIm5ld0NvbGxhcHNhYmxlQnV0dG9ucyIsInVuc2FmZSIsIm9vX2NtIiwiZXZhbCIsIl9sZW4iLCJhcmd1bWVudHMiLCJ2IiwiX2tleSIsImNvbnNvbGVMb2ciLCJvb190ciIsIl9sZW4yIiwiX2tleTIiLCJjb25zb2xlVHJhY2UiLCJvb190eCIsIl9sZW4zIiwiX2tleTMiLCJjb25zb2xlRXJyb3IiLCJvb190cyIsImNvbnNvbGVUaW1lIiwib29fdGUiLCJjb25zb2xlVGltZUVuZCJdLCJzb3VyY2VSb290IjoiIn0=
>>>>>>> 9c57c9b9 (-[x] Added Placeholders For Register Page)
=======
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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bUMsSUFBSSxFQUFLO1lBQ2xDLElBQUlBLElBQUksWUFBWStDLFdBQVcsRUFBRTtjQUM3QixJQUFNQyxxQkFBcUIsR0FBR2hELElBQUksQ0FBQzFDLGdCQUFnQixDQUFDLHFCQUFxQixDQUFDO2NBQzFFMEYscUJBQXFCLENBQUNuRixPQUFPLENBQUMsVUFBQ0wsTUFBTTtnQkFBQSxPQUFLZ0QsNkJBQTZCLENBQUNoRCxNQUFNLENBQUM7Y0FBQSxFQUFDO1lBQ3BGO1VBQ0osQ0FBQyxDQUFDO1FBQ047TUFDSixDQUFDLENBQUM7SUFDTixDQUFDLENBQUM7SUFDRm1DLFFBQVEsQ0FBQ1MsT0FBTyxDQUFDekQsUUFBUSxDQUFDMEQsSUFBSSxFQUFFO01BQUVDLFNBQVMsRUFBRSxJQUFJO01BQUVDLE9BQU8sRUFBRTtJQUFLLENBQUMsQ0FBQztFQUN2RTtFQUNBb0Msb0NBQW9DLENBQUMsQ0FBQztFQUN0Q0UsNEJBQTRCLENBQUMsQ0FBQztBQUNsQyxDQUFDLENBQUM7QUFDRixTQUFTbkYsVUFBVUEsQ0FBQ3VGLE1BQU0sRUFBRTtFQUN4QixPQUFPQSxNQUFNLENBQ1I5SSxPQUFPLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUN0QkEsT0FBTyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FDckJBLE9BQU8sQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQ3JCQSxPQUFPLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUN2QkEsT0FBTyxDQUFDLElBQUksRUFBRSxRQUFRLENBQUM7QUFDaEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2pzL3NjcmlwdHMvRHluYW1pY0ZpZWxkLnRzIiwid2VicGFjazovLy8uL3Jlc291cmNlcy9hc3NldHMvanMvc2NyaXB0cy9mb3JtYnVpbGRlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRHluYW1pY0ZpZWxkID0gdm9pZCAwO1xuY29uc3QganF1ZXJ5XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImpxdWVyeVwiKSk7XG5yZXF1aXJlKFwic2VsZWN0MlwiKTtcbmNsYXNzIER5bmFtaWNGaWVsZCB7XG4gICAgLyoqXG4gICAgICogSGlkZSBhbmQgU2hvdyBkaWZmZXJlbnQgZm9ybSBmaWVsZHMgYmFzZWQgb24gdm9jYWJ1bGFyeSBhbmQgb3RoZXIgdHlwZXNcbiAgICAgKi9cbiAgICBoaWRlU2hvd0Zvcm1GaWVsZHMoKSB7XG4gICAgICAgIHRoaXMuaHVtYW5pdGFyaWFuU2NvcGVIaWRlVm9jYWJ1bGFyeVVyaSgpO1xuICAgICAgICB0aGlzLmNvdW50cnlCdWRnZXRIaWRlQ29kZUZpZWxkKCk7XG4gICAgICAgIHRoaXMuYWlkVHlwZVZvY2FidWxhcnlIaWRlRmllbGQoKTtcbiAgICAgICAgdGhpcy5zZWN0b3JWb2NhYnVsYXJ5SGlkZUZpZWxkKCk7XG4gICAgICAgIHRoaXMucG9saWN5Vm9jYWJ1bGFyeUhpZGVGaWVsZCgpO1xuICAgICAgICB0aGlzLnJlY2lwaWVudFZvY2FidWxhcnlIaWRlRmllbGQoKTtcbiAgICAgICAgdGhpcy5zZWN0b3JWb2NhYnVsYXJ5SGlkZUZpZWxkKCk7XG4gICAgICAgIHRoaXMudGFnVm9jYWJ1bGFyeUhpZGVGaWVsZCgpO1xuICAgICAgICB0aGlzLnRyYW5zYWN0aW9uQWlkVHlwZVZvY2FidWxhcnlIaWRlRmllbGQoKTtcbiAgICAgICAgdGhpcy5pbmRpY2F0b3JSZWZlcmVuY2VIaWRlRmllbGRVcmkoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSHVtYW5pdGFyaWFuIFNjb3BlIEZvcm0gUGFnZVxuICAgICAqXG4gICAgICogQExvZ2ljIGhpZGUgdm9jYWJ1bGFyeS11cmkgZmllbGQgYmFzZWQgb24gJ0B2b2NhYnVsYXJ5JyBmaWVsZCB2YWx1ZVxuICAgICAqL1xuICAgIGh1bWFuaXRhcmlhblNjb3BlSGlkZVZvY2FidWxhcnlVcmkoKSB7XG4gICAgICAgIGNvbnN0IGh1bWFuaXRhcmlhblNjb3BlVm9jYWJ1bGFyeSA9ICgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnc2VsZWN0W2lkXj1cImh1bWFuaXRhcmlhbl9zY29wZVwiXVtpZCo9XCJbdm9jYWJ1bGFyeV1cIl0nKTtcbiAgICAgICAgaWYgKGh1bWFuaXRhcmlhblNjb3BlVm9jYWJ1bGFyeS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAvLyBoaWRlIGZpZWxkcyBvbiBwYWdlIGxvYWRcbiAgICAgICAgICAgIGpxdWVyeV8xLmRlZmF1bHQuZWFjaChodW1hbml0YXJpYW5TY29wZVZvY2FidWxhcnksIChpbmRleCwgc2NvcGUpID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsID0gKF9hID0gKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHNjb3BlKS52YWwoKSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJyc7XG4gICAgICAgICAgICAgICAgdGhpcy5oaWRlSHVtYW5pdGFyaWFuU2NvcGVGaWVsZCgoMCwganF1ZXJ5XzEuZGVmYXVsdCkoc2NvcGUpLCB2YWwudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIGhpZGUvc2hvdyBmaWVsZHMgb24gdmFsdWUgY2hhbmdlXG4gICAgICAgICAgICBodW1hbml0YXJpYW5TY29wZVZvY2FidWxhcnkub24oJ3NlbGVjdDI6c2VsZWN0JywgKGUpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWwgPSBlLnBhcmFtcy5kYXRhLmlkO1xuICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gZS50YXJnZXQ7XG4gICAgICAgICAgICAgICAgdGhpcy5oaWRlSHVtYW5pdGFyaWFuU2NvcGVGaWVsZCgoMCwganF1ZXJ5XzEuZGVmYXVsdCkoaW5kZXgpLCB2YWwpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBoaWRlL3Nob3cgZmllbGRzIG9uIHZhbHVlIGNsZWFyXG4gICAgICAgICAgICBodW1hbml0YXJpYW5TY29wZVZvY2FidWxhcnkub24oJ3NlbGVjdDI6Y2xlYXInLCAoZSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gZS50YXJnZXQ7XG4gICAgICAgICAgICAgICAgdGhpcy5oaWRlSHVtYW5pdGFyaWFuU2NvcGVGaWVsZCgoMCwganF1ZXJ5XzEuZGVmYXVsdCkoaW5kZXgpLCAnJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBoaWRlIGNvdW50cnkgYnVkZ2V0IGJhc2VkIG9uIHZvY2FidWxhcnlcbiAgICBoaWRlSHVtYW5pdGFyaWFuU2NvcGVGaWVsZChpbmRleCwgdmFsdWUpIHtcbiAgICAgICAgY29uc3QgaHVtYW5pdGFyaWFuU2NvcGVIaWRlVm9jYWJ1bGFyeVVyaSA9ICdpbnB1dFtpZF49XCJodW1hbml0YXJpYW5fc2NvcGVcIl1baWQqPVwiW3ZvY2FidWxhcnlfdXJpXVwiXSc7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gJzk5Jykge1xuICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQtZ3JvdXAnKVxuICAgICAgICAgICAgICAgIC5maW5kKGh1bWFuaXRhcmlhblNjb3BlSGlkZVZvY2FidWxhcnlVcmkpXG4gICAgICAgICAgICAgICAgLnNob3coKVxuICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkJylcbiAgICAgICAgICAgICAgICAuc2hvdygpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQtZ3JvdXAnKVxuICAgICAgICAgICAgICAgIC5maW5kKGh1bWFuaXRhcmlhblNjb3BlSGlkZVZvY2FidWxhcnlVcmkpXG4gICAgICAgICAgICAgICAgLnZhbCgnJylcbiAgICAgICAgICAgICAgICAudHJpZ2dlcignY2hhbmdlJylcbiAgICAgICAgICAgICAgICAuaGlkZSgpXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2Rpc2FibGVkJywgJ2Rpc2FibGVkJylcbiAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQnKVxuICAgICAgICAgICAgICAgIC5oaWRlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogSHVtYW5pdGFyaWFuIFNjb3BlIEZvcm0gUGFnZVxuICAgICAqXG4gICAgICogQExvZ2ljIGhpZGUgdm9jYWJ1bGFyeS11cmkgZmllbGQgYmFzZWQgb24gJ0B2b2NhYnVsYXJ5JyBmaWVsZCB2YWx1ZVxuICAgICAqL1xuICAgIGluZGljYXRvclJlZmVyZW5jZUhpZGVGaWVsZFVyaSgpIHtcbiAgICAgICAgY29uc3QgcmVmZXJlbmNlVm9jYWJ1bGFyeSA9ICgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnc2VsZWN0W2lkXj1cInJlZmVyZW5jZVwiXVtpZCo9XCJbdm9jYWJ1bGFyeV1cIl0nKTtcbiAgICAgICAgaWYgKHJlZmVyZW5jZVZvY2FidWxhcnkubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgLy8gaGlkZSBmaWVsZHMgb24gcGFnZSBsb2FkXG4gICAgICAgICAgICBqcXVlcnlfMS5kZWZhdWx0LmVhY2gocmVmZXJlbmNlVm9jYWJ1bGFyeSwgKGluZGV4LCBzY29wZSkgPT4ge1xuICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWwgPSAoX2EgPSAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoc2NvcGUpLnZhbCgpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAnJztcbiAgICAgICAgICAgICAgICB0aGlzLmluZGljYXRvclJlZmVyZW5jZUhpZGVGaWVsZCgoMCwganF1ZXJ5XzEuZGVmYXVsdCkoc2NvcGUpLCB2YWwudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIGhpZGUvc2hvdyBmaWVsZHMgb24gdmFsdWUgY2hhbmdlXG4gICAgICAgICAgICByZWZlcmVuY2VWb2NhYnVsYXJ5Lm9uKCdzZWxlY3QyOnNlbGVjdCcsIChlKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsID0gZS5wYXJhbXMuZGF0YS5pZDtcbiAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IGUudGFyZ2V0O1xuICAgICAgICAgICAgICAgIHRoaXMuaW5kaWNhdG9yUmVmZXJlbmNlSGlkZUZpZWxkKCgwLCBqcXVlcnlfMS5kZWZhdWx0KShpbmRleCksIHZhbCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIGhpZGUvc2hvdyBmaWVsZHMgb24gdmFsdWUgY2xlYXJcbiAgICAgICAgICAgIHJlZmVyZW5jZVZvY2FidWxhcnkub24oJ3NlbGVjdDI6Y2xlYXInLCAoZSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gZS50YXJnZXQ7XG4gICAgICAgICAgICAgICAgdGhpcy5pbmRpY2F0b3JSZWZlcmVuY2VIaWRlRmllbGQoKDAsIGpxdWVyeV8xLmRlZmF1bHQpKGluZGV4KSwgJycpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gaGlkZSBjb3VudHJ5IGJ1ZGdldCBiYXNlZCBvbiB2b2NhYnVsYXJ5XG4gICAgaW5kaWNhdG9yUmVmZXJlbmNlSGlkZUZpZWxkKGluZGV4LCB2YWx1ZSkge1xuICAgICAgICBjb25zdCByZWZlcmVuY2VVcmkgPSAnaW5wdXRbaWRePVwicmVmZXJlbmNlXCJdW2lkKj1cIltpbmRpY2F0b3JfdXJpXVwiXSc7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gJzk5Jykge1xuICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQtZ3JvdXAnKVxuICAgICAgICAgICAgICAgIC5maW5kKHJlZmVyZW5jZVVyaSlcbiAgICAgICAgICAgICAgICAuc2hvdygpXG4gICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2Rpc2FibGVkJylcbiAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQnKVxuICAgICAgICAgICAgICAgIC5zaG93KCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZC1ncm91cCcpXG4gICAgICAgICAgICAgICAgLmZpbmQocmVmZXJlbmNlVXJpKVxuICAgICAgICAgICAgICAgIC52YWwoJycpXG4gICAgICAgICAgICAgICAgLnRyaWdnZXIoJ2NoYW5nZScpXG4gICAgICAgICAgICAgICAgLmhpZGUoKVxuICAgICAgICAgICAgICAgIC5hdHRyKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkJylcbiAgICAgICAgICAgICAgICAuaGlkZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvdW50cnkgQnVkZ2V0IEZvcm0gUGFnZVxuICAgICAqXG4gICAgICogQExvZ2ljIHNob3cvaGlkZSAnY29kZScgZmllbGQgYmFzZWQgb24gJ0B2b2NhYnVsYXJ5JyBmaWVsZCB2YWx1ZVxuICAgICAqL1xuICAgIGNvdW50cnlCdWRnZXRIaWRlQ29kZUZpZWxkKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGNvbnN0IGNvdW50cnlCdWRnZXRWb2NhYnVsYXJ5ID0gKDAsIGpxdWVyeV8xLmRlZmF1bHQpKCdzZWxlY3QjY291bnRyeV9idWRnZXRfdm9jYWJ1bGFyeScpO1xuICAgICAgICBpZiAoY291bnRyeUJ1ZGdldFZvY2FidWxhcnkubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgLy8gaGlkZS9zaG93IG9uIHBhZ2UgbG9hZFxuICAgICAgICAgICAgY29uc3QgdmFsID0gKF9hID0gY291bnRyeUJ1ZGdldFZvY2FidWxhcnkudmFsKCkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICcxJztcbiAgICAgICAgICAgIHRoaXMuaGlkZUNvdW50cnlCdWRnZXRGaWVsZCh2YWwudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICAvLyBoaWRlL3Nob3cgb24gdmFsdWUgY2hhbmdlXG4gICAgICAgICAgICBjb3VudHJ5QnVkZ2V0Vm9jYWJ1bGFyeS5vbignc2VsZWN0MjpzZWxlY3QnLCAoZSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHZhbCA9IGUucGFyYW1zLmRhdGEuaWQ7XG4gICAgICAgICAgICAgICAgdGhpcy5oaWRlQ291bnRyeUJ1ZGdldEZpZWxkKHZhbCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vaGlkZS9zaG93IGJhc2VkIG9uIHZhbHVlIGNsZWFyZWRcbiAgICAgICAgICAgIGNvdW50cnlCdWRnZXRWb2NhYnVsYXJ5Lm9uKCdzZWxlY3QyOmNsZWFyJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuaGlkZUNvdW50cnlCdWRnZXRGaWVsZCgnJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBIaWRlIENvdW50cnkgQnVkZ2V0IEZpZWxkc1xuICAgICAqL1xuICAgIGhpZGVDb3VudHJ5QnVkZ2V0RmllbGQodmFsdWUpIHtcbiAgICAgICAgY29uc3QgY291bnRyeUJ1ZGdldENvZGVJbnB1dCA9ICdpbnB1dFtpZF49XCJidWRnZXRfaXRlbVwiXVtpZCo9XCJbY29kZV90ZXh0XVwiXScsIGNvdW50cnlCdWRnZXRDb2RlU2VsZWN0ID0gJ3NlbGVjdFtpZF49XCJidWRnZXRfaXRlbVwiXVtpZCo9XCJbY29kZV1cIl0nO1xuICAgICAgICBpZiAodmFsdWUgPT09ICcxJykge1xuICAgICAgICAgICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKGNvdW50cnlCdWRnZXRDb2RlU2VsZWN0KVxuICAgICAgICAgICAgICAgIC52YWwoJycpXG4gICAgICAgICAgICAgICAgLnRyaWdnZXIoJ2NoYW5nZScpXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2Rpc2FibGVkJywgJ2Rpc2FibGVkJylcbiAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQnKVxuICAgICAgICAgICAgICAgIC5oaWRlKCk7XG4gICAgICAgICAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoY291bnRyeUJ1ZGdldENvZGVJbnB1dClcbiAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignZGlzYWJsZWQnKVxuICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgLnNob3coKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KShjb3VudHJ5QnVkZ2V0Q29kZVNlbGVjdClcbiAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignZGlzYWJsZWQnKVxuICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgLnNob3coKTtcbiAgICAgICAgICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KShjb3VudHJ5QnVkZ2V0Q29kZUlucHV0KVxuICAgICAgICAgICAgICAgIC52YWwoJycpXG4gICAgICAgICAgICAgICAgLnRyaWdnZXIoJ2NoYW5nZScpXG4gICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkJylcbiAgICAgICAgICAgICAgICAuaGlkZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFpZFR5cGUgRm9ybSBQYWdlXG4gICAgICpcbiAgICAgKiBATG9naWMgaGlkZSB2b2NhYnVsYXJ5LXVyaSBhbmQgY29kZXMgZmllbGQgYmFzZWQgb24gJ0B2b2NhYnVsYXJ5JyBmaWVsZCB2YWx1ZVxuICAgICAqL1xuICAgIGFpZFR5cGVWb2NhYnVsYXJ5SGlkZUZpZWxkKCkge1xuICAgICAgICBjb25zdCBhaWR0eXBlX3ZvY2FidWxhcnkgPSAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoJ3NlbGVjdFtpZCo9XCJkZWZhdWx0X2FpZF90eXBlX3ZvY2FidWxhcnlcIl0nKTtcbiAgICAgICAgaWYgKGFpZHR5cGVfdm9jYWJ1bGFyeS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBqcXVlcnlfMS5kZWZhdWx0LmVhY2goYWlkdHlwZV92b2NhYnVsYXJ5LCAoaW5kZXgsIGl0ZW0pID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IChfYSA9ICgwLCBqcXVlcnlfMS5kZWZhdWx0KShpdGVtKS52YWwoKSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJzEnO1xuICAgICAgICAgICAgICAgIHRoaXMuaGlkZUFpZFR5cGVTZWxlY3RGaWVsZCgoMCwganF1ZXJ5XzEuZGVmYXVsdCkoaXRlbSksIGRhdGEudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGFpZHR5cGVfdm9jYWJ1bGFyeS5vbignc2VsZWN0MjpzZWxlY3QnLCAoZSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBlLnBhcmFtcy5kYXRhLmlkO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0O1xuICAgICAgICAgICAgICAgIHRoaXMuaGlkZUFpZFR5cGVTZWxlY3RGaWVsZCgoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGFyZ2V0KSwgZGF0YSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGFpZHR5cGVfdm9jYWJ1bGFyeS5vbignc2VsZWN0MjpjbGVhcicsIChlKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gZS50YXJnZXQ7XG4gICAgICAgICAgICAgICAgdGhpcy5oaWRlQWlkVHlwZVNlbGVjdEZpZWxkKCgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0YXJnZXQpLCAnJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBBaWRUeXBlIEZvcm0gUGFnZVxuICAgICAqXG4gICAgICogQExvZ2ljIGhpZGUgdm9jYWJ1bGFyeS11cmkgYW5kIGNvZGVzIGZpZWxkIGJhc2VkIG9uICdAdm9jYWJ1bGFyeScgZmllbGQgdmFsdWVcbiAgICAgKi9cbiAgICB0cmFuc2FjdGlvbkFpZFR5cGVWb2NhYnVsYXJ5SGlkZUZpZWxkKCkge1xuICAgICAgICBjb25zdCBhaWR0eXBlX3ZvY2FidWxhcnkgPSAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoJ3NlbGVjdFtpZCo9XCJhaWRfdHlwZV92b2NhYnVsYXJ5XCJdJyk7XG4gICAgICAgIGlmIChhaWR0eXBlX3ZvY2FidWxhcnkubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAganF1ZXJ5XzEuZGVmYXVsdC5lYWNoKGFpZHR5cGVfdm9jYWJ1bGFyeSwgKGluZGV4LCBpdGVtKSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSAoX2EgPSAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoaXRlbSkudmFsKCkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICcxJztcbiAgICAgICAgICAgICAgICB0aGlzLmhpZGVUcmFuc2FjdGlvbkFpZFR5cGVTZWxlY3RGaWVsZCgoMCwganF1ZXJ5XzEuZGVmYXVsdCkoaXRlbSksIGRhdGEudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGFpZHR5cGVfdm9jYWJ1bGFyeS5vbignc2VsZWN0MjpzZWxlY3QnLCAoZSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBlLnBhcmFtcy5kYXRhLmlkO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0O1xuICAgICAgICAgICAgICAgIHRoaXMuaGlkZVRyYW5zYWN0aW9uQWlkVHlwZVNlbGVjdEZpZWxkKCgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0YXJnZXQpLCBkYXRhKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYWlkdHlwZV92b2NhYnVsYXJ5Lm9uKCdzZWxlY3QyOmNsZWFyJywgKGUpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB0YXJnZXQgPSBlLnRhcmdldDtcbiAgICAgICAgICAgICAgICB0aGlzLmhpZGVUcmFuc2FjdGlvbkFpZFR5cGVTZWxlY3RGaWVsZCgoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGFyZ2V0KSwgJycpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogSGlkZSBBaWQgVHlwZSBTZWxlY3QgRmllbGRzXG4gICAgICovXG4gICAgaGlkZUFpZFR5cGVTZWxlY3RGaWVsZChpbmRleCwgdmFsdWUpIHtcbiAgICAgICAgY29uc3QgZGVmYXVsdF9haWRfdHlwZSA9ICdzZWxlY3RbaWQqPVwiW2RlZmF1bHRfYWlkX3R5cGVdXCJdJywgZWFybWFya2luZ19jYXRlZ29yeSA9ICdzZWxlY3RbaWQqPVwiW2Vhcm1hcmtpbmdfY2F0ZWdvcnldXCJdJywgZWFybWFya2luZ19tb2RhbGl0eSA9ICdzZWxlY3RbaWQqPVwiW2Vhcm1hcmtpbmdfbW9kYWxpdHldXCJdJywgY2FzaF9hbmRfdm91Y2hlcl9tb2RhbGl0aWVzID0gJ3NlbGVjdFtpZCo9XCJbY2FzaF9hbmRfdm91Y2hlcl9tb2RhbGl0aWVzXVwiXScsIGNhc2UxID0gJ3NlbGVjdFtpZCo9XCJbZWFybWFya2luZ19jYXRlZ29yeV1cIl0sc2VsZWN0W2lkKj1cIltlYXJtYXJraW5nX21vZGFsaXR5XVwiXSxzZWxlY3RbaWQqPVwiW2Nhc2hfYW5kX3ZvdWNoZXJfbW9kYWxpdGllc11cIl0nLCBjYXNlMiA9ICdzZWxlY3RbaWQqPVwiW2RlZmF1bHRfYWlkX3R5cGVdXCJdLHNlbGVjdFtpZCo9XCJbZWFybWFya2luZ19tb2RhbGl0eV1cIl0sc2VsZWN0W2lkKj1cIltjYXNoX2FuZF92b3VjaGVyX21vZGFsaXRpZXNdXCJdJywgY2FzZTMgPSAnc2VsZWN0W2lkKj1cIltkZWZhdWx0X2FpZF90eXBlXVwiXSxzZWxlY3RbaWQqPVwiW2Vhcm1hcmtpbmdfY2F0ZWdvcnldXCJdLHNlbGVjdFtpZCo9XCJbY2FzaF9hbmRfdm91Y2hlcl9tb2RhbGl0aWVzXVwiXScsIGNhc2U0ID0gJ3NlbGVjdFtpZCo9XCJbZGVmYXVsdF9haWRfdHlwZV1cIl0sc2VsZWN0W2lkKj1cIltlYXJtYXJraW5nX2NhdGVnb3J5XVwiXSxzZWxlY3RbaWQqPVwiW2Vhcm1hcmtpbmdfbW9kYWxpdHldXCJdJztcbiAgICAgICAgc3dpdGNoICh2YWx1ZSkge1xuICAgICAgICAgICAgY2FzZSAnMic6XG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoZWFybWFya2luZ19jYXRlZ29yeSlcbiAgICAgICAgICAgICAgICAgICAgLnNob3coKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignZGlzYWJsZWQnKVxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQnKVxuICAgICAgICAgICAgICAgICAgICAuc2hvdygpO1xuICAgICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZC1ncm91cCcpXG4gICAgICAgICAgICAgICAgICAgIC5maW5kKGNhc2UyKVxuICAgICAgICAgICAgICAgICAgICAudmFsKCcnKVxuICAgICAgICAgICAgICAgICAgICAudHJpZ2dlcignY2hhbmdlJylcbiAgICAgICAgICAgICAgICAgICAgLmhpZGUoKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignZGlzYWJsZWQnLCAnZGlzYWJsZWQnKVxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQnKVxuICAgICAgICAgICAgICAgICAgICAuaGlkZSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnMyc6XG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoZWFybWFya2luZ19tb2RhbGl0eSlcbiAgICAgICAgICAgICAgICAgICAgLnNob3coKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignZGlzYWJsZWQnKVxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQnKVxuICAgICAgICAgICAgICAgICAgICAuc2hvdygpO1xuICAgICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZC1ncm91cCcpXG4gICAgICAgICAgICAgICAgICAgIC5maW5kKGNhc2UzKVxuICAgICAgICAgICAgICAgICAgICAudmFsKCcnKVxuICAgICAgICAgICAgICAgICAgICAudHJpZ2dlcignY2hhbmdlJylcbiAgICAgICAgICAgICAgICAgICAgLmhpZGUoKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignZGlzYWJsZWQnLCAnZGlzYWJsZWQnKVxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQnKVxuICAgICAgICAgICAgICAgICAgICAuaGlkZSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnNCc6XG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoY2FzaF9hbmRfdm91Y2hlcl9tb2RhbGl0aWVzKVxuICAgICAgICAgICAgICAgICAgICAuc2hvdygpXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5zaG93KCk7XG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoY2FzZTQpXG4gICAgICAgICAgICAgICAgICAgIC52YWwoJycpXG4gICAgICAgICAgICAgICAgICAgIC50cmlnZ2VyKCdjaGFuZ2UnKVxuICAgICAgICAgICAgICAgICAgICAuaGlkZSgpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5oaWRlKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZC1ncm91cCcpXG4gICAgICAgICAgICAgICAgICAgIC5maW5kKGRlZmF1bHRfYWlkX3R5cGUpXG4gICAgICAgICAgICAgICAgICAgIC5zaG93KClcbiAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2Rpc2FibGVkJylcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkJylcbiAgICAgICAgICAgICAgICAgICAgLnNob3coKTtcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQtZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAuZmluZChjYXNlMSlcbiAgICAgICAgICAgICAgICAgICAgLnZhbCgnJylcbiAgICAgICAgICAgICAgICAgICAgLnRyaWdnZXIoJ2NoYW5nZScpXG4gICAgICAgICAgICAgICAgICAgIC5oaWRlKClcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2Rpc2FibGVkJywgJ2Rpc2FibGVkJylcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkJylcbiAgICAgICAgICAgICAgICAgICAgLmhpZGUoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBIaWRlIFRyYW5zYWN0aW9uIEFpZCBUeXBlIFNlbGVjdCBGaWVsZHNcbiAgICAgKi9cbiAgICBoaWRlVHJhbnNhY3Rpb25BaWRUeXBlU2VsZWN0RmllbGQoaW5kZXgsIHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGFpZF90eXBlID0gJ3NlbGVjdFtpZCo9XCJbYWlkX3R5cGVfY29kZV1cIl0nLCBlYXJtYXJraW5nX2NhdGVnb3J5ID0gJ3NlbGVjdFtpZCo9XCJbZWFybWFya2luZ19jYXRlZ29yeV1cIl0nLCBlYXJtYXJraW5nX21vZGFsaXR5ID0gJ3NlbGVjdFtpZCo9XCJbZWFybWFya2luZ19tb2RhbGl0eV1cIl0nLCBjYXNoX2FuZF92b3VjaGVyX21vZGFsaXRpZXMgPSAnc2VsZWN0W2lkKj1cIltjYXNoX2FuZF92b3VjaGVyX21vZGFsaXRpZXNdXCJdJywgY2FzZTEgPSAnc2VsZWN0W2lkKj1cIltlYXJtYXJraW5nX2NhdGVnb3J5XVwiXSxzZWxlY3RbaWQqPVwiW2Vhcm1hcmtpbmdfbW9kYWxpdHldXCJdLHNlbGVjdFtpZCo9XCJbY2FzaF9hbmRfdm91Y2hlcl9tb2RhbGl0aWVzXVwiXScsIGNhc2UyID0gJ3NlbGVjdFtpZCo9XCJbYWlkX3R5cGVfY29kZV1cIl0sc2VsZWN0W2lkKj1cIltlYXJtYXJraW5nX21vZGFsaXR5XVwiXSxzZWxlY3RbaWQqPVwiW2Nhc2hfYW5kX3ZvdWNoZXJfbW9kYWxpdGllc11cIl0nLCBjYXNlMyA9ICdzZWxlY3RbaWQqPVwiW2FpZF90eXBlX2NvZGVdXCJdLHNlbGVjdFtpZCo9XCJbZWFybWFya2luZ19jYXRlZ29yeV1cIl0sc2VsZWN0W2lkKj1cIltjYXNoX2FuZF92b3VjaGVyX21vZGFsaXRpZXNdXCJdJywgY2FzZTQgPSAnc2VsZWN0W2lkKj1cIlthaWRfdHlwZV9jb2RlXVwiXSxzZWxlY3RbaWQqPVwiW2Vhcm1hcmtpbmdfY2F0ZWdvcnldXCJdLHNlbGVjdFtpZCo9XCJbZWFybWFya2luZ19tb2RhbGl0eV1cIl0nO1xuICAgICAgICBzd2l0Y2ggKHZhbHVlKSB7XG4gICAgICAgICAgICBjYXNlICcyJzpcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQtZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAuZmluZChlYXJtYXJraW5nX2NhdGVnb3J5KVxuICAgICAgICAgICAgICAgICAgICAuc2hvdygpXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5zaG93KCk7XG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoY2FzZTIpXG4gICAgICAgICAgICAgICAgICAgIC52YWwoJycpXG4gICAgICAgICAgICAgICAgICAgIC50cmlnZ2VyKCdjaGFuZ2UnKVxuICAgICAgICAgICAgICAgICAgICAuaGlkZSgpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5oaWRlKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICczJzpcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQtZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAuZmluZChlYXJtYXJraW5nX21vZGFsaXR5KVxuICAgICAgICAgICAgICAgICAgICAuc2hvdygpXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5zaG93KCk7XG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoY2FzZTMpXG4gICAgICAgICAgICAgICAgICAgIC52YWwoJycpXG4gICAgICAgICAgICAgICAgICAgIC50cmlnZ2VyKCdjaGFuZ2UnKVxuICAgICAgICAgICAgICAgICAgICAuaGlkZSgpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5oaWRlKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICc0JzpcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQtZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAuZmluZChjYXNoX2FuZF92b3VjaGVyX21vZGFsaXRpZXMpXG4gICAgICAgICAgICAgICAgICAgIC5zaG93KClcbiAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2Rpc2FibGVkJylcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkJylcbiAgICAgICAgICAgICAgICAgICAgLnNob3coKTtcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQtZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAuZmluZChjYXNlNClcbiAgICAgICAgICAgICAgICAgICAgLnZhbCgnJylcbiAgICAgICAgICAgICAgICAgICAgLnRyaWdnZXIoJ2NoYW5nZScpXG4gICAgICAgICAgICAgICAgICAgIC5oaWRlKClcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2Rpc2FibGVkJywgJ2Rpc2FibGVkJylcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkJylcbiAgICAgICAgICAgICAgICAgICAgLmhpZGUoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoYWlkX3R5cGUpXG4gICAgICAgICAgICAgICAgICAgIC5zaG93KClcbiAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2Rpc2FibGVkJylcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkJylcbiAgICAgICAgICAgICAgICAgICAgLnNob3coKTtcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQtZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAuZmluZChjYXNlMSlcbiAgICAgICAgICAgICAgICAgICAgLnZhbCgnJylcbiAgICAgICAgICAgICAgICAgICAgLnRyaWdnZXIoJ2NoYW5nZScpXG4gICAgICAgICAgICAgICAgICAgIC5oaWRlKClcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2Rpc2FibGVkJywgJ2Rpc2FibGVkJylcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkJylcbiAgICAgICAgICAgICAgICAgICAgLmhpZGUoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBQb2xpY3kgTWFya2VyIEZvcm0gUGFnZVxuICAgICAqXG4gICAgICogQExvZ2ljIGhpZGUgdm9jYWJ1bGFyeS11cmkgYW5kIGNvZGVzIGZpZWxkIGJhc2VkIG9uICdAdm9jYWJ1bGFyeScgZmllbGQgdmFsdWVcbiAgICAgKi9cbiAgICBwb2xpY3lWb2NhYnVsYXJ5SGlkZUZpZWxkKCkge1xuICAgICAgICBjb25zdCBwb2xpY3ltYWtlcl92b2NhYnVsYXJ5ID0gKDAsIGpxdWVyeV8xLmRlZmF1bHQpKCdzZWxlY3RbaWQqPVwicG9saWN5X21hcmtlcl92b2NhYnVsYXJ5XCJdJyk7XG4gICAgICAgIGlmIChwb2xpY3ltYWtlcl92b2NhYnVsYXJ5Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGpxdWVyeV8xLmRlZmF1bHQuZWFjaChwb2xpY3ltYWtlcl92b2NhYnVsYXJ5LCAoaW5kZXgsIHBvbGljeV9tYXJrZXIpID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IChfYSA9ICgwLCBqcXVlcnlfMS5kZWZhdWx0KShwb2xpY3lfbWFya2VyKS52YWwoKSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJzEnO1xuICAgICAgICAgICAgICAgIHRoaXMuaGlkZVBvbGljeU1ha2VyRmllbGQoKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHBvbGljeV9tYXJrZXIpLCBkYXRhLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBwb2xpY3ltYWtlcl92b2NhYnVsYXJ5Lm9uKCdzZWxlY3QyOnNlbGVjdCcsIChlKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IGUucGFyYW1zLmRhdGEuaWQ7XG4gICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gZS50YXJnZXQ7XG4gICAgICAgICAgICAgICAgdGhpcy5oaWRlUG9saWN5TWFrZXJGaWVsZCgoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGFyZ2V0KSwgZGF0YSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHBvbGljeW1ha2VyX3ZvY2FidWxhcnkub24oJ3NlbGVjdDI6Y2xlYXInLCAoZSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0O1xuICAgICAgICAgICAgICAgIHRoaXMuaGlkZVBvbGljeU1ha2VyRmllbGQoKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRhcmdldCksICc5OScpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogSGlkZXMgUG9saWN5IE1hcmtlciBGb3JtIEZpZWxkc1xuICAgICAqL1xuICAgIGhpZGVQb2xpY3lNYWtlckZpZWxkKGluZGV4LCB2YWx1ZSkge1xuICAgICAgICBjb25zdCBjYXNlMV9zaG93ID0gJ3NlbGVjdFtpZCo9XCJbcG9saWN5X21hcmtlcl1cIl0nLCBjYXNlMl9zaG93ID0gJ2lucHV0W2lkKj1cIltwb2xpY3lfbWFya2VyX3RleHRdXCJdLGlucHV0W2lkKj1cIlt2b2NhYnVsYXJ5X3VyaV1cIl0nLCBjYXNlMSA9ICdpbnB1dFtpZCo9XCJbcG9saWN5X21hcmtlcl90ZXh0XVwiXSxpbnB1dFtpZCo9XCJbdm9jYWJ1bGFyeV91cmldXCJdJywgY2FzZTIgPSAnc2VsZWN0W2lkKj1cIltwb2xpY3lfbWFya2VyXVwiXSc7XG4gICAgICAgIHN3aXRjaCAodmFsdWUpIHtcbiAgICAgICAgICAgIGNhc2UgJzEnOlxuICAgICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZC1ncm91cCcpXG4gICAgICAgICAgICAgICAgICAgIC5maW5kKGNhc2UxX3Nob3cpXG4gICAgICAgICAgICAgICAgICAgIC5zaG93KClcbiAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2Rpc2FibGVkJylcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkJylcbiAgICAgICAgICAgICAgICAgICAgLnNob3coKTtcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQtZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAuZmluZChjYXNlMSlcbiAgICAgICAgICAgICAgICAgICAgLnZhbCgnJylcbiAgICAgICAgICAgICAgICAgICAgLnRyaWdnZXIoJ2NoYW5nZScpXG4gICAgICAgICAgICAgICAgICAgIC5oaWRlKClcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2Rpc2FibGVkJywgJ2Rpc2FibGVkJylcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkJylcbiAgICAgICAgICAgICAgICAgICAgLmhpZGUoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJzk5JzpcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoY2FzZTJfc2hvdylcbiAgICAgICAgICAgICAgICAgICAgLnNob3coKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignZGlzYWJsZWQnKVxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQnKVxuICAgICAgICAgICAgICAgICAgICAuc2hvdygpO1xuICAgICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZC1ncm91cCcpXG4gICAgICAgICAgICAgICAgICAgIC5maW5kKGNhc2UyKVxuICAgICAgICAgICAgICAgICAgICAudmFsKCcnKVxuICAgICAgICAgICAgICAgICAgICAudHJpZ2dlcignY2hhbmdlJylcbiAgICAgICAgICAgICAgICAgICAgLmhpZGUoKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignZGlzYWJsZWQnLCAnZGlzYWJsZWQnKVxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQnKVxuICAgICAgICAgICAgICAgICAgICAuaGlkZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNlY3RvciBGb3JtIFBhZ2VcbiAgICAgKlxuICAgICAqIEBMb2dpYyBoaWRlIHZvY2FidWxhcnktdXJpIGFuZCBjb2RlcyBmaWVsZCBiYXNlZCBvbiAnQHZvY2FidWxhcnknIGZpZWxkIHZhbHVlXG4gICAgICovXG4gICAgc2VjdG9yVm9jYWJ1bGFyeUhpZGVGaWVsZCgpIHtcbiAgICAgICAgY29uc3Qgc2VjdG9yX3ZvY2FidWxhcnkgPSAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoJ3NlbGVjdFtpZCo9XCJzZWN0b3Jfdm9jYWJ1bGFyeVwiXScpO1xuICAgICAgICBpZiAoc2VjdG9yX3ZvY2FidWxhcnkubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAganF1ZXJ5XzEuZGVmYXVsdC5lYWNoKHNlY3Rvcl92b2NhYnVsYXJ5LCAoaW5kZXgsIHNlY3RvcikgPT4ge1xuICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gKF9hID0gKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHNlY3RvcikudmFsKCkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICcxJztcbiAgICAgICAgICAgICAgICB0aGlzLmhpZGVTZWN0b3JGaWVsZCgoMCwganF1ZXJ5XzEuZGVmYXVsdCkoc2VjdG9yKSwgZGF0YS50b1N0cmluZygpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc2VjdG9yX3ZvY2FidWxhcnkub24oJ3NlbGVjdDI6c2VsZWN0JywgKGUpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gZS5wYXJhbXMuZGF0YS5pZDtcbiAgICAgICAgICAgICAgICBjb25zdCB0YXJnZXQgPSBlLnRhcmdldDtcbiAgICAgICAgICAgICAgICB0aGlzLmhpZGVTZWN0b3JGaWVsZCgoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGFyZ2V0KSwgZGF0YSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHNlY3Rvcl92b2NhYnVsYXJ5Lm9uKCdzZWxlY3QyOmNsZWFyJywgKGUpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB0YXJnZXQgPSBlLnRhcmdldDtcbiAgICAgICAgICAgICAgICB0aGlzLmhpZGVTZWN0b3JGaWVsZCgoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGFyZ2V0KSwgJycpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogSGlkZSBTZWN0b3IgRm9ybSBmaWVsZHNcbiAgICAgKi9cbiAgICBoaWRlU2VjdG9yRmllbGQoaW5kZXgsIHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGNhc2UxX3Nob3cgPSAnc2VsZWN0W2lkKj1cIltjb2RlXVwiXScsIGNhc2UyX3Nob3cgPSAnc2VsZWN0W2lkKj1cIltjYXRlZ29yeV9jb2RlXVwiXScsIGNhc2U3X3Nob3cgPSAnc2VsZWN0W2lkKj1cIltzZGdfZ29hbF1cIl0nLCBjYXNlOF9zaG93ID0gJ3NlbGVjdFtpZCo9XCJbc2RnX3RhcmdldF1cIl0nLCBjYXNlOThfOTlfc2hvdyA9ICdpbnB1dFtpZCo9XCJbdGV4dF1cIl0saW5wdXRbaWQqPVwiW3ZvY2FidWxhcnlfdXJpXVwiXScsIGRlZmF1bHRfc2hvdyA9ICdpbnB1dFtpZCo9XCJbdGV4dF1cIl0nLCBjYXNlMSA9ICdzZWxlY3RbaWQqPVwiW2NhdGVnb3J5X2NvZGVdXCJdLHNlbGVjdFtpZCo9XCJbc2RnX2dvYWxdXCJdLHNlbGVjdFtpZCo9XCJbc2RnX3RhcmdldF1cIl0saW5wdXRbaWQqPVwiW3ZvY2FidWxhcnlfdXJpXVwiXSxpbnB1dFtpZCo9XCJbdGV4dF1cIl0nLCBjYXNlMiA9ICdpbnB1dFtpZCo9XCJbdm9jYWJ1bGFyeV91cmldXCJdLHNlbGVjdFtpZCo9XCJbc2RnX2dvYWxdXCJdLHNlbGVjdFtpZCo9XCJbc2RnX3RhcmdldF1cIl0sc2VsZWN0W2lkKj1cIltjb2RlXVwiXSxpbnB1dFtpZCo9XCJbdGV4dF1cIl0nLCBjYXNlNyA9ICdpbnB1dFtpZCo9XCJbdm9jYWJ1bGFyeV91cmldXCJdLHNlbGVjdFtpZCo9XCJbY2F0ZWdvcnlfY29kZV1cIl0sc2VsZWN0W2lkKj1cIltzZGdfdGFyZ2V0XVwiXSxzZWxlY3RbaWQqPVwiW2NvZGVdXCJdLGlucHV0W2lkKj1cIlt0ZXh0XVwiXScsIGNhc2U4ID0gJ2lucHV0W2lkKj1cIlt2b2NhYnVsYXJ5X3VyaV1cIl0sc2VsZWN0W2lkKj1cIltjYXRlZ29yeV9jb2RlXVwiXSxzZWxlY3RbaWQqPVwiW3NkZ19nb2FsXVwiXSxzZWxlY3RbaWQqPVwiW2NvZGVdXCJdLGlucHV0W2lkKj1cIlt0ZXh0XVwiXScsIGNhc2U5OF85OSA9ICdzZWxlY3RbaWQqPVwiW2NhdGVnb3J5X2NvZGVdXCJdLHNlbGVjdFtpZCo9XCJbc2RnX2dvYWxdXCJdLHNlbGVjdFtpZCo9XCJbc2RnX3RhcmdldF1cIl0sc2VsZWN0W2lkKj1cIltjb2RlXVwiXScsIGRlZmF1bHRfaGlkZSA9ICdzZWxlY3RbaWQqPVwiW2NhdGVnb3J5X2NvZGVdXCJdLHNlbGVjdFtpZCo9XCJbc2RnX2dvYWxdXCJdLHNlbGVjdFtpZCo9XCJbc2RnX3RhcmdldF1cIl0sc2VsZWN0W2lkKj1cIltjb2RlXVwiXSxpbnB1dFtpZCo9XCJbdm9jYWJ1bGFyeV91cmldXCJdJztcbiAgICAgICAgc3dpdGNoICh2YWx1ZSkge1xuICAgICAgICAgICAgY2FzZSAnMSc6XG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoY2FzZTFfc2hvdylcbiAgICAgICAgICAgICAgICAgICAgLnNob3coKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignZGlzYWJsZWQnKVxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQnKVxuICAgICAgICAgICAgICAgICAgICAuc2hvdygpO1xuICAgICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZC1ncm91cCcpXG4gICAgICAgICAgICAgICAgICAgIC5maW5kKGNhc2UxKVxuICAgICAgICAgICAgICAgICAgICAudmFsKCcnKVxuICAgICAgICAgICAgICAgICAgICAudHJpZ2dlcignY2hhbmdlJylcbiAgICAgICAgICAgICAgICAgICAgLmhpZGUoKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignZGlzYWJsZWQnLCAnZGlzYWJsZWQnKVxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQnKVxuICAgICAgICAgICAgICAgICAgICAuaGlkZSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnMic6XG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoY2FzZTJfc2hvdylcbiAgICAgICAgICAgICAgICAgICAgLnNob3coKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignZGlzYWJsZWQnKVxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQnKVxuICAgICAgICAgICAgICAgICAgICAuc2hvdygpO1xuICAgICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZC1ncm91cCcpXG4gICAgICAgICAgICAgICAgICAgIC5maW5kKGNhc2UyKVxuICAgICAgICAgICAgICAgICAgICAudmFsKCcnKVxuICAgICAgICAgICAgICAgICAgICAudHJpZ2dlcignY2hhbmdlJylcbiAgICAgICAgICAgICAgICAgICAgLmhpZGUoKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignZGlzYWJsZWQnLCAnZGlzYWJsZWQnKVxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQnKVxuICAgICAgICAgICAgICAgICAgICAuaGlkZSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnNyc6XG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoY2FzZTdfc2hvdylcbiAgICAgICAgICAgICAgICAgICAgLnNob3coKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignZGlzYWJsZWQnKVxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQnKVxuICAgICAgICAgICAgICAgICAgICAuc2hvdygpO1xuICAgICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZC1ncm91cCcpXG4gICAgICAgICAgICAgICAgICAgIC5maW5kKGNhc2U3KVxuICAgICAgICAgICAgICAgICAgICAudmFsKCcnKVxuICAgICAgICAgICAgICAgICAgICAudHJpZ2dlcignY2hhbmdlJylcbiAgICAgICAgICAgICAgICAgICAgLmhpZGUoKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignZGlzYWJsZWQnLCAnZGlzYWJsZWQnKVxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQnKVxuICAgICAgICAgICAgICAgICAgICAuaGlkZSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnOCc6XG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoY2FzZThfc2hvdylcbiAgICAgICAgICAgICAgICAgICAgLnNob3coKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignZGlzYWJsZWQnKVxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQnKVxuICAgICAgICAgICAgICAgICAgICAuc2hvdygpO1xuICAgICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZC1ncm91cCcpXG4gICAgICAgICAgICAgICAgICAgIC5maW5kKGNhc2U4KVxuICAgICAgICAgICAgICAgICAgICAudmFsKCcnKVxuICAgICAgICAgICAgICAgICAgICAudHJpZ2dlcignY2hhbmdlJylcbiAgICAgICAgICAgICAgICAgICAgLmhpZGUoKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignZGlzYWJsZWQnLCAnZGlzYWJsZWQnKVxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQnKVxuICAgICAgICAgICAgICAgICAgICAuaGlkZSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnOTgnOlxuICAgICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZC1ncm91cCcpXG4gICAgICAgICAgICAgICAgICAgIC5maW5kKGNhc2U5OF85OV9zaG93KVxuICAgICAgICAgICAgICAgICAgICAuc2hvdygpXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5zaG93KCk7XG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoY2FzZTk4Xzk5KVxuICAgICAgICAgICAgICAgICAgICAudmFsKCcnKVxuICAgICAgICAgICAgICAgICAgICAudHJpZ2dlcignY2hhbmdlJylcbiAgICAgICAgICAgICAgICAgICAgLmhpZGUoKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignZGlzYWJsZWQnLCAnZGlzYWJsZWQnKVxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQnKVxuICAgICAgICAgICAgICAgICAgICAuaGlkZSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnOTknOlxuICAgICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZC1ncm91cCcpXG4gICAgICAgICAgICAgICAgICAgIC5maW5kKGNhc2U5OF85OV9zaG93KVxuICAgICAgICAgICAgICAgICAgICAuc2hvdygpXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5zaG93KCk7XG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoY2FzZTk4Xzk5KVxuICAgICAgICAgICAgICAgICAgICAudmFsKCcnKVxuICAgICAgICAgICAgICAgICAgICAudHJpZ2dlcignY2hhbmdlJylcbiAgICAgICAgICAgICAgICAgICAgLmhpZGUoKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignZGlzYWJsZWQnLCAnZGlzYWJsZWQnKVxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQnKVxuICAgICAgICAgICAgICAgICAgICAuaGlkZSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQtZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAuZmluZChkZWZhdWx0X3Nob3cpXG4gICAgICAgICAgICAgICAgICAgIC5zaG93KClcbiAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2Rpc2FibGVkJylcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkJylcbiAgICAgICAgICAgICAgICAgICAgLnNob3coKTtcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQtZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAuZmluZChkZWZhdWx0X2hpZGUpXG4gICAgICAgICAgICAgICAgICAgIC52YWwoJycpXG4gICAgICAgICAgICAgICAgICAgIC50cmlnZ2VyKCdjaGFuZ2UnKVxuICAgICAgICAgICAgICAgICAgICAuaGlkZSgpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5oaWRlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogIFJlY2lwaWVudCBWb2NhYnVsYXJ5IEZvcm0gUGFnZVxuICAgICAqXG4gICAgICogQExvZ2ljIGhpZGUgdm9jYWJ1bGFyeS11cmkgYW5kIGNvZGVzIGZpZWxkIGJhc2VkIG9uICdAdm9jYWJ1bGFyeScgZmllbGQgdmFsdWVcbiAgICAgKi9cbiAgICByZWNpcGllbnRWb2NhYnVsYXJ5SGlkZUZpZWxkKCkge1xuICAgICAgICBjb25zdCByZWdpb25fdm9jYWJ1bGFyeSA9ICgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnc2VsZWN0W2lkKj1cInJlZ2lvbl92b2NhYnVsYXJ5XCJdJyk7XG4gICAgICAgIGlmIChyZWdpb25fdm9jYWJ1bGFyeS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBqcXVlcnlfMS5kZWZhdWx0LmVhY2gocmVnaW9uX3ZvY2FidWxhcnksIChpbmRleCwgcmVnaW9uX3ZvY2FiKSA9PiB7XG4gICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSAoX2EgPSAoMCwganF1ZXJ5XzEuZGVmYXVsdCkocmVnaW9uX3ZvY2FiKS52YWwoKSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJzEnO1xuICAgICAgICAgICAgICAgIHRoaXMuaGlkZVJlY2lwaWVudFJlZ2lvbkZpZWxkKCgwLCBqcXVlcnlfMS5kZWZhdWx0KShyZWdpb25fdm9jYWIpLCBkYXRhLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZWdpb25fdm9jYWJ1bGFyeS5vbignc2VsZWN0MjpzZWxlY3QnLCAoZSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBlLnBhcmFtcy5kYXRhLmlkO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0O1xuICAgICAgICAgICAgICAgIHRoaXMuaGlkZVJlY2lwaWVudFJlZ2lvbkZpZWxkKCgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0YXJnZXQpLCBkYXRhKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmVnaW9uX3ZvY2FidWxhcnkub24oJ3NlbGVjdDI6Y2xlYXInLCAoZSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IGUudGFyZ2V0O1xuICAgICAgICAgICAgICAgIHRoaXMuaGlkZVJlY2lwaWVudFJlZ2lvbkZpZWxkKCgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0YXJnZXQpLCAnJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBIaWRlcyBSZWNpcGllbnQgUmVnaW9uIEZvcm0gRmllbGRzXG4gICAgICovXG4gICAgaGlkZVJlY2lwaWVudFJlZ2lvbkZpZWxkKGluZGV4LCB2YWx1ZSkge1xuICAgICAgICBjb25zdCBjYXNlMV9zaG93ID0gJ3NlbGVjdFtpZCo9XCJbcmVnaW9uX2NvZGVdXCJdJywgY2FzZTJfc2hvdyA9ICdpbnB1dFtpZCo9XCJbY3VzdG9tX2NvZGVdXCJdLCBpbnB1dFtpZCo9XCJbY29kZV1cIl0nLCBjYXNlOTlfc2hvdyA9ICdpbnB1dFtpZCo9XCJbY3VzdG9tX2NvZGVdXCJdLGlucHV0W2lkKj1cIlt2b2NhYnVsYXJ5X3VyaV1cIl0sIGlucHV0W2lkKj1cIltjb2RlXVwiXScsIGNhc2UxID0gJ2lucHV0W2lkKj1cIltjdXN0b21fY29kZV1cIl0saW5wdXRbaWQqPVwiW3ZvY2FidWxhcnlfdXJpXVwiXSxpbnB1dFtpZCo9XCJbY29kZV1cIl0nLCBjYXNlMiA9ICdzZWxlY3RbaWQqPVwiW3JlZ2lvbl9jb2RlXVwiXSxpbnB1dFtpZCo9XCJbdm9jYWJ1bGFyeV91cmldXCJdJywgY2FzZTk5ID0gJ3NlbGVjdFtpZCo9XCJbcmVnaW9uX2NvZGVdXCJdJztcbiAgICAgICAgc3dpdGNoICh2YWx1ZSkge1xuICAgICAgICAgICAgY2FzZSAnMSc6XG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoY2FzZTFfc2hvdylcbiAgICAgICAgICAgICAgICAgICAgLnNob3coKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignZGlzYWJsZWQnKVxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQnKVxuICAgICAgICAgICAgICAgICAgICAuc2hvdygpO1xuICAgICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZC1ncm91cCcpXG4gICAgICAgICAgICAgICAgICAgIC5maW5kKGNhc2UxKVxuICAgICAgICAgICAgICAgICAgICAudmFsKCcnKVxuICAgICAgICAgICAgICAgICAgICAudHJpZ2dlcignY2hhbmdlJylcbiAgICAgICAgICAgICAgICAgICAgLmhpZGUoKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignZGlzYWJsZWQnLCAnZGlzYWJsZWQnKVxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQnKVxuICAgICAgICAgICAgICAgICAgICAuaGlkZSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnMic6XG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoY2FzZTJfc2hvdylcbiAgICAgICAgICAgICAgICAgICAgLnNob3coKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignZGlzYWJsZWQnKVxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQnKVxuICAgICAgICAgICAgICAgICAgICAuc2hvdygpO1xuICAgICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZC1ncm91cCcpXG4gICAgICAgICAgICAgICAgICAgIC5maW5kKGNhc2UyKVxuICAgICAgICAgICAgICAgICAgICAudmFsKCcnKVxuICAgICAgICAgICAgICAgICAgICAudHJpZ2dlcignY2hhbmdlJylcbiAgICAgICAgICAgICAgICAgICAgLmhpZGUoKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignZGlzYWJsZWQnLCAnZGlzYWJsZWQnKVxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQnKVxuICAgICAgICAgICAgICAgICAgICAuaGlkZSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnOTknOlxuICAgICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZC1ncm91cCcpXG4gICAgICAgICAgICAgICAgICAgIC5maW5kKGNhc2U5OV9zaG93KVxuICAgICAgICAgICAgICAgICAgICAuc2hvdygpXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5zaG93KCk7XG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoY2FzZTk5KVxuICAgICAgICAgICAgICAgICAgICAudmFsKCcnKVxuICAgICAgICAgICAgICAgICAgICAudHJpZ2dlcignY2hhbmdlJylcbiAgICAgICAgICAgICAgICAgICAgLmhpZGUoKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignZGlzYWJsZWQnLCAnZGlzYWJsZWQnKVxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQnKVxuICAgICAgICAgICAgICAgICAgICAuaGlkZSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQtZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAuZmluZChjYXNlMl9zaG93KVxuICAgICAgICAgICAgICAgICAgICAuc2hvdygpXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5zaG93KCk7XG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoY2FzZTIpXG4gICAgICAgICAgICAgICAgICAgIC52YWwoJycpXG4gICAgICAgICAgICAgICAgICAgIC50cmlnZ2VyKCdjaGFuZ2UnKVxuICAgICAgICAgICAgICAgICAgICAuaGlkZSgpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5oaWRlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogVXBkYXRlcyBBY3Rpdml0eSBpZGVudGlmaWVyXG4gICAgICovXG4gICAgdXBkYXRlQWN0aXZpdHlJZGVudGlmaWVyKCkge1xuICAgICAgICBjb25zdCBhY3Rpdml0eV9pZGVudGlmaWVyID0gKDAsIGpxdWVyeV8xLmRlZmF1bHQpKCcjYWN0aXZpdHlfaWRlbnRpZmllcicpO1xuICAgICAgICBpZiAoYWN0aXZpdHlfaWRlbnRpZmllci5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBhY3Rpdml0eV9pZGVudGlmaWVyLm9uKCdrZXl1cCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoJyNpYXRpX2lkZW50aWZpZXJfdGV4dCcpLnZhbCgoMCwganF1ZXJ5XzEuZGVmYXVsdCkoJy5pZGVudGlmaWVyJykuYXR0cignYWN0aXZpdHlfaWRlbnRpZmllcicpICsgYC0keygwLCBqcXVlcnlfMS5kZWZhdWx0KSh0aGlzKS52YWwoKX1gKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRhZyBGb3JtIFBhZ2VcbiAgICAgKlxuICAgICAqIEBMb2dpYyBoaWRlIHZvY2FidWxhcnktdXJpIGFuZCBjb2RlcyBmaWVsZCBiYXNlZCBvbiAnQHZvY2FidWxhcnknIGZpZWxkIHZhbHVlXG4gICAgICovXG4gICAgdGFnVm9jYWJ1bGFyeUhpZGVGaWVsZCgpIHtcbiAgICAgICAgY29uc3QgdGFnX3ZvY2FidWxhcnkgPSAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoJ3NlbGVjdFtpZCo9XCJ0YWdfdm9jYWJ1bGFyeVwiXScpO1xuICAgICAgICBpZiAodGFnX3ZvY2FidWxhcnkubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAganF1ZXJ5XzEuZGVmYXVsdC5lYWNoKHRhZ192b2NhYnVsYXJ5LCAoaW5kZXgsIHRhZykgPT4ge1xuICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gKF9hID0gKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRhZykudmFsKCkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICcxJztcbiAgICAgICAgICAgICAgICB0aGlzLmhpZGVUYWdGaWVsZCgoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGFnKSwgZGF0YS50b1N0cmluZygpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGFnX3ZvY2FidWxhcnkub24oJ3NlbGVjdDI6c2VsZWN0JywgKGUpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gZS5wYXJhbXMuZGF0YS5pZDtcbiAgICAgICAgICAgICAgICBjb25zdCB0YXJnZXQgPSBlLnRhcmdldDtcbiAgICAgICAgICAgICAgICB0aGlzLmhpZGVUYWdGaWVsZCgoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGFyZ2V0KSwgZGF0YSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRhZ192b2NhYnVsYXJ5Lm9uKCdzZWxlY3QyOmNsZWFyJywgKGUpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB0YXJnZXQgPSBlLnRhcmdldDtcbiAgICAgICAgICAgICAgICB0aGlzLmhpZGVUYWdGaWVsZCgoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGFyZ2V0KSwgJycpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogSGlkZSBUYWcgRm9ybSBmaWVsZHNcbiAgICAgKi9cbiAgICBoaWRlVGFnRmllbGQoaW5kZXgsIHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGNhc2UxX3Nob3cgPSAnaW5wdXRbaWQqPVwiW3RhZ190ZXh0XVwiXScsIGNhc2UyX3Nob3cgPSAnc2VsZWN0W2lkKj1cIltnb2Fsc190YWdfY29kZV1cIl0nLCBjYXNlM19zaG93ID0gJ3NlbGVjdFtpZCo9XCJbdGFyZ2V0c190YWdfY29kZV1cIl0nLCBjYXNlOTlfc2hvdyA9ICdpbnB1dFtpZCo9XCJbdGFnX3RleHRdXCJdLCBpbnB1dFtpZCo9XCJbdm9jYWJ1bGFyeV91cmldXCJdJywgY2FzZTEgPSAnc2VsZWN0W2lkKj1cIltnb2Fsc190YWdfY29kZV1cIl0sc2VsZWN0W2lkKj1cIlt0YXJnZXRzX3RhZ19jb2RlXVwiXSxpbnB1dFtpZCo9XCJbdm9jYWJ1bGFyeV91cmldXCJdJywgY2FzZTIgPSAnaW5wdXRbaWQqPVwiW3ZvY2FidWxhcnlfdXJpXVwiXSxzZWxlY3RbaWQqPVwiW3RhcmdldHNfdGFnX2NvZGVdXCJdLHNlbGVjdFtpZCo9XCJbdGFyZ2V0c190YWdfY29kZV1cIl0saW5wdXRbaWQqPVwiW3RhZ190ZXh0XVwiXScsIGNhc2UzID0gJ2lucHV0W2lkKj1cIlt2b2NhYnVsYXJ5X3VyaV1cIl0sc2VsZWN0W2lkKj1cIltnb2Fsc190YWdfY29kZV1cIl0saW5wdXRbaWQqPVwiW3RhZ190ZXh0XVwiXScsIGNhc2U5OSA9ICdzZWxlY3RbaWQqPVwiW2dvYWxzX3RhZ19jb2RlXVwiXSxzZWxlY3RbaWQqPVwiW3RhcmdldHNfdGFnX2NvZGVdXCJdJztcbiAgICAgICAgc3dpdGNoICh2YWx1ZSkge1xuICAgICAgICAgICAgY2FzZSAnMSc6XG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoY2FzZTFfc2hvdylcbiAgICAgICAgICAgICAgICAgICAgLnNob3coKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignZGlzYWJsZWQnKVxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQnKVxuICAgICAgICAgICAgICAgICAgICAuc2hvdygpO1xuICAgICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZC1ncm91cCcpXG4gICAgICAgICAgICAgICAgICAgIC5maW5kKGNhc2UxKVxuICAgICAgICAgICAgICAgICAgICAudmFsKCcnKVxuICAgICAgICAgICAgICAgICAgICAudHJpZ2dlcignY2hhbmdlJylcbiAgICAgICAgICAgICAgICAgICAgLmhpZGUoKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignZGlzYWJsZWQnLCAnZGlzYWJsZWQnKVxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQnKVxuICAgICAgICAgICAgICAgICAgICAuaGlkZSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnMic6XG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoY2FzZTJfc2hvdylcbiAgICAgICAgICAgICAgICAgICAgLnNob3coKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignZGlzYWJsZWQnKVxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQnKVxuICAgICAgICAgICAgICAgICAgICAuc2hvdygpO1xuICAgICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZC1ncm91cCcpXG4gICAgICAgICAgICAgICAgICAgIC5maW5kKGNhc2UyKVxuICAgICAgICAgICAgICAgICAgICAudmFsKCcnKVxuICAgICAgICAgICAgICAgICAgICAudHJpZ2dlcignY2hhbmdlJylcbiAgICAgICAgICAgICAgICAgICAgLmhpZGUoKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignZGlzYWJsZWQnLCAnZGlzYWJsZWQnKVxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQnKVxuICAgICAgICAgICAgICAgICAgICAuaGlkZSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnMyc6XG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoY2FzZTNfc2hvdylcbiAgICAgICAgICAgICAgICAgICAgLnNob3coKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignZGlzYWJsZWQnKVxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQnKVxuICAgICAgICAgICAgICAgICAgICAuc2hvdygpO1xuICAgICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZC1ncm91cCcpXG4gICAgICAgICAgICAgICAgICAgIC5maW5kKGNhc2UzKVxuICAgICAgICAgICAgICAgICAgICAudmFsKCcnKVxuICAgICAgICAgICAgICAgICAgICAudHJpZ2dlcignY2hhbmdlJylcbiAgICAgICAgICAgICAgICAgICAgLmhpZGUoKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignZGlzYWJsZWQnLCAnZGlzYWJsZWQnKVxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQnKVxuICAgICAgICAgICAgICAgICAgICAuaGlkZSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnOTknOlxuICAgICAgICAgICAgICAgIGluZGV4XG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZC1ncm91cCcpXG4gICAgICAgICAgICAgICAgICAgIC5maW5kKGNhc2U5OV9zaG93KVxuICAgICAgICAgICAgICAgICAgICAuc2hvdygpXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5zaG93KCk7XG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoY2FzZTk5KVxuICAgICAgICAgICAgICAgICAgICAudmFsKCcnKVxuICAgICAgICAgICAgICAgICAgICAudHJpZ2dlcignY2hhbmdlJylcbiAgICAgICAgICAgICAgICAgICAgLmhpZGUoKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignZGlzYWJsZWQnLCAnZGlzYWJsZWQnKVxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQnKVxuICAgICAgICAgICAgICAgICAgICAuaGlkZSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBpbmRleFxuICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQtZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAuZmluZChjYXNlMV9zaG93KVxuICAgICAgICAgICAgICAgICAgICAuc2hvdygpXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5zaG93KCk7XG4gICAgICAgICAgICAgICAgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgLmZpbmQoY2FzZTEpXG4gICAgICAgICAgICAgICAgICAgIC52YWwoJycpXG4gICAgICAgICAgICAgICAgICAgIC50cmlnZ2VyKCdjaGFuZ2UnKVxuICAgICAgICAgICAgICAgICAgICAuaGlkZSgpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdkaXNhYmxlZCcsICdkaXNhYmxlZCcpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgIC5oaWRlKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkR5bmFtaWNGaWVsZCA9IER5bmFtaWNGaWVsZDtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgYXhpb3NfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiYXhpb3NcIikpO1xuY29uc3QganF1ZXJ5XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImpxdWVyeVwiKSk7XG5yZXF1aXJlKFwic2VsZWN0MlwiKTtcbmNvbnN0IER5bmFtaWNGaWVsZF8xID0gcmVxdWlyZShcIi4vRHluYW1pY0ZpZWxkXCIpO1xuY29uc3QgZHluYW1pY0ZpZWxkID0gbmV3IER5bmFtaWNGaWVsZF8xLkR5bmFtaWNGaWVsZCgpO1xuY2xhc3MgRm9ybUJ1aWxkZXIge1xuICAgIC8vIGFkZHMgbmV3IGNvbGxlY3Rpb24gb2Ygc3ViLWVsZW1lbnRcbiAgICBhZGRGb3JtKGV2KSB7XG4gICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGV2LnRhcmdldDtcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRhcmdldCkuYXR0cignZm9ybV90eXBlJylcbiAgICAgICAgICAgID8gKDAsIGpxdWVyeV8xLmRlZmF1bHQpKGAuY29sbGVjdGlvbi1jb250YWluZXJbZm9ybV90eXBlID0nJHsoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGFyZ2V0KS5hdHRyKCdmb3JtX3R5cGUnKX0nXWApXG4gICAgICAgICAgICA6ICgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnLmNvbGxlY3Rpb24tY29udGFpbmVyJyk7XG4gICAgICAgIGNvbnN0IGNvdW50ID0gKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRhcmdldCkuYXR0cignY2hpbGRfY291bnQnKVxuICAgICAgICAgICAgPyBwYXJzZUludCgoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGFyZ2V0KS5hdHRyKCdjaGlsZF9jb3VudCcpKSArIDFcbiAgICAgICAgICAgIDogKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRhcmdldCkucGFyZW50KCkuZmluZCgnLmZvcm0tY2hpbGQtYm9keScpLmxlbmd0aDtcbiAgICAgICAgY29uc3QgcGFyZW50X2NvdW50ID0gKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRhcmdldCkuYXR0cigncGFyZW50X2NvdW50JylcbiAgICAgICAgICAgID8gcGFyc2VJbnQoKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRhcmdldCkuYXR0cigncGFyZW50X2NvdW50JykpXG4gICAgICAgICAgICA6ICgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0YXJnZXQpLnBhcmVudHMoJy5tdWx0aS1mb3JtJykuaW5kZXgoKSAtIDE7XG4gICAgICAgIGNvbnN0IHdyYXBwZXJfcGFyZW50X2NvdW50ID0gKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRhcmdldCkuYXR0cignd3JhcHBlZF9wYXJlbnRfY291bnQnKVxuICAgICAgICAgICAgPyBwYXJzZUludCgoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGFyZ2V0KS5hdHRyKCd3cmFwcGVkX3BhcmVudF9jb3VudCcpKVxuICAgICAgICAgICAgOiAoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGFyZ2V0KS5wYXJlbnRzKCcud3JhcHBlZC1jaGlsZC1ib2R5JykuaW5kZXgoKSAtIDE7XG4gICAgICAgIGxldCBwcm90byA9IGNvbnRhaW5lclxuICAgICAgICAgICAgLmRhdGEoJ3Byb3RvdHlwZScpXG4gICAgICAgICAgICAucmVwbGFjZSgvX19QQVJFTlRfTkFNRV9fL2csIHBhcmVudF9jb3VudCk7XG4gICAgICAgIGlmICgoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGFyZ2V0KS5hdHRyKCdoYXNfY2hpbGRfY29sbGVjdGlvbicpKSB7XG4gICAgICAgICAgICBwcm90byA9IHByb3RvLnJlcGxhY2UoL19fV1JBUFBFUl9OQU1FX18vZywgY291bnQpO1xuICAgICAgICAgICAgcHJvdG8gPSBwcm90by5yZXBsYWNlKC9fX05BTUVfXy9nLCAwKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHByb3RvID0gcHJvdG8ucmVwbGFjZSgvX19OQU1FX18vZywgY291bnQpO1xuICAgICAgICAgICAgcHJvdG8gPSBwcm90by5yZXBsYWNlKC9fX1dSQVBQRVJfTkFNRV9fL2csIHdyYXBwZXJfcGFyZW50X2NvdW50KTtcbiAgICAgICAgfVxuICAgICAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGFyZ2V0KS5wcmV2KCkuYXBwZW5kKCgwLCBqcXVlcnlfMS5kZWZhdWx0KShwcm90bykpO1xuICAgICAgICBpZiAoKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRhcmdldCkuYXR0cignaGFzX2NoaWxkX2NvbGxlY3Rpb24nKSkge1xuICAgICAgICAgICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRhcmdldClcbiAgICAgICAgICAgICAgICAucHJldignLnN1YmVsZW1lbnQnKVxuICAgICAgICAgICAgICAgIC5jaGlsZHJlbignLndyYXBwZWQtY2hpbGQtYm9keScpXG4gICAgICAgICAgICAgICAgLmxhc3QoKVxuICAgICAgICAgICAgICAgIC5maW5kKCcuYWRkX3RvX2NvbGxlY3Rpb24nKVxuICAgICAgICAgICAgICAgIC5hdHRyKCd3cmFwcGVkX3BhcmVudF9jb3VudCcsIGNvdW50KTtcbiAgICAgICAgICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0YXJnZXQpXG4gICAgICAgICAgICAgICAgLnByZXYoJy5zdWJlbGVtZW50JylcbiAgICAgICAgICAgICAgICAuY2hpbGRyZW4oJy53cmFwcGVkLWNoaWxkLWJvZHknKVxuICAgICAgICAgICAgICAgIC5sYXN0KClcbiAgICAgICAgICAgICAgICAuZmluZCgnLmFkZF90b19jb2xsZWN0aW9uJylcbiAgICAgICAgICAgICAgICAuYXR0cigncGFyZW50X2NvdW50JywgcGFyZW50X2NvdW50KTtcbiAgICAgICAgfVxuICAgICAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGFyZ2V0KVxuICAgICAgICAgICAgLnByZXYoKVxuICAgICAgICAgICAgLmZpbmQoJy53cmFwcGVkLWNoaWxkLWJvZHknKVxuICAgICAgICAgICAgLmxhc3QoKVxuICAgICAgICAgICAgLmZpbmQoJy5hZGRfdG9fY29sbGVjdGlvbicpXG4gICAgICAgICAgICAuYXR0cignd3JhcHBlcl9wYXJlbnRfY291bnQnLCB3cmFwcGVyX3BhcmVudF9jb3VudCAhPT0gbnVsbCAmJiB3cmFwcGVyX3BhcmVudF9jb3VudCAhPT0gdm9pZCAwID8gd3JhcHBlcl9wYXJlbnRfY291bnQgOiAwKTtcbiAgICAgICAgaWYgKCgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0YXJnZXQpLmF0dHIoJ2Zvcm1fdHlwZScpKSB7XG4gICAgICAgICAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGFyZ2V0KS5wcmV2KCkubGFzdCgpLmZpbmQoJy5zZWxlY3QyJykuc2VsZWN0Mih7XG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICdTZWxlY3QgYW4gb3B0aW9uJyxcbiAgICAgICAgICAgICAgICBhbGxvd0NsZWFyOiB0cnVlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGhpcylcbiAgICAgICAgICAgICAgICAuZmluZCgnLnN1Yi1hdHRyaWJ1dGUnKVxuICAgICAgICAgICAgICAgIC53cmFwQWxsKCgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnPGRpdiBjbGFzcz1cImZvcm0tZmllbGQtZ3JvdXAgZmxleCBmbGV4LXdyYXAgc3ViLWF0dHJpYnV0ZS13cmFwcGVyXCI+PC9kaXY+JykpO1xuICAgICAgICAgICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRhcmdldClcbiAgICAgICAgICAgICAgICAucHJldignLnN1YmVsZW1lbnQnKVxuICAgICAgICAgICAgICAgIC5jaGlsZHJlbignLndyYXBwZWQtY2hpbGQtYm9keScpXG4gICAgICAgICAgICAgICAgLmxhc3QoKVxuICAgICAgICAgICAgICAgIC5maW5kKCcuc3ViLWF0dHJpYnV0ZScpXG4gICAgICAgICAgICAgICAgLndyYXBBbGwoKDAsIGpxdWVyeV8xLmRlZmF1bHQpKCc8ZGl2IGNsYXNzPVwiZm9ybS1maWVsZC1ncm91cCBmbGV4IGZsZXgtd3JhcCBzdWItYXR0cmlidXRlLXdyYXBwZXIgbXQtNlwiPjwvZGl2PicpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0YXJnZXQpXG4gICAgICAgICAgICAgICAgLnBhcmVudCgpXG4gICAgICAgICAgICAgICAgLmZpbmQoJy5mb3JtLWNoaWxkLWJvZHknKVxuICAgICAgICAgICAgICAgIC5sYXN0KClcbiAgICAgICAgICAgICAgICAuZmluZCgnLnNlbGVjdDInKVxuICAgICAgICAgICAgICAgIC5zZWxlY3QyKHtcbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJ1NlbGVjdCBhbiBvcHRpb24nLFxuICAgICAgICAgICAgICAgIGFsbG93Q2xlYXI6IHRydWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGFyZ2V0KS5hdHRyKCdjaGlsZF9jb3VudCcsIGNvdW50KTtcbiAgICAgICAgZHluYW1pY0ZpZWxkLmFpZFR5cGVWb2NhYnVsYXJ5SGlkZUZpZWxkKCk7XG4gICAgICAgIGR5bmFtaWNGaWVsZC5zZWN0b3JWb2NhYnVsYXJ5SGlkZUZpZWxkKCk7XG4gICAgfVxuICAgIC8vIGFkZHMgcGFyZW50IGNvbGxlY3Rpb25cbiAgICBhZGRQYXJlbnRGb3JtKGV2KSB7XG4gICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGV2LnRhcmdldDtcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRhcmdldCkuYXR0cignZm9ybV90eXBlJylcbiAgICAgICAgICAgID8gKDAsIGpxdWVyeV8xLmRlZmF1bHQpKGAucGFyZW50LWNvbGxlY3Rpb25bZm9ybV90eXBlID0nJHsoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGFyZ2V0KS5hdHRyKCdmb3JtX3R5cGUnKX0nXWApXG4gICAgICAgICAgICA6ICgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnLnBhcmVudC1jb2xsZWN0aW9uJyk7XG4gICAgICAgIGNvbnN0IGNvdW50ID0gKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRhcmdldCkuYXR0cigncGFyZW50X2NvdW50JylcbiAgICAgICAgICAgID8gcGFyc2VJbnQoKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRhcmdldCkuYXR0cigncGFyZW50X2NvdW50JykpICsgMVxuICAgICAgICAgICAgOiAoKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRhcmdldCkucHJldigpLmZpbmQoJy5tdWx0aS1mb3JtJykubGVuZ3RoXG4gICAgICAgICAgICAgICAgPyAoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGFyZ2V0KS5wcmV2KCkuZmluZCgnLm11bHRpLWZvcm0nKS5sZW5ndGhcbiAgICAgICAgICAgICAgICA6ICgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0YXJnZXQpLnByZXYoKS5maW5kKCcud3JhcHBlZC1jaGlsZC1ib2R5JykubGVuZ3RoKSArIDE7XG4gICAgICAgIGxldCBwcm90byA9IGNvbnRhaW5lci5kYXRhKCdwcm90b3R5cGUnKS5yZXBsYWNlKC9fX1BBUkVOVF9OQU1FX18vZywgY291bnQpO1xuICAgICAgICBwcm90byA9IHByb3RvLnJlcGxhY2UoL19fTkFNRV9fL2csIDApO1xuICAgICAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGFyZ2V0KS5wcmV2KCkuYXBwZW5kKCgwLCBqcXVlcnlfMS5kZWZhdWx0KShwcm90bykpO1xuICAgICAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGFyZ2V0KS5wcmV2KCkuZmluZCgnLm11bHRpLWZvcm0nKS5sYXN0KCkuZmluZCgnLnNlbGVjdDInKS5zZWxlY3QyKHtcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAnU2VsZWN0IGFuIG9wdGlvbicsXG4gICAgICAgICAgICBhbGxvd0NsZWFyOiB0cnVlLFxuICAgICAgICB9KTtcbiAgICAgICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRhcmdldClcbiAgICAgICAgICAgIC5wcmV2KClcbiAgICAgICAgICAgIC5maW5kKCcubXVsdGktZm9ybScpXG4gICAgICAgICAgICAubGFzdCgpXG4gICAgICAgICAgICAuZmluZCgnLmFkZF90b19jb2xsZWN0aW9uJylcbiAgICAgICAgICAgIC5hdHRyKCdwYXJlbnRfY291bnQnLCBjb3VudCk7XG4gICAgICAgIHRoaXMuYWRkV3JhcHBlck9uQWRkKHRhcmdldCk7XG4gICAgICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0YXJnZXQpLmF0dHIoJ3BhcmVudF9jb3VudCcsIGNvdW50KTtcbiAgICAgICAgZHluYW1pY0ZpZWxkLmh1bWFuaXRhcmlhblNjb3BlSGlkZVZvY2FidWxhcnlVcmkoKTtcbiAgICAgICAgZHluYW1pY0ZpZWxkLmNvdW50cnlCdWRnZXRIaWRlQ29kZUZpZWxkKCk7XG4gICAgICAgIGR5bmFtaWNGaWVsZC5zZWN0b3JWb2NhYnVsYXJ5SGlkZUZpZWxkKCk7XG4gICAgICAgIGR5bmFtaWNGaWVsZC5yZWNpcGllbnRWb2NhYnVsYXJ5SGlkZUZpZWxkKCk7XG4gICAgICAgIGR5bmFtaWNGaWVsZC5wb2xpY3lWb2NhYnVsYXJ5SGlkZUZpZWxkKCk7XG4gICAgICAgIGR5bmFtaWNGaWVsZC50YWdWb2NhYnVsYXJ5SGlkZUZpZWxkKCk7XG4gICAgICAgIGR5bmFtaWNGaWVsZC50cmFuc2FjdGlvbkFpZFR5cGVWb2NhYnVsYXJ5SGlkZUZpZWxkKCk7XG4gICAgICAgIGR5bmFtaWNGaWVsZC5pbmRpY2F0b3JSZWZlcmVuY2VIaWRlRmllbGRVcmkoKTtcbiAgICB9XG4gICAgLy8gZGVsZXRlcyBjb2xsZWN0aW9uXG4gICAgZGVsZXRlRm9ybShldikge1xuICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBjb25zdCB0YXJnZXQgPSBldi50YXJnZXQ7XG4gICAgICAgIGNvbnN0IGNvbGxlY3Rpb25MZW5ndGggPSAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoJy5tdWx0aS1mb3JtJykubGVuZ3RoXG4gICAgICAgICAgICA/ICgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0YXJnZXQpLmNsb3Nlc3QoJy5zdWJlbGVtZW50JykuZmluZCgnLmZvcm0tY2hpbGQtYm9keScpLmxlbmd0aFxuICAgICAgICAgICAgOiAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoJy5mb3JtLWNoaWxkLWJvZHknKS5sZW5ndGg7XG4gICAgICAgIGNvbnN0IGNvdW50ID0gKDAsIGpxdWVyeV8xLmRlZmF1bHQpKCcuYWRkX3RvX2NvbGxlY3Rpb24nKS5hdHRyKCdjaGlsZF9jb3VudCcpXG4gICAgICAgICAgICA/IHBhcnNlSW50KCgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnLmFkZF90b19jb2xsZWN0aW9uJykuYXR0cignY2hpbGRfY291bnQnKSkgKyAxXG4gICAgICAgICAgICA6IGNvbGxlY3Rpb25MZW5ndGg7XG4gICAgICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnLmFkZF90b19jb2xsZWN0aW9uJykuYXR0cignY2hpbGRfY291bnQnLCBjb3VudCk7XG4gICAgICAgIGlmIChjb2xsZWN0aW9uTGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgY29uc3QgdGcgPSAoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGFyZ2V0KS5jbG9zZXN0KCcuZm9ybS1jaGlsZC1ib2R5Jyk7XG4gICAgICAgICAgICB0Zy5uZXh0KCcuZXJyb3InKS5yZW1vdmUoKTtcbiAgICAgICAgICAgIHRnLnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIGRlbGV0ZXMgcGFyZW50IGNvbGxlY3Rpb25cbiAgICBkZWxldGVQYXJlbnRGb3JtKGV2KSB7XG4gICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGV2LnRhcmdldDtcbiAgICAgICAgY29uc3QgY29sbGVjdGlvbkxlbmd0aCA9ICgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnLnN1YmVsZW1lbnQnKS5sZW5ndGg7XG4gICAgICAgIGNvbnN0IGNvdW50ID0gKDAsIGpxdWVyeV8xLmRlZmF1bHQpKCcuYWRkX3RvX3BhcmVudCcpLmF0dHIoJ2NoaWxkX2NvdW50JylcbiAgICAgICAgICAgID8gcGFyc2VJbnQoKDAsIGpxdWVyeV8xLmRlZmF1bHQpKCcuYWRkX3RvX3BhcmVudCcpLmF0dHIoJ2NoaWxkX2NvdW50JykpICsgMVxuICAgICAgICAgICAgOiBjb2xsZWN0aW9uTGVuZ3RoO1xuICAgICAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoJy5hZGRfdG9fcGFyZW50JykuYXR0cignY2hpbGRfY291bnQnLCBjb3VudCk7XG4gICAgICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnLmFkZF90b19wYXJlbnQnKS5hdHRyKCdwYXJlbnRfY291bnQnLCBjb3VudCk7XG4gICAgICAgIGlmIChjb2xsZWN0aW9uTGVuZ3RoID4gMikge1xuICAgICAgICAgICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRhcmdldCkucGFyZW50KCkucmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy9hZGQgd3JhcHBlciBkaXYgYXJvdW5kIHRoZSBhdHRyaWJ1dGVzXG4gICAgYWRkV3JhcHBlcigpIHtcbiAgICAgICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKCcubXVsdGktZm9ybScpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRoaXMpXG4gICAgICAgICAgICAgICAgLmZpbmQoJy5hdHRyaWJ1dGUnKVxuICAgICAgICAgICAgICAgIC53cmFwQWxsKCgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnPGRpdiBjbGFzcz1cImZvcm0tZmllbGQtZ3JvdXAgZmxleCBmbGV4LXdyYXAgYXR0cmlidXRlLXdyYXBwZXIgbWItNFwiPjwvZGl2PicpKTtcbiAgICAgICAgfSk7XG4gICAgICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnLnN1YmVsZW1lbnQnKVxuICAgICAgICAgICAgLmZpbmQoJy53cmFwcGVkLWNoaWxkLWJvZHknKVxuICAgICAgICAgICAgLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRoaXMpXG4gICAgICAgICAgICAgICAgLmZpbmQoJy5zdWItYXR0cmlidXRlJylcbiAgICAgICAgICAgICAgICAud3JhcEFsbCgoMCwganF1ZXJ5XzEuZGVmYXVsdCkoJzxkaXYgY2xhc3M9XCJmb3JtLWZpZWxkLWdyb3VwIGZsZXggZmxleC13cmFwIHN1Yi1hdHRyaWJ1dGUtd3JhcHBlciBtYi00XCI+PC9kaXY+JykpO1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgZm9ybUZpZWxkID0gKDAsIGpxdWVyeV8xLmRlZmF1bHQpKCdmb3JtPi5mb3JtLWZpZWxkJyk7XG4gICAgICAgIGlmIChmb3JtRmllbGQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZm9ybUZpZWxkLndyYXBBbGwoJzxkaXYgY2xhc3M9XCJmb3JtLWZpZWxkLWdyb3VwLW91dGVyIGdyaWQgeGw6Z3JpZC1jb2xzLTIgbWItNiAtbXgtMyBnYXAteS02XCI+PC9kaXY+Jyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYWRkV3JhcHBlck9uQWRkKHRhcmdldCkge1xuICAgICAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGFyZ2V0KVxuICAgICAgICAgICAgLnByZXYoKVxuICAgICAgICAgICAgLmZpbmQoJy5tdWx0aS1mb3JtJylcbiAgICAgICAgICAgIC5sYXN0KClcbiAgICAgICAgICAgIC5maW5kKCcuYXR0cmlidXRlJylcbiAgICAgICAgICAgIC53cmFwQWxsKCgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnPGRpdiBjbGFzcz1cImZvcm0tZmllbGQtZ3JvdXAgZ3JpZCB4bDpncmlkLWNvbHMtMiBhdHRyaWJ1dGUtd3JhcHBlciBtYi00XCI+PC9kaXY+JykpO1xuICAgICAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGFyZ2V0KVxuICAgICAgICAgICAgLnByZXYoKVxuICAgICAgICAgICAgLmZpbmQoJy5tdWx0aS1mb3JtJylcbiAgICAgICAgICAgIC5sYXN0KClcbiAgICAgICAgICAgIC5maW5kKCcuc3ViZWxlbWVudCcpXG4gICAgICAgICAgICAuZmluZCgnLndyYXBwZWQtY2hpbGQtYm9keScpXG4gICAgICAgICAgICAuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGhpcylcbiAgICAgICAgICAgICAgICAuZmluZCgnLnN1Yi1hdHRyaWJ1dGUnKVxuICAgICAgICAgICAgICAgIC53cmFwQWxsKCgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnPGRpdiBjbGFzcz1cImZvcm0tZmllbGQtZ3JvdXAgZmxleCBmbGV4LXdyYXAgc3ViLWF0dHJpYnV0ZS13cmFwcGVyIG1iLTRcIj48L2Rpdj4nKSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB0ZXh0QXJlYUhlaWdodChldikge1xuICAgICAgICBjb25zdCB0YXJnZXQgPSBldi50YXJnZXQ7XG4gICAgICAgIGNvbnN0IGhlaWdodCA9IHRhcmdldC5zY3JvbGxIZWlnaHQ7XG4gICAgICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0YXJnZXQpLmNzcygnaGVpZ2h0JywgaGVpZ2h0KTtcbiAgICB9XG4gICAgYWRkVG9Db2xsZWN0aW9uKCkge1xuICAgICAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoJ2JvZHknKS5vbignY2xpY2snLCAnLmFkZF90b19jb2xsZWN0aW9uJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAoKDAsIGpxdWVyeV8xLmRlZmF1bHQpKGV2ZW50LnRhcmdldCkuaGFzQ2xhc3MoJ2FkZC1pY29uJykpIHtcbiAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoZXZlbnQudGFyZ2V0KVxuICAgICAgICAgICAgICAgICAgICAucGFyZW50KCdidXR0b24nKVxuICAgICAgICAgICAgICAgICAgICAudHJpZ2dlcignY2xpY2snKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkRm9ybShldmVudCk7XG4gICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVEZWxldGVQYXJlbnRCdXR0b25zKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoJy5hZGRfdG9fcGFyZW50Jykub24oJ2NsaWNrJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAoKDAsIGpxdWVyeV8xLmRlZmF1bHQpKGV2ZW50LnRhcmdldCkuaGFzQ2xhc3MoJ2FkZC1pY29uJykpIHtcbiAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoZXZlbnQudGFyZ2V0KVxuICAgICAgICAgICAgICAgICAgICAucGFyZW50KCdidXR0b24nKVxuICAgICAgICAgICAgICAgICAgICAudHJpZ2dlcignY2xpY2snKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkUGFyZW50Rm9ybShldmVudCk7XG4gICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVEZWxldGVQYXJlbnRCdXR0b25zKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBkZWxldGVDb2xsZWN0aW9uKCkge1xuICAgICAgICBjb25zdCBkZWxldGVDb25maXJtYXRpb24gPSAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoJy5kZWxldGUtY29uZmlybWF0aW9uJyksIGNhbmNlbFBvcHVwID0gJy5jYW5jZWwtcG9wdXAnLCBkZWxldGVDb25maXJtID0gJy5kZWxldGUtY29uZmlybSc7XG4gICAgICAgIGxldCBkZWxldGVJbmRleCA9IHt9LCBjaGlsZE9yUGFyZW50ID0gJyc7XG4gICAgICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnYm9keScpLm9uKCdjbGljaycsICcuZGVsZXRlJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBkZWxldGVDb25maXJtYXRpb24uZmFkZUluKCk7XG4gICAgICAgICAgICBkZWxldGVJbmRleCA9IGV2ZW50O1xuICAgICAgICAgICAgY2hpbGRPclBhcmVudCA9ICdjaGlsZCc7XG4gICAgICAgIH0pO1xuICAgICAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoJ2JvZHknKS5vbignY2xpY2snLCBjYW5jZWxQb3B1cCwgKCkgPT4ge1xuICAgICAgICAgICAgZGVsZXRlQ29uZmlybWF0aW9uLmZhZGVPdXQoKTtcbiAgICAgICAgICAgIGRlbGV0ZUluZGV4ID0ge307XG4gICAgICAgICAgICBjaGlsZE9yUGFyZW50ID0gJyc7XG4gICAgICAgIH0pO1xuICAgICAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoJ2JvZHknKS5vbignY2xpY2snLCBkZWxldGVDb25maXJtLCAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoY2hpbGRPclBhcmVudCA9PT0gJ2NoaWxkJykge1xuICAgICAgICAgICAgICAgIHRoaXMuZGVsZXRlRm9ybShkZWxldGVJbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjaGlsZE9yUGFyZW50ID09PSAncGFyZW50Jykge1xuICAgICAgICAgICAgICAgIHRoaXMuZGVsZXRlUGFyZW50Rm9ybShkZWxldGVJbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWxldGVDb25maXJtYXRpb24uZmFkZU91dCgpO1xuICAgICAgICAgICAgZGVsZXRlSW5kZXggPSB7fTtcbiAgICAgICAgICAgIGNoaWxkT3JQYXJlbnQgPSAnJztcbiAgICAgICAgfSk7XG4gICAgICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnYm9keScpLm9uKCdtb3VzZWVudGVyJywgJy5kZWxldGUtcGFyZW50JywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10cy1jb21tZW50XG4gICAgICAgICAgICAvL0B0cy1pZ25vcmVcbiAgICAgICAgICAgIGNvbnN0IGRlbGV0ZUJ1dHRvbiA9ICgwLCBqcXVlcnlfMS5kZWZhdWx0KShldmVudC50YXJnZXQpO1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHMtY29tbWVudFxuICAgICAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICAgICAgICBjb25zdCBtdWx0aUZvcm0gPSBkZWxldGVCdXR0b24uY2xvc2VzdCgnLm11bHRpLWZvcm0sIC53cmFwcGVkLWNoaWxkLWJvZHknKTtcbiAgICAgICAgICAgIG11bHRpRm9ybS5jc3Moe1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICcjRkZGOEY3JyxcbiAgICAgICAgICAgICAgICBvdXRsaW5lOiAnMnB4IHNvbGlkICNGMTlCQTAnLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoJ2JvZHknKS5vbignbW91c2VsZWF2ZScsICcuZGVsZXRlLXBhcmVudCcsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHMtY29tbWVudFxuICAgICAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICAgICAgICBjb25zdCBkZWxldGVCdXR0b24gPSAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoZXZlbnQudGFyZ2V0KTtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXRzLWNvbW1lbnRcbiAgICAgICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICAgICAgY29uc3QgbXVsdGlGb3JtID0gZGVsZXRlQnV0dG9uLmNsb3Nlc3QoJy5tdWx0aS1mb3JtLCAud3JhcHBlZC1jaGlsZC1ib2R5Jyk7XG4gICAgICAgICAgICBtdWx0aUZvcm0uY3NzKHtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAnJyxcbiAgICAgICAgICAgICAgICBvdXRsaW5lOiAnJyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKCdib2R5Jykub24oJ2NsaWNrJywgJy5kZWxldGUtcGFyZW50JywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBkZWxldGVDb25maXJtYXRpb24uZmFkZUluKCk7XG4gICAgICAgICAgICBkZWxldGVJbmRleCA9IGV2ZW50O1xuICAgICAgICAgICAgY2hpbGRPclBhcmVudCA9ICdwYXJlbnQnO1xuICAgICAgICB9KTtcbiAgICAgICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKCcuc2VsZWN0MicpLnNlbGVjdDIoe1xuICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICdTZWxlY3QgYW4gb3B0aW9uJyxcbiAgICAgICAgICAgIGFsbG93Q2xlYXI6IHRydWUsXG4gICAgICAgIH0pO1xuICAgICAgICAvLyB1cGRhdGUgZm9ybWF0IG9uIGNoYW5nZSBvZiBkb2N1bWVudCBsaW5rXG4gICAgICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnYm9keScpLm9uKCdjaGFuZ2UnLCAnaW5wdXRbaWQqPVwiW3VybF1cIl0nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICBjb25zdCBmaWxlUGF0aCA9ICgoX2EgPSAoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGhpcykudmFsKCkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICcnKS50b1N0cmluZygpO1xuICAgICAgICAgICAgY29uc3QgZG9jdW1lbnQgPSAoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGhpcylcbiAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQtZ3JvdXAnKVxuICAgICAgICAgICAgICAgIC5maW5kKCdpbnB1dFtpZCo9XCJbZG9jdW1lbnRdXCJdJylcbiAgICAgICAgICAgICAgICAudmFsKCk7XG4gICAgICAgICAgICBjb25zdCB1cmwgPSBgL21pbWV0eXBlP3VybD0ke2ZpbGVQYXRofSZ0eXBlPXVybGA7XG4gICAgICAgICAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGhpcykuY2xvc2VzdCgnLmZvcm0tZmllbGQnKS5maW5kKCcudGV4dC1kYW5nZXInKS5yZW1vdmUoKTtcbiAgICAgICAgICAgIGlmIChmaWxlUGF0aCAhPT0gJycpIHtcbiAgICAgICAgICAgICAgICBheGlvc18xLmRlZmF1bHQuZ2V0KHVybCkudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZm9ybWF0ID0gcmVzcG9uc2UuZGF0YS5kYXRhLm1pbWV0eXBlO1xuICAgICAgICAgICAgICAgICAgICAgICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRoaXMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmluZCgnc2VsZWN0W2lkKj1cIltmb3JtYXRdXCJdJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudmFsKGZvcm1hdClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudHJpZ2dlcignY2hhbmdlJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGhpcykuY2xvc2VzdCgnLmZvcm0tZmllbGQnKS5maW5kKCcudGV4dC1kYW5nZXInKS5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0aGlzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZChcIjxkaXYgY2xhc3M9J3RleHQtZGFuZ2VyIGVycm9yJz5cIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UuZGF0YS5tZXNzYWdlICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPC9kaXY+Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGhpcylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQtZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5maW5kKCdzZWxlY3RbaWQqPVwiW2Zvcm1hdF1cIl0nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC52YWwoJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRyaWdnZXIoJ2NoYW5nZScpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0aGlzKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5maW5kKCdpbnB1dFtpZCo9XCJbZG9jdW1lbnRdXCJdJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC52YWwoJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAudHJpZ2dlcignY2hhbmdlJyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICghZG9jdW1lbnQgfHwgZG9jdW1lbnQgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRoaXMpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZC1ncm91cCcpXG4gICAgICAgICAgICAgICAgICAgIC5maW5kKCdzZWxlY3RbaWQqPVwiW2Zvcm1hdF1cIl0nKVxuICAgICAgICAgICAgICAgICAgICAudmFsKCcnKVxuICAgICAgICAgICAgICAgICAgICAudHJpZ2dlcignY2hhbmdlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoJ2JvZHknKS5vbignY2hhbmdlJywgJ2lucHV0W2lkKj1cIltkb2N1bWVudF1cIl0nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICBjb25zdCBmaWxlUGF0aCA9ICgoX2EgPSAoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGhpcykudmFsKCkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICcnKS50b1N0cmluZygpO1xuICAgICAgICAgICAgY29uc3QgdXJsID0gYC9taW1ldHlwZT91cmw9JHtmaWxlUGF0aH0mJnR5cGU9ZG9jdW1lbnRgO1xuICAgICAgICAgICAgY29uc3QgZmlsZVVybCA9ICgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0aGlzKVxuICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZC1ncm91cCcpXG4gICAgICAgICAgICAgICAgLmZpbmQoJ2lucHV0W2lkKj1cIlt1cmxdXCJdJylcbiAgICAgICAgICAgICAgICAudmFsKCk7XG4gICAgICAgICAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGhpcykuY2xvc2VzdCgnLmZvcm0tZmllbGQnKS5maW5kKCcudGV4dC1kYW5nZXInKS5yZW1vdmUoKTtcbiAgICAgICAgICAgIGlmIChmaWxlUGF0aCAhPT0gJycpIHtcbiAgICAgICAgICAgICAgICBheGlvc18xLmRlZmF1bHQuZ2V0KHVybCkudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZm9ybWF0ID0gcmVzcG9uc2UuZGF0YS5kYXRhLm1pbWV0eXBlO1xuICAgICAgICAgICAgICAgICAgICAgICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRoaXMpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNsb3Nlc3QoJy5mb3JtLWZpZWxkLWdyb3VwJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmluZCgnc2VsZWN0W2lkKj1cIltmb3JtYXRdXCJdJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudmFsKGZvcm1hdClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudHJpZ2dlcignY2hhbmdlJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGhpcylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY2xvc2VzdCgnLmZvcm0tZmllbGQtZ3JvdXAnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5maW5kKCdzZWxlY3RbaWQqPVwiW2Zvcm1hdF1cIl0nKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC52YWwoJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRyaWdnZXIoJ2NoYW5nZScpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRoaXMpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZC1ncm91cCcpXG4gICAgICAgICAgICAgICAgICAgIC5maW5kKCdpbnB1dFtpZCo9XCJbdXJsXVwiXScpXG4gICAgICAgICAgICAgICAgICAgIC52YWwoJycpXG4gICAgICAgICAgICAgICAgICAgIC50cmlnZ2VyKCdjaGFuZ2UnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKCFmaWxlVXJsIHx8IGZpbGVVcmwgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRoaXMpXG4gICAgICAgICAgICAgICAgICAgIC5jbG9zZXN0KCcuZm9ybS1maWVsZC1ncm91cCcpXG4gICAgICAgICAgICAgICAgICAgIC5maW5kKCdzZWxlY3RbaWQqPVwiW2Zvcm1hdF1cIl0nKVxuICAgICAgICAgICAgICAgICAgICAudmFsKCcnKVxuICAgICAgICAgICAgICAgICAgICAudHJpZ2dlcignY2hhbmdlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBoYW5kbGVEZWxldGVQYXJlbnRCdXR0b25zKCkge1xuICAgICAgICBjb25zdCBkZWxldGVCdXR0b25zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmRlbGV0ZS1wYXJlbnQtc2VsZWN0b3InKTtcbiAgICAgICAgY29uc3QgY2hhbmdlRGVsZXRlQnV0dG9uSW5uZXJIdG1sID0gKGJ1dHRvbikgPT4ge1xuICAgICAgICAgICAgY29uc3QgaW5pdGlhbFRleHQgPSBlc2NhcGVIdG1sKGJ1dHRvbi50ZXh0Q29udGVudCk7XG4gICAgICAgICAgICBidXR0b24uaW5uZXJIVE1MID0gYFxuICAgICAgICAgPHN2ZyBjbGFzcz1cInRleHQtWzFyZW1dIG1iLTAuNVwiIHZpZXdCb3g9XCIwIDAgMTYgMTZcIiBmaWxsPVwibm9uZVwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj5cbiAgICAgICAgICAgPHBhdGggZD1cIk02LjY2NjY3IDEyQzYuODQzNDggMTIgNy4wMTMwNSAxMS45Mjk4IDcuMTM4MDcgMTEuODA0N0M3LjI2MzEgMTEuNjc5NyA3LjMzMzMzIDExLjUxMDEgNy4zMzMzMyAxMS4zMzMzVjcuMzMzMzRDNy4zMzMzMyA3LjE1NjUzIDcuMjYzMSA2Ljk4Njk2IDcuMTM4MDcgNi44NjE5M0M3LjAxMzA1IDYuNzM2OTEgNi44NDM0OCA2LjY2NjY3IDYuNjY2NjcgNi42NjY2N0M2LjQ4OTg2IDYuNjY2NjcgNi4zMjAyOSA2LjczNjkxIDYuMTk1MjYgNi44NjE5M0M2LjA3MDI0IDYuOTg2OTYgNiA3LjE1NjUzIDYgNy4zMzMzNFYxMS4zMzMzQzYgMTEuNTEwMSA2LjA3MDI0IDExLjY3OTcgNi4xOTUyNiAxMS44MDQ3QzYuMzIwMjkgMTEuOTI5OCA2LjQ4OTg2IDEyIDYuNjY2NjcgMTJaTTEzLjMzMzMgNEgxMC42NjY3VjMuMzMzMzRDMTAuNjY2NyAyLjgwMjkgMTAuNDU2IDIuMjk0MiAxMC4wODA5IDEuOTE5MTJDOS43MDU4MSAxLjU0NDA1IDkuMTk3MSAxLjMzMzM0IDguNjY2NjcgMS4zMzMzNEg3LjMzMzMzQzYuODAyOSAxLjMzMzM0IDYuMjk0MTkgMS41NDQwNSA1LjkxOTEyIDEuOTE5MTJDNS41NDQwNSAyLjI5NDIgNS4zMzMzMyAyLjgwMjkgNS4zMzMzMyAzLjMzMzM0VjRIMi42NjY2N0MyLjQ4OTg2IDQgMi4zMjAyOSA0LjA3MDI0IDIuMTk1MjYgNC4xOTUyNkMyLjA3MDI0IDQuMzIwMjkgMiA0LjQ4OTg2IDIgNC42NjY2N0MyIDQuODQzNDggMi4wNzAyNCA1LjAxMzA1IDIuMTk1MjYgNS4xMzgwN0MyLjMyMDI5IDUuMjYzMSAyLjQ4OTg2IDUuMzMzMzQgMi42NjY2NyA1LjMzMzM0SDMuMzMzMzNWMTIuNjY2N0MzLjMzMzMzIDEzLjE5NzEgMy41NDQwNSAxMy43MDU4IDMuOTE5MTIgMTQuMDgwOUM0LjI5NDE5IDE0LjQ1NiA0LjgwMjkgMTQuNjY2NyA1LjMzMzMzIDE0LjY2NjdIMTAuNjY2N0MxMS4xOTcxIDE0LjY2NjcgMTEuNzA1OCAxNC40NTYgMTIuMDgwOSAxNC4wODA5QzEyLjQ1NiAxMy43MDU4IDEyLjY2NjcgMTMuMTk3MSAxMi42NjY3IDEyLjY2NjdWNS4zMzMzNEgxMy4zMzMzQzEzLjUxMDEgNS4zMzMzNCAxMy42Nzk3IDUuMjYzMSAxMy44MDQ3IDUuMTM4MDdDMTMuOTI5OCA1LjAxMzA1IDE0IDQuODQzNDggMTQgNC42NjY2N0MxNCA0LjQ4OTg2IDEzLjkyOTggNC4zMjAyOSAxMy44MDQ3IDQuMTk1MjZDMTMuNjc5NyA0LjA3MDI0IDEzLjUxMDEgNCAxMy4zMzMzIDRaTTYuNjY2NjcgMy4zMzMzNEM2LjY2NjY3IDMuMTU2NTIgNi43MzY5IDIuOTg2OTYgNi44NjE5MyAyLjg2MTkzQzYuOTg2OTUgMi43MzY5MSA3LjE1NjUyIDIuNjY2NjcgNy4zMzMzMyAyLjY2NjY3SDguNjY2NjdDOC44NDM0OCAyLjY2NjY3IDkuMDEzMDUgMi43MzY5MSA5LjEzODA3IDIuODYxOTNDOS4yNjMxIDIuOTg2OTYgOS4zMzMzMyAzLjE1NjUyIDkuMzMzMzMgMy4zMzMzNFY0SDYuNjY2NjdWMy4zMzMzNFpNMTEuMzMzMyAxMi42NjY3QzExLjMzMzMgMTIuODQzNSAxMS4yNjMxIDEzLjAxMzEgMTEuMTM4MSAxMy4xMzgxQzExLjAxMyAxMy4yNjMxIDEwLjg0MzUgMTMuMzMzMyAxMC42NjY3IDEzLjMzMzNINS4zMzMzM0M1LjE1NjUyIDEzLjMzMzMgNC45ODY5NSAxMy4yNjMxIDQuODYxOTMgMTMuMTM4MUM0LjczNjkgMTMuMDEzMSA0LjY2NjY3IDEyLjg0MzUgNC42NjY2NyAxMi42NjY3VjUuMzMzMzRIMTEuMzMzM1YxMi42NjY3Wk05LjMzMzMzIDEyQzkuNTEwMTQgMTIgOS42Nzk3MSAxMS45Mjk4IDkuODA0NzQgMTEuODA0N0M5LjkyOTc2IDExLjY3OTcgMTAgMTEuNTEwMSAxMCAxMS4zMzMzVjcuMzMzMzRDMTAgNy4xNTY1MyA5LjkyOTc2IDYuOTg2OTYgOS44MDQ3NCA2Ljg2MTkzQzkuNjc5NzEgNi43MzY5MSA5LjUxMDE0IDYuNjY2NjcgOS4zMzMzMyA2LjY2NjY3QzkuMTU2NTIgNi42NjY2NyA4Ljk4Njk1IDYuNzM2OTEgOC44NjE5MyA2Ljg2MTkzQzguNzM2OTEgNi45ODY5NiA4LjY2NjY3IDcuMTU2NTMgOC42NjY2NyA3LjMzMzM0VjExLjMzMzNDOC42NjY2NyAxMS41MTAxIDguNzM2OTEgMTEuNjc5NyA4Ljg2MTkzIDExLjgwNDdDOC45ODY5NSAxMS45Mjk4IDkuMTU2NTIgMTIgOS4zMzMzMyAxMlpcIiBmaWxsPVwiI0UzNEQ1QlwiLz5cbiAgICAgICAgIDwvc3ZnPlxuICAgICAgICAgJHtpbml0aWFsVGV4dH1cbiAgICAgIGA7XG4gICAgICAgIH07XG4gICAgICAgIGRlbGV0ZUJ1dHRvbnMuZm9yRWFjaCgoYnV0dG9uKSA9PiB7XG4gICAgICAgICAgICBjaGFuZ2VEZWxldGVCdXR0b25Jbm5lckh0bWwoYnV0dG9uKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuKDAsIGpxdWVyeV8xLmRlZmF1bHQpKGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBmb3JtQnVpbGRlciA9IG5ldyBGb3JtQnVpbGRlcigpO1xuICAgIGZvcm1CdWlsZGVyLmFkZFdyYXBwZXIoKTtcbiAgICBkeW5hbWljRmllbGQuaGlkZVNob3dGb3JtRmllbGRzKCk7XG4gICAgZHluYW1pY0ZpZWxkLnVwZGF0ZUFjdGl2aXR5SWRlbnRpZmllcigpO1xuICAgIGZvcm1CdWlsZGVyLmFkZFRvQ29sbGVjdGlvbigpO1xuICAgIGZvcm1CdWlsZGVyLmRlbGV0ZUNvbGxlY3Rpb24oKTtcbiAgICAvKipcbiAgICAgKiBUZXh0IGFyZWEgaGVpZ2h0IG9uIHR5cGluZ1xuICAgICAqL1xuICAgIGNvbnN0IHRleHRBcmVhVGFyZ2V0ID0gKDAsIGpxdWVyeV8xLmRlZmF1bHQpKCd0ZXh0YXJlYS5mb3JtX19pbnB1dCcpO1xuICAgIGlmICh0ZXh0QXJlYVRhcmdldC5sZW5ndGggPiAwKSB7XG4gICAgICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnYm9keScpLm9uKCdpbnB1dCcsICd0ZXh0YXJlYS5mb3JtX19pbnB1dCcsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgZm9ybUJ1aWxkZXIudGV4dEFyZWFIZWlnaHQoZXZlbnQpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKCdib2R5Jykub24oJ3NlbGVjdDI6b3BlbicsICcuc2VsZWN0MicsICgpID0+IHtcbiAgICAgICAgY29uc3Qgc2VsZWN0X3NlYXJjaCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zZWxlY3QyLXNlYXJjaF9fZmllbGQnKTtcbiAgICAgICAgaWYgKHNlbGVjdF9zZWFyY2gpIHtcbiAgICAgICAgICAgIHNlbGVjdF9zZWFyY2guZm9jdXMoKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIC8qKlxuICAgICAqIGNoZWNrcyByZWdpc3RyYXRpb24gYWdlbmN5LCBjb3VudHJ5IGFuZCByZWdpc3RyYXRpb24gbnVtYmVyIHRvIGRlZHVjZSBpZGVudGlmaWVyXG4gICAgICovXG4gICAgdXBkYXRlUmVnaXN0cmF0aW9uQWdlbmN5KCgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnI29yZ2FuaXphdGlvbl9jb3VudHJ5JykpO1xuICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnI29yZ2FuaXNhdGlvbl9pZGVudGlmaWVyJykuYXR0cignZGlzYWJsZWQnLCAnZGlzYWJsZWQnKTtcbiAgICBmdW5jdGlvbiB1cGRhdGVSZWdpc3RyYXRpb25BZ2VuY3koY291bnRyeSkge1xuICAgICAgICBjb25zdCBlbmRwb2ludCA9IGNvdW50cnkudmFsKClcbiAgICAgICAgICAgID8gJy9vcmdhbmlzYXRpb24vYWdlbmN5LycgKyBjb3VudHJ5LnZhbCgpXG4gICAgICAgICAgICA6ICcvb3JnYW5pc2F0aW9uL2FnZW5jeS8nO1xuICAgICAgICBqcXVlcnlfMS5kZWZhdWx0LmFqYXgoeyB1cmw6IGVuZHBvaW50IH0pLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50X3ZhbCA9IChfYSA9ICgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnI29yZ2FuaXphdGlvbl9yZWdpc3RyYXRpb25fYWdlbmN5JykudmFsKCkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICcnO1xuICAgICAgICAgICAgbGV0IHZhbCA9IGZhbHNlO1xuICAgICAgICAgICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKCcjb3JnYW5pemF0aW9uX3JlZ2lzdHJhdGlvbl9hZ2VuY3knKS5lbXB0eSgpO1xuICAgICAgICAgICAgZm9yIChjb25zdCBkYXRhIGluIHJlc3BvbnNlLmRhdGEpIHtcbiAgICAgICAgICAgICAgICBpZiAoZGF0YSA9PT0gY3VycmVudF92YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKCcjb3JnYW5pemF0aW9uX3JlZ2lzdHJhdGlvbl9hZ2VuY3knKVxuICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKG5ldyBPcHRpb24ocmVzcG9uc2UuZGF0YVtkYXRhXSwgZGF0YSwgdHJ1ZSwgdHJ1ZSkpXG4gICAgICAgICAgICAgICAgICAgIC52YWwoJycpXG4gICAgICAgICAgICAgICAgICAgIC50cmlnZ2VyKCdjaGFuZ2UnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnI29yZ2FuaXphdGlvbl9yZWdpc3RyYXRpb25fYWdlbmN5JylcbiAgICAgICAgICAgICAgICAudmFsKHZhbCA/IGN1cnJlbnRfdmFsIDogJycpXG4gICAgICAgICAgICAgICAgLnRyaWdnZXIoJ2NoYW5nZScpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKCdib2R5Jykub24oJ3NlbGVjdDI6c2VsZWN0JywgJyNvcmdhbml6YXRpb25fY291bnRyeScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdXBkYXRlUmVnaXN0cmF0aW9uQWdlbmN5KCgwLCBqcXVlcnlfMS5kZWZhdWx0KSh0aGlzKSk7XG4gICAgfSk7XG4gICAgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKCdib2R5Jykub24oJ3NlbGVjdDI6Y2xlYXInLCAnI29yZ2FuaXphdGlvbl9jb3VudHJ5JywgZnVuY3Rpb24gKCkge1xuICAgICAgICB1cGRhdGVSZWdpc3RyYXRpb25BZ2VuY3koKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRoaXMpKTtcbiAgICB9KTtcbiAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoJ2JvZHknKS5vbignc2VsZWN0MjpzZWxlY3QnLCAnI29yZ2FuaXphdGlvbl9yZWdpc3RyYXRpb25fYWdlbmN5JywgZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zdCBpZGVudGlmaWVyID0gKDAsIGpxdWVyeV8xLmRlZmF1bHQpKHRoaXMpLnZhbCgpICsgJy0nICsgKDAsIGpxdWVyeV8xLmRlZmF1bHQpKCcjcmVnaXN0cmF0aW9uX251bWJlcicpLnZhbCgpO1xuICAgICAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoJyNvcmdhbmlzYXRpb25faWRlbnRpZmllcicpLnZhbChpZGVudGlmaWVyKTtcbiAgICB9KTtcbiAgICAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoJ2JvZHknKS5vbignc2VsZWN0MjpjbGVhcicsICcjb3JnYW5pemF0aW9uX3JlZ2lzdHJhdGlvbl9hZ2VuY3knLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnN0IGlkZW50aWZpZXIgPSAnLScgKyAoMCwganF1ZXJ5XzEuZGVmYXVsdCkoJyNyZWdpc3RyYXRpb25fbnVtYmVyJykudmFsKCk7XG4gICAgICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnI29yZ2FuaXNhdGlvbl9pZGVudGlmaWVyJykudmFsKGlkZW50aWZpZXIpO1xuICAgIH0pO1xuICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnYm9keScpLm9uKCdrZXl1cCcsICcjcmVnaXN0cmF0aW9uX251bWJlcicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3QgaWRlbnRpZmllciA9ICgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnI29yZ2FuaXphdGlvbl9yZWdpc3RyYXRpb25fYWdlbmN5JykudmFsKCkgKyAnLScgKyAoMCwganF1ZXJ5XzEuZGVmYXVsdCkodGhpcykudmFsKCk7XG4gICAgICAgICgwLCBqcXVlcnlfMS5kZWZhdWx0KSgnI29yZ2FuaXNhdGlvbl9pZGVudGlmaWVyJykudmFsKGlkZW50aWZpZXIpO1xuICAgIH0pO1xuICAgIC8vIGFkZCBjbGFzcyB0byB0aXRsZSBvZiBjb2xsZWN0aW9uIHdoZW4gdmFsaWRhdGlvbiBlcnJvciBvY2N1cnMgb24gY29sbGVjdGlvbiBsZXZlbFxuICAgIGNvbnN0IHN1YmVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuc3ViZWxlbWVudCcpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3ViZWxlbWVudC5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCB0aXRsZSA9IHN1YmVsZW1lbnRbaV0ucXVlcnlTZWxlY3RvcignLmNvbnRyb2wtbGFiZWwnKTtcbiAgICAgICAgY29uc3QgZXJyb3JDb250YWluZXIgPSBzdWJlbGVtZW50W2ldLnF1ZXJ5U2VsZWN0b3IoJy5jb2xsZWN0aW9uX2Vycm9yJyk7XG4gICAgICAgIGNvbnN0IGNoaWxkQ291bnQgPSBlcnJvckNvbnRhaW5lciA9PT0gbnVsbCB8fCBlcnJvckNvbnRhaW5lciA9PT0gdm9pZCAwID8gdm9pZCAwIDogZXJyb3JDb250YWluZXIuY2hpbGRFbGVtZW50Q291bnQ7XG4gICAgICAgIGlmIChjaGlsZENvdW50ICYmIGNoaWxkQ291bnQgPiAwKSB7XG4gICAgICAgICAgICB0aXRsZSA9PT0gbnVsbCB8fCB0aXRsZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogdGl0bGUuY2xhc3NMaXN0LmFkZCgnZXJyb3ItdGl0bGUnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBBZGRpbmcgY3Vyc29yIG5vdCBhbGxvd2VkIHRvIDxzZWxlY3Q+IHdoZXJlIGVsZW1lbnRKc29uU2NoZW1hIHJlYWRfb25seSA6IHRydWVcbiAgICBjb25zdCByZWFkT25seVNlbGVjdHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdzZWxlY3QuY3Vyc29yLW5vdC1hbGxvd2VkJyk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZWFkT25seVNlbGVjdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3Qgc2VsZWN0ID0gcmVhZE9ubHlTZWxlY3RzW2ldO1xuICAgICAgICBjb25zdCBzZWxlY3RFbGVtZW50UGFyZW50V3JhcHBlciA9IHNlbGVjdC5uZXh0U2libGluZztcbiAgICAgICAgY29uc3Qgc2VsZWN0RWxlbWVudFBhcmVudCA9IHNlbGVjdEVsZW1lbnRQYXJlbnRXcmFwcGVyID09PSBudWxsIHx8IHNlbGVjdEVsZW1lbnRQYXJlbnRXcmFwcGVyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzZWxlY3RFbGVtZW50UGFyZW50V3JhcHBlci5maXJzdENoaWxkO1xuICAgICAgICBjb25zdCBzZWxlY3RFbGVtZW50ID0gc2VsZWN0RWxlbWVudFBhcmVudCA9PT0gbnVsbCB8fCBzZWxlY3RFbGVtZW50UGFyZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzZWxlY3RFbGVtZW50UGFyZW50LmZpcnN0Q2hpbGQ7XG4gICAgICAgIGlmIChzZWxlY3RFbGVtZW50KSB7XG4gICAgICAgICAgICBzZWxlY3RFbGVtZW50LnN0eWxlLmN1cnNvciA9ICdub3QtYWxsb3dlZCc7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgZGVsZXRlQnV0dG9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5kZWxldGUtcGFyZW50LXNlbGVjdG9yJyk7XG4gICAgZnVuY3Rpb24gY2hhbmdlRGVsZXRlQnV0dG9uSW5uZXJIdG1sKGJ1dHRvbikge1xuICAgICAgICBjb25zdCBpbml0aWFsVGV4dCA9IGVzY2FwZUh0bWwoYnV0dG9uLnRleHRDb250ZW50KTtcbiAgICAgICAgYnV0dG9uLmlubmVySFRNTCA9IGBcbiAgICAgIDxzdmcgd2lkdGg9XCIxNlwiIGhlaWdodD1cIjE2XCIgdmlld0JveD1cIjAgMCAxNiAxNlwiIGZpbGw9XCJub25lXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPlxuICAgICAgICA8cGF0aCBkPVwiTTYuNjY2NjcgMTJDNi44NDM0OCAxMiA3LjAxMzA1IDExLjkyOTggNy4xMzgwNyAxMS44MDQ3QzcuMjYzMSAxMS42Nzk3IDcuMzMzMzMgMTEuNTEwMSA3LjMzMzMzIDExLjMzMzNWNy4zMzMzNEM3LjMzMzMzIDcuMTU2NTMgNy4yNjMxIDYuOTg2OTYgNy4xMzgwNyA2Ljg2MTkzQzcuMDEzMDUgNi43MzY5MSA2Ljg0MzQ4IDYuNjY2NjcgNi42NjY2NyA2LjY2NjY3QzYuNDg5ODYgNi42NjY2NyA2LjMyMDI5IDYuNzM2OTEgNi4xOTUyNiA2Ljg2MTkzQzYuMDcwMjQgNi45ODY5NiA2IDcuMTU2NTMgNiA3LjMzMzM0VjExLjMzMzNDNiAxMS41MTAxIDYuMDcwMjQgMTEuNjc5NyA2LjE5NTI2IDExLjgwNDdDNi4zMjAyOSAxMS45Mjk4IDYuNDg5ODYgMTIgNi42NjY2NyAxMlpNMTMuMzMzMyA0SDEwLjY2NjdWMy4zMzMzNEMxMC42NjY3IDIuODAyOSAxMC40NTYgMi4yOTQyIDEwLjA4MDkgMS45MTkxMkM5LjcwNTgxIDEuNTQ0MDUgOS4xOTcxIDEuMzMzMzQgOC42NjY2NyAxLjMzMzM0SDcuMzMzMzNDNi44MDI5IDEuMzMzMzQgNi4yOTQxOSAxLjU0NDA1IDUuOTE5MTIgMS45MTkxMkM1LjU0NDA1IDIuMjk0MiA1LjMzMzMzIDIuODAyOSA1LjMzMzMzIDMuMzMzMzRWNEgyLjY2NjY3QzIuNDg5ODYgNCAyLjMyMDI5IDQuMDcwMjQgMi4xOTUyNiA0LjE5NTI2QzIuMDcwMjQgNC4zMjAyOSAyIDQuNDg5ODYgMiA0LjY2NjY3QzIgNC44NDM0OCAyLjA3MDI0IDUuMDEzMDUgMi4xOTUyNiA1LjEzODA3QzIuMzIwMjkgNS4yNjMxIDIuNDg5ODYgNS4zMzMzNCAyLjY2NjY3IDUuMzMzMzRIMy4zMzMzM1YxMi42NjY3QzMuMzMzMzMgMTMuMTk3MSAzLjU0NDA1IDEzLjcwNTggMy45MTkxMiAxNC4wODA5QzQuMjk0MTkgMTQuNDU2IDQuODAyOSAxNC42NjY3IDUuMzMzMzMgMTQuNjY2N0gxMC42NjY3QzExLjE5NzEgMTQuNjY2NyAxMS43MDU4IDE0LjQ1NiAxMi4wODA5IDE0LjA4MDlDMTIuNDU2IDEzLjcwNTggMTIuNjY2NyAxMy4xOTcxIDEyLjY2NjcgMTIuNjY2N1Y1LjMzMzM0SDEzLjMzMzNDMTMuNTEwMSA1LjMzMzM0IDEzLjY3OTcgNS4yNjMxIDEzLjgwNDcgNS4xMzgwN0MxMy45Mjk4IDUuMDEzMDUgMTQgNC44NDM0OCAxNCA0LjY2NjY3QzE0IDQuNDg5ODYgMTMuOTI5OCA0LjMyMDI5IDEzLjgwNDcgNC4xOTUyNkMxMy42Nzk3IDQuMDcwMjQgMTMuNTEwMSA0IDEzLjMzMzMgNFpNNi42NjY2NyAzLjMzMzM0QzYuNjY2NjcgMy4xNTY1MiA2LjczNjkgMi45ODY5NiA2Ljg2MTkzIDIuODYxOTNDNi45ODY5NSAyLjczNjkxIDcuMTU2NTIgMi42NjY2NyA3LjMzMzMzIDIuNjY2NjdIOC42NjY2N0M4Ljg0MzQ4IDIuNjY2NjcgOS4wMTMwNSAyLjczNjkxIDkuMTM4MDcgMi44NjE5M0M5LjI2MzEgMi45ODY5NiA5LjMzMzMzIDMuMTU2NTIgOS4zMzMzMyAzLjMzMzM0VjRINi42NjY2N1YzLjMzMzM0Wk0xMS4zMzMzIDEyLjY2NjdDMTEuMzMzMyAxMi44NDM1IDExLjI2MzEgMTMuMDEzMSAxMS4xMzgxIDEzLjEzODFDMTEuMDEzIDEzLjI2MzEgMTAuODQzNSAxMy4zMzMzIDEwLjY2NjcgMTMuMzMzM0g1LjMzMzMzQzUuMTU2NTIgMTMuMzMzMyA0Ljk4Njk1IDEzLjI2MzEgNC44NjE5MyAxMy4xMzgxQzQuNzM2OSAxMy4wMTMxIDQuNjY2NjcgMTIuODQzNSA0LjY2NjY3IDEyLjY2NjdWNS4zMzMzNEgxMS4zMzMzVjEyLjY2NjdaTTkuMzMzMzMgMTJDOS41MTAxNCAxMiA5LjY3OTcxIDExLjkyOTggOS44MDQ3NCAxMS44MDQ3QzkuOTI5NzYgMTEuNjc5NyAxMCAxMS41MTAxIDEwIDExLjMzMzNWNy4zMzMzNEMxMCA3LjE1NjUzIDkuOTI5NzYgNi45ODY5NiA5LjgwNDc0IDYuODYxOTNDOS42Nzk3MSA2LjczNjkxIDkuNTEwMTQgNi42NjY2NyA5LjMzMzMzIDYuNjY2NjdDOS4xNTY1MiA2LjY2NjY3IDguOTg2OTUgNi43MzY5MSA4Ljg2MTkzIDYuODYxOTNDOC43MzY5MSA2Ljk4Njk2IDguNjY2NjcgNy4xNTY1MyA4LjY2NjY3IDcuMzMzMzRWMTEuMzMzM0M4LjY2NjY3IDExLjUxMDEgOC43MzY5MSAxMS42Nzk3IDguODYxOTMgMTEuODA0N0M4Ljk4Njk1IDExLjkyOTggOS4xNTY1MiAxMiA5LjMzMzMzIDEyWlwiIGZpbGw9XCIjRTM0RDVCXCIvPlxuICAgICAgPC9zdmc+XG4gICAgICAke2luaXRpYWxUZXh0fWA7XG4gICAgfVxuICAgIGRlbGV0ZUJ1dHRvbnMuZm9yRWFjaCgoYnV0dG9uKSA9PiBjaGFuZ2VEZWxldGVCdXR0b25Jbm5lckh0bWwoYnV0dG9uKSk7XG4gICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcigobXV0YXRpb25zTGlzdCkgPT4ge1xuICAgICAgICBtdXRhdGlvbnNMaXN0LmZvckVhY2goKG11dGF0aW9uKSA9PiB7XG4gICAgICAgICAgICBpZiAobXV0YXRpb24uYWRkZWROb2Rlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgbXV0YXRpb24uYWRkZWROb2Rlcy5mb3JFYWNoKChub2RlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChub2RlIGluc3RhbmNlb2YgRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUubWF0Y2hlcygnLmRlbGV0ZS1pdGVtLXNlbGVjdG9yJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2VEZWxldGVCdXR0b25Jbm5lckh0bWwobm9kZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdEZWxldGVCdXR0b25zID0gbm9kZS5xdWVyeVNlbGVjdG9yQWxsKCcuZGVsZXRlLWl0ZW0tc2VsZWN0b3InKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdEZWxldGVCdXR0b25zLmZvckVhY2goKGJ1dHRvbikgPT4gY2hhbmdlRGVsZXRlQnV0dG9uSW5uZXJIdG1sKGJ1dHRvbikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIG9ic2VydmVyLm9ic2VydmUoZG9jdW1lbnQuYm9keSwge1xuICAgICAgICBjaGlsZExpc3Q6IHRydWUsXG4gICAgICAgIHN1YnRyZWU6IHRydWUsXG4gICAgfSk7XG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBkb2VzIHR3byBtYWluIHRoaW5nczpcbiAgICAgKlxuICAgICAqIDEuIEFkZHMgYSBjbGljayBldmVudCBsaXN0ZW5lciB0byB0aGUgYnV0dG9uIHRvIGNvbnRyb2wgdGhlIGNvbGxhcHNpYmxlIGZsb3c6XG4gICAgICogICAgLSBJdCBmaW5kcyB0aGUgY2xvc2VzdCA8bGFiZWw+IGVsZW1lbnQgcmVsYXRlZCB0byB0aGUgYnV0dG9uLlxuICAgICAqICAgIC0gV2l0aGluIHRoYXQgPGxhYmVsPiwgaXQgbG9va3MgZm9yIGFuIGVsZW1lbnQgd2l0aCB0aGUgY2xhc3MgJ29wdGlvbmFsLXRleHQnLiBJZiBpdCBmaW5kcyAnb3B0aW9uYWwtdGV4dCcsIGl0IHRvZ2dsZXMgaG93IHRoYXQgdGV4dCBpcyBkaXNwbGF5ZWQgKGVpdGhlciB3aXRoIGJyYWNrZXRzIG9yIGFuIGljb24pLlxuICAgICAqICAgIC0gSXQgYWxzbyBsb2NhdGVzIHRoZSBuZWFyZXN0IHBhcmVudCBlbGVtZW50IHdpdGggdGhlIGNsYXNzZXMgJ3N1YmVsZW1lbnQgcm91bmRlZC10LXNtJy4gSWYgdGhhdCBwYXJlbnQgc3ViZWxlbWVudCBleGlzdHMsIGl0IHRvZ2dsZXMgaXRzIHN0YXRlIHRvIGVpdGhlciBjb2xsYXBzZSBvciBleHBhbmQgdGhlIGZvcm0gc2VjdGlvbi5cbiAgICAgKiAgICAtIEZpbmFsbHksIGl0IHJvdGF0ZXMgdGhlIGNvbGxhcHNlIGJ1dHRvbiBlYWNoIHRpbWUgaXTigJlzIGNsaWNrZWQuXG4gICAgICpcbiAgICAgKiAyLiBJdCB0cmlnZ2VycyB0aGUgYnV0dG9uIGNsaWNrIGV2ZW50IGlmIHRoZSBzdWJlbGVtZW50IGlzIG9wdGlvbmFsIHVzaW5nIHRoZSBmbGFnOiB0aGlzQnV0dG9uQmVsb25nc1RvT3B0aW9uYWxGb3JtLlxuICAgICAqICAgIFRoaXMgZW5zdXJlcyBvcHRpb25hbCBmb3JtcyBzdGFydCBvZmYgY29sbGFwc2VkIGJ5IGRlZmF1bHQgd2hlbiByZW5kZXJlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBidXR0b24gLSBUaGUgYnV0dG9uIGVsZW1lbnQgdGhhdCBtYW5hZ2VzIHRoZSBjb2xsYXBzaWJsZSBmb3JtIHNlY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXR0YWNoQ29sbGFwc2FibGVCdXR0b25FdmVudHMoYnV0dG9uKSB7XG4gICAgICAgIGNvbnN0IGxhYmVsID0gZ2V0Q2xvc2VzdExhYmVsRG9tKGJ1dHRvbik7XG4gICAgICAgIGNvbnN0IG9wdGlvbmFsTGFiZWwgPSBsYWJlbCA/IGdldE9wdGlvbmFsVGV4dERvbShsYWJlbCkgOiBudWxsO1xuICAgICAgICBjb25zdCBzdWJlbGVtZW50ID0gbGFiZWwgPyBnZXRDbG9zZXN0UGFyZW50U3ViZWxlbWVudERvbShsYWJlbCkgOiBudWxsO1xuICAgICAgICBjb25zdCB0aGlzQnV0dG9uQmVsb25nc1RvT3B0aW9uYWxGb3JtID0gb3B0aW9uYWxMYWJlbCAhPT0gbnVsbDtcbiAgICAgICAgY29uc29sZS5sb2coc3ViZWxlbWVudCk7XG4gICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIGlmIChvcHRpb25hbExhYmVsKSB7XG4gICAgICAgICAgICAgICAgdG9nZ2xlT3B0aW9uYWxUZXh0KG9wdGlvbmFsTGFiZWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHN1YmVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICB0b2dnbGVBY2NvcmRpb25JdGVtcyhzdWJlbGVtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJ1dHRvbi5jbGFzc0xpc3QudG9nZ2xlKCdyb3RhdGUtMTgwJyk7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zb2xlLmxvZyh0aGlzQnV0dG9uQmVsb25nc1RvT3B0aW9uYWxGb3JtLCAhZXJyb3JNZXNzYWdlRXhpc3RzKHN1YmVsZW1lbnQpKTtcbiAgICAgICAgaWYgKHRoaXNCdXR0b25CZWxvbmdzVG9PcHRpb25hbEZvcm0gJiYgIWVycm9yTWVzc2FnZUV4aXN0cyhzdWJlbGVtZW50KSkge1xuICAgICAgICAgICAgYnV0dG9uLmNsaWNrKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgYW55IGVycm9yIG1lc3NhZ2UgZXhpc3RzIGluIHRoZSBzdWJlbGVtZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHN1YmVsZW1lbnRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlcnJvck1lc3NhZ2VFeGlzdHMoc3ViZWxlbWVudCkge1xuICAgICAgICBjb25zdCBlcnJvckRpdnMgPSBzdWJlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5lcnJvcicpO1xuICAgICAgICBjb25zdCBlcnJvclRleHRzID0gc3ViZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCcudGV4dC1kYW5nZXItZXJyb3InKTtcbiAgICAgICAgZm9yIChjb25zdCBkaXYgb2YgZXJyb3JEaXZzKSB7XG4gICAgICAgICAgICBpZiAoZGl2LnRleHRDb250ZW50LnRyaW0oKSAhPT0gJycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IGRpdiBvZiBlcnJvclRleHRzKSB7XG4gICAgICAgICAgICBpZiAoZGl2LnRleHRDb250ZW50LnRyaW0oKSAhPT0gJycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgY2xvc2VzdCA8bGFiZWw+IGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gYnV0dG9uXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0Q2xvc2VzdExhYmVsRG9tKGJ1dHRvbikge1xuICAgICAgICByZXR1cm4gYnV0dG9uLmNsb3Nlc3QoJ2xhYmVsJyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgY2xvc2VzdCBlbGVtZW50IHdpdGggY2xhc3MgJ29wdGlvbmFsLXRleHQnLlxuICAgICAqXG4gICAgICogQHBhcmFtIGxhYmVsXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0T3B0aW9uYWxUZXh0RG9tKGxhYmVsKSB7XG4gICAgICAgIHJldHVybiBsYWJlbC5xdWVyeVNlbGVjdG9yKCcub3B0aW9uYWwtdGV4dCcpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBmaXJzdCBOdGggcGFyZW50IHRoYXQgaGFzIGNsYXNzICdzdWJlbGVtZW50Jy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBsYWJlbFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldENsb3Nlc3RQYXJlbnRTdWJlbGVtZW50RG9tKGxhYmVsKSB7XG4gICAgICAgIHJldHVybiBsYWJlbC5jbG9zZXN0KCcuc3ViZWxlbWVudC5yb3VuZGVkLXQtc20nKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVG9nZ2xlcyB3aGF0IGlzIHJlbmRlcmVkIG9uIG9wdGlvbmFsIHRleHQuIChkb3Qgb3IgYnJhY2tldClcbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25hbExhYmVsXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9nZ2xlT3B0aW9uYWxUZXh0KG9wdGlvbmFsTGFiZWwpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9uYWxMYWJlbFdpdGhTdmcgPSAnPHN2ZyB2aWV3Qm94PVwiMCAwIDE2IDE4XCIgZmlsbD1cIm5vbmVcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+PHBhdGggZD1cIk02IDlhMS44NyAxLjg3IDAgMSAwIDMuNzQgMEExLjg3IDEuODcgMCAwIDAgNiA5WlwiIGZpbGw9XCIjNjg3OTdFXCI+PC9wYXRoPjwvc3ZnPjxzcGFuPk9wdGlvbmFsPC9zcGFuPic7XG4gICAgICAgIGNvbnN0IG9wdGlvbmFsTGFiZWxXaXRoQnJhY2tldHMgPSAnPHNwYW4+KCBPcHRpb25hbCApPC9zcGFuPic7XG4gICAgICAgIGNvbnN0IHN2Z0V4aXN0cyA9IG9wdGlvbmFsTGFiZWwucXVlcnlTZWxlY3Rvcignc3ZnJykgIT09IG51bGw7XG4gICAgICAgIGlmIChzdmdFeGlzdHMpIHtcbiAgICAgICAgICAgIG9wdGlvbmFsTGFiZWwuaW5uZXJIVE1MID0gb3B0aW9uYWxMYWJlbFdpdGhCcmFja2V0cztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG9wdGlvbmFsTGFiZWwuaW5uZXJIVE1MID0gb3B0aW9uYWxMYWJlbFdpdGhTdmc7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogVG9nZ2xlcyBjb2xsYXBzZWQgc3RhdGUuIChleHBhbmQgb3IgY29sbGFwc2VkKVxuICAgICAqXG4gICAgICogS2V5IGNvbnNpZGVyYXRpb25zOlxuICAgICAqIDEuIFRoZSBcIkFkZCBBZGRpdGlvbmFsXCIgYnV0dG9uIGNhbiBiZSBlaXRoZXIgaW5zaWRlIG9yIG91dHNpZGUgdGhlIHN1YmVsZW1lbnQuXG4gICAgICogMi4gV2hlbiB0aGUgYnV0dG9uIGlzIG91dHNpZGUsIGl0IHdpbGwgYWx3YXlzIGJlIHRoZSBpbW1lZGlhdGUgc2libGluZyB0byB0aGUgc3ViZWxlbWVudC5cbiAgICAgKiAzLiBUaGUgY29sbGFwc2UgbWVjaGFuaXNtIGlzIGhhbmRsZWQgYnkgYWRqdXN0aW5nIHRoZSBtYXggaGVpZ2h0IHRvIGdpdmUgdGhlIGlsbHVzaW9uIG9mIHNsaWRpbmcgdXAuXG4gICAgICogNC4gSWYgdGhlIGJ1dHRvbiBpcyBvdXRzaWRlIHRoZSBzdWJlbGVtZW50LCB0aGUgc2xpZGUtdXAgZWZmZWN0IHdpbGwgbm90IGFmZmVjdCB0aGUgYnV0dG9uLlxuICAgICAqICAgIFRoZXJlZm9yZSwgd2UgdG9nZ2xlIHRoZSAnZGlzcGxheS1ub25lJyBjbGFzcyB0byBjb250cm9sIGl0cyB2aXNpYmlsaXR5LlxuICAgICAqXG4gICAgICogQHBhcmFtIHN1YmVsZW1lbnRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b2dnbGVBY2NvcmRpb25JdGVtcyhzdWJlbGVtZW50KSB7XG4gICAgICAgIGZ1bmN0aW9uIGlzQWRkQWRkaXRpb25hbEJ1dHRvbk91dHNpZGUoc3ViZWxlbWVudCkge1xuICAgICAgICAgICAgY29uc3QgbmV4dFNpYmxpbmcgPSBzdWJlbGVtZW50Lm5leHRFbGVtZW50U2libGluZztcbiAgICAgICAgICAgIGlmIChuZXh0U2libGluZyAmJiBuZXh0U2libGluZy50YWdOYW1lID09PSAnQlVUVE9OJykge1xuICAgICAgICAgICAgICAgIHJldHVybiAobmV4dFNpYmxpbmcuY2xhc3NMaXN0LmNvbnRhaW5zKCdhZGRfbW9yZScpICYmXG4gICAgICAgICAgICAgICAgICAgIG5leHRTaWJsaW5nLmNsYXNzTGlzdC5jb250YWlucygnYnV0dG9uJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGhpZGVhYmxlU3ViZWxlbWVudHMgPSBbLi4uc3ViZWxlbWVudC5jaGlsZHJlbl0uZmlsdGVyKChjaGlsZCkgPT4gY2hpbGQudGFnTmFtZSAhPT0gJ0xBQkVMJyk7XG4gICAgICAgIGxldCBvdXRzaWRlQnV0dG9uID0gbnVsbDtcbiAgICAgICAgY29uc3QgaGFzQWRkQWRkaXRpb25hbEJ1dHRvbk91dHNpZGUgPSBpc0FkZEFkZGl0aW9uYWxCdXR0b25PdXRzaWRlKHN1YmVsZW1lbnQpO1xuICAgICAgICBpZiAoaGFzQWRkQWRkaXRpb25hbEJ1dHRvbk91dHNpZGUpIHtcbiAgICAgICAgICAgIG91dHNpZGVCdXR0b24gPSBzdWJlbGVtZW50Lm5leHRFbGVtZW50U2libGluZztcbiAgICAgICAgICAgIGlmIChvdXRzaWRlQnV0dG9uKSB7XG4gICAgICAgICAgICAgICAgb3V0c2lkZUJ1dHRvbi5jbGFzc0xpc3QudG9nZ2xlKCdkaXNwbGF5LW5vbmUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBoaWRlYWJsZVN1YmVsZW1lbnRzLmZvckVhY2goKGNoaWxkKSA9PiB7XG4gICAgICAgICAgICBpZiAoaGFzQWRkQWRkaXRpb25hbEJ1dHRvbk91dHNpZGUgJiYgb3V0c2lkZUJ1dHRvbikge1xuICAgICAgICAgICAgICAgIHN1YmVsZW1lbnQuY2xhc3NMaXN0LnRvZ2dsZSgnbWItNicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNoaWxkLmNsYXNzTGlzdC5jb250YWlucygnaGVpZ2h0LWhpZGUnKSkge1xuICAgICAgICAgICAgICAgIGNoaWxkLmNsYXNzTGlzdC5yZW1vdmUoJ2hlaWdodC1oaWRlJyk7XG4gICAgICAgICAgICAgICAgY2hpbGQuY2xhc3NMaXN0LmFkZCgnaGVpZ2h0LXNob3cnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNoaWxkLmNsYXNzTGlzdC5yZW1vdmUoJ2hlaWdodC1zaG93Jyk7XG4gICAgICAgICAgICAgICAgY2hpbGQuY2xhc3NMaXN0LmFkZCgnaGVpZ2h0LWhpZGUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaGFuZGxlcyB0aGUgZm9ybXMgcmVuZGVyZWQgb24gaW5pdGlhbCBwYWdlIGxvYWQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXR0YWNoSW5pdGlhbENvbGxhcHNhYmxlQnV0dG9uRXZlbnRzKCkge1xuICAgICAgICBjb25zdCBhbGxDb2xsYXBzYWJsZUJ1dHRvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuY29sbGFwc2FibGUtYnV0dG9uJyk7XG4gICAgICAgIGFsbENvbGxhcHNhYmxlQnV0dG9ucy5mb3JFYWNoKChidXR0b24pID0+IGF0dGFjaENvbGxhcHNhYmxlQnV0dG9uRXZlbnRzKGJ1dHRvbikpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGhhbmRsZXMgdGhlIGZvcm1zIHJlbmRlcmVkIG9uIGNsaWNraW5nICdBREQgQURESVRJT05BTCBYJyBidXR0b24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gb2JzZXJ2ZU5ld0NvbGxhcHNhYmxlQnV0dG9ucygpIHtcbiAgICAgICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcigobXV0YXRpb25zTGlzdCkgPT4ge1xuICAgICAgICAgICAgbXV0YXRpb25zTGlzdC5mb3JFYWNoKChtdXRhdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChtdXRhdGlvbi50eXBlID09PSAnY2hpbGRMaXN0Jykge1xuICAgICAgICAgICAgICAgICAgICBtdXRhdGlvbi5hZGRlZE5vZGVzLmZvckVhY2goKG5vZGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub2RlIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdDb2xsYXBzYWJsZUJ1dHRvbnMgPSBub2RlLnF1ZXJ5U2VsZWN0b3JBbGwoJy5jb2xsYXBzYWJsZS1idXR0b24nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdDb2xsYXBzYWJsZUJ1dHRvbnMuZm9yRWFjaCgoYnV0dG9uKSA9PiBhdHRhY2hDb2xsYXBzYWJsZUJ1dHRvbkV2ZW50cyhidXR0b24pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBvYnNlcnZlci5vYnNlcnZlKGRvY3VtZW50LmJvZHksIHsgY2hpbGRMaXN0OiB0cnVlLCBzdWJ0cmVlOiB0cnVlIH0pO1xuICAgIH1cbiAgICBhdHRhY2hJbml0aWFsQ29sbGFwc2FibGVCdXR0b25FdmVudHMoKTtcbiAgICBvYnNlcnZlTmV3Q29sbGFwc2FibGVCdXR0b25zKCk7XG59KTtcbmZ1bmN0aW9uIGVzY2FwZUh0bWwodW5zYWZlKSB7XG4gICAgcmV0dXJuIHVuc2FmZVxuICAgICAgICAucmVwbGFjZSgvJi9nLCAnJmFtcDsnKVxuICAgICAgICAucmVwbGFjZSgvPC9nLCAnJmx0OycpXG4gICAgICAgIC5yZXBsYWNlKC8+L2csICcmZ3Q7JylcbiAgICAgICAgLnJlcGxhY2UoL1wiL2csICcmcXVvdDsnKVxuICAgICAgICAucmVwbGFjZSgvJy9nLCAnJiMwMzk7Jyk7XG59XG4iXSwibmFtZXMiOlsiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwidGFyZ2V0IiwicHJvcHMiLCJpIiwibGVuZ3RoIiwiZGVzY3JpcHRvciIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5Iiwia2V5IiwiX2NyZWF0ZUNsYXNzIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwicHJvdG90eXBlIiwiX19pbXBvcnREZWZhdWx0IiwibW9kIiwiX19lc01vZHVsZSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkR5bmFtaWNGaWVsZCIsImpxdWVyeV8xIiwicmVxdWlyZSIsImhpZGVTaG93Rm9ybUZpZWxkcyIsImh1bWFuaXRhcmlhblNjb3BlSGlkZVZvY2FidWxhcnlVcmkiLCJjb3VudHJ5QnVkZ2V0SGlkZUNvZGVGaWVsZCIsImFpZFR5cGVWb2NhYnVsYXJ5SGlkZUZpZWxkIiwic2VjdG9yVm9jYWJ1bGFyeUhpZGVGaWVsZCIsInBvbGljeVZvY2FidWxhcnlIaWRlRmllbGQiLCJyZWNpcGllbnRWb2NhYnVsYXJ5SGlkZUZpZWxkIiwidGFnVm9jYWJ1bGFyeUhpZGVGaWVsZCIsInRyYW5zYWN0aW9uQWlkVHlwZVZvY2FidWxhcnlIaWRlRmllbGQiLCJpbmRpY2F0b3JSZWZlcmVuY2VIaWRlRmllbGRVcmkiLCJfdGhpcyIsImh1bWFuaXRhcmlhblNjb3BlVm9jYWJ1bGFyeSIsImVhY2giLCJpbmRleCIsInNjb3BlIiwiX2EiLCJ2YWwiLCJoaWRlSHVtYW5pdGFyaWFuU2NvcGVGaWVsZCIsInRvU3RyaW5nIiwib24iLCJlIiwicGFyYW1zIiwiZGF0YSIsImlkIiwiY2xvc2VzdCIsImZpbmQiLCJzaG93IiwicmVtb3ZlQXR0ciIsInRyaWdnZXIiLCJoaWRlIiwiYXR0ciIsIl90aGlzMiIsInJlZmVyZW5jZVZvY2FidWxhcnkiLCJpbmRpY2F0b3JSZWZlcmVuY2VIaWRlRmllbGQiLCJyZWZlcmVuY2VVcmkiLCJfdGhpczMiLCJjb3VudHJ5QnVkZ2V0Vm9jYWJ1bGFyeSIsImhpZGVDb3VudHJ5QnVkZ2V0RmllbGQiLCJjb3VudHJ5QnVkZ2V0Q29kZUlucHV0IiwiY291bnRyeUJ1ZGdldENvZGVTZWxlY3QiLCJfdGhpczQiLCJhaWR0eXBlX3ZvY2FidWxhcnkiLCJpdGVtIiwiaGlkZUFpZFR5cGVTZWxlY3RGaWVsZCIsIl90aGlzNSIsImhpZGVUcmFuc2FjdGlvbkFpZFR5cGVTZWxlY3RGaWVsZCIsImRlZmF1bHRfYWlkX3R5cGUiLCJlYXJtYXJraW5nX2NhdGVnb3J5IiwiZWFybWFya2luZ19tb2RhbGl0eSIsImNhc2hfYW5kX3ZvdWNoZXJfbW9kYWxpdGllcyIsImNhc2UxIiwiY2FzZTIiLCJjYXNlMyIsImNhc2U0IiwiYWlkX3R5cGUiLCJfdGhpczYiLCJwb2xpY3ltYWtlcl92b2NhYnVsYXJ5IiwicG9saWN5X21hcmtlciIsImhpZGVQb2xpY3lNYWtlckZpZWxkIiwiY2FzZTFfc2hvdyIsImNhc2UyX3Nob3ciLCJfdGhpczciLCJzZWN0b3Jfdm9jYWJ1bGFyeSIsInNlY3RvciIsImhpZGVTZWN0b3JGaWVsZCIsImNhc2U3X3Nob3ciLCJjYXNlOF9zaG93IiwiY2FzZTk4Xzk5X3Nob3ciLCJkZWZhdWx0X3Nob3ciLCJjYXNlNyIsImNhc2U4IiwiY2FzZTk4Xzk5IiwiZGVmYXVsdF9oaWRlIiwiX3RoaXM4IiwicmVnaW9uX3ZvY2FidWxhcnkiLCJyZWdpb25fdm9jYWIiLCJoaWRlUmVjaXBpZW50UmVnaW9uRmllbGQiLCJjYXNlOTlfc2hvdyIsImNhc2U5OSIsInVwZGF0ZUFjdGl2aXR5SWRlbnRpZmllciIsImFjdGl2aXR5X2lkZW50aWZpZXIiLCJjb25jYXQiLCJfdGhpczkiLCJ0YWdfdm9jYWJ1bGFyeSIsInRhZyIsImhpZGVUYWdGaWVsZCIsImNhc2UzX3Nob3ciLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJhcnIiLCJfYXJyYXlXaXRob3V0SG9sZXMiLCJfaXRlcmFibGVUb0FycmF5IiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwiX25vbkl0ZXJhYmxlU3ByZWFkIiwiaXRlciIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiQXJyYXkiLCJmcm9tIiwiaXNBcnJheSIsIl9hcnJheUxpa2VUb0FycmF5IiwiX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIiLCJvIiwiYWxsb3dBcnJheUxpa2UiLCJpdCIsIkYiLCJzIiwibiIsImRvbmUiLCJfZSIsImYiLCJub3JtYWxDb21wbGV0aW9uIiwiZGlkRXJyIiwiZXJyIiwiY2FsbCIsInN0ZXAiLCJuZXh0IiwiX2UyIiwibWluTGVuIiwic2xpY2UiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJ0ZXN0IiwibGVuIiwiYXJyMiIsImF4aW9zXzEiLCJEeW5hbWljRmllbGRfMSIsImR5bmFtaWNGaWVsZCIsIkZvcm1CdWlsZGVyIiwiYWRkRm9ybSIsImV2IiwicHJldmVudERlZmF1bHQiLCJjb250YWluZXIiLCJjb3VudCIsInBhcnNlSW50IiwicGFyZW50IiwicGFyZW50X2NvdW50IiwicGFyZW50cyIsIndyYXBwZXJfcGFyZW50X2NvdW50IiwicHJvdG8iLCJyZXBsYWNlIiwicHJldiIsImFwcGVuZCIsImNoaWxkcmVuIiwibGFzdCIsInNlbGVjdDIiLCJwbGFjZWhvbGRlciIsImFsbG93Q2xlYXIiLCJ3cmFwQWxsIiwiYWRkUGFyZW50Rm9ybSIsImFkZFdyYXBwZXJPbkFkZCIsImRlbGV0ZUZvcm0iLCJjb2xsZWN0aW9uTGVuZ3RoIiwidGciLCJyZW1vdmUiLCJkZWxldGVQYXJlbnRGb3JtIiwiYWRkV3JhcHBlciIsImZvcm1GaWVsZCIsInRleHRBcmVhSGVpZ2h0IiwiaGVpZ2h0Iiwic2Nyb2xsSGVpZ2h0IiwiY3NzIiwiYWRkVG9Db2xsZWN0aW9uIiwiZXZlbnQiLCJoYXNDbGFzcyIsInN0b3BQcm9wYWdhdGlvbiIsImhhbmRsZURlbGV0ZVBhcmVudEJ1dHRvbnMiLCJkZWxldGVDb2xsZWN0aW9uIiwiZGVsZXRlQ29uZmlybWF0aW9uIiwiY2FuY2VsUG9wdXAiLCJkZWxldGVDb25maXJtIiwiZGVsZXRlSW5kZXgiLCJjaGlsZE9yUGFyZW50IiwiZmFkZUluIiwiZmFkZU91dCIsImRlbGV0ZUJ1dHRvbiIsIm11bHRpRm9ybSIsImJhY2tncm91bmQiLCJvdXRsaW5lIiwiZmlsZVBhdGgiLCJkb2N1bWVudCIsInVybCIsImdldCIsInRoZW4iLCJyZXNwb25zZSIsInN1Y2Nlc3MiLCJmb3JtYXQiLCJtaW1ldHlwZSIsIm1lc3NhZ2UiLCJmaWxlVXJsIiwiZGVsZXRlQnV0dG9ucyIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJjaGFuZ2VEZWxldGVCdXR0b25Jbm5lckh0bWwiLCJidXR0b24iLCJpbml0aWFsVGV4dCIsImVzY2FwZUh0bWwiLCJ0ZXh0Q29udGVudCIsImlubmVySFRNTCIsImZvckVhY2giLCJmb3JtQnVpbGRlciIsInRleHRBcmVhVGFyZ2V0Iiwic2VsZWN0X3NlYXJjaCIsInF1ZXJ5U2VsZWN0b3IiLCJmb2N1cyIsInVwZGF0ZVJlZ2lzdHJhdGlvbkFnZW5jeSIsImNvdW50cnkiLCJlbmRwb2ludCIsImFqYXgiLCJjdXJyZW50X3ZhbCIsImVtcHR5IiwiT3B0aW9uIiwiaWRlbnRpZmllciIsInN1YmVsZW1lbnQiLCJ0aXRsZSIsImVycm9yQ29udGFpbmVyIiwiY2hpbGRDb3VudCIsImNoaWxkRWxlbWVudENvdW50IiwiY2xhc3NMaXN0IiwiYWRkIiwicmVhZE9ubHlTZWxlY3RzIiwic2VsZWN0Iiwic2VsZWN0RWxlbWVudFBhcmVudFdyYXBwZXIiLCJuZXh0U2libGluZyIsInNlbGVjdEVsZW1lbnRQYXJlbnQiLCJmaXJzdENoaWxkIiwic2VsZWN0RWxlbWVudCIsInN0eWxlIiwiY3Vyc29yIiwib2JzZXJ2ZXIiLCJNdXRhdGlvbk9ic2VydmVyIiwibXV0YXRpb25zTGlzdCIsIm11dGF0aW9uIiwiYWRkZWROb2RlcyIsIm5vZGUiLCJFbGVtZW50IiwibWF0Y2hlcyIsIm5ld0RlbGV0ZUJ1dHRvbnMiLCJvYnNlcnZlIiwiYm9keSIsImNoaWxkTGlzdCIsInN1YnRyZWUiLCJhdHRhY2hDb2xsYXBzYWJsZUJ1dHRvbkV2ZW50cyIsImxhYmVsIiwiZ2V0Q2xvc2VzdExhYmVsRG9tIiwib3B0aW9uYWxMYWJlbCIsImdldE9wdGlvbmFsVGV4dERvbSIsImdldENsb3Nlc3RQYXJlbnRTdWJlbGVtZW50RG9tIiwidGhpc0J1dHRvbkJlbG9uZ3NUb09wdGlvbmFsRm9ybSIsImNvbnNvbGUiLCJsb2ciLCJhZGRFdmVudExpc3RlbmVyIiwidG9nZ2xlT3B0aW9uYWxUZXh0IiwidG9nZ2xlQWNjb3JkaW9uSXRlbXMiLCJ0b2dnbGUiLCJlcnJvck1lc3NhZ2VFeGlzdHMiLCJjbGljayIsImVycm9yRGl2cyIsImVycm9yVGV4dHMiLCJfaXRlcmF0b3IiLCJfc3RlcCIsImRpdiIsInRyaW0iLCJfaXRlcmF0b3IyIiwiX3N0ZXAyIiwib3B0aW9uYWxMYWJlbFdpdGhTdmciLCJvcHRpb25hbExhYmVsV2l0aEJyYWNrZXRzIiwic3ZnRXhpc3RzIiwiaXNBZGRBZGRpdGlvbmFsQnV0dG9uT3V0c2lkZSIsIm5leHRFbGVtZW50U2libGluZyIsInRhZ05hbWUiLCJjb250YWlucyIsImhpZGVhYmxlU3ViZWxlbWVudHMiLCJmaWx0ZXIiLCJjaGlsZCIsIm91dHNpZGVCdXR0b24iLCJoYXNBZGRBZGRpdGlvbmFsQnV0dG9uT3V0c2lkZSIsImF0dGFjaEluaXRpYWxDb2xsYXBzYWJsZUJ1dHRvbkV2ZW50cyIsImFsbENvbGxhcHNhYmxlQnV0dG9ucyIsIm9ic2VydmVOZXdDb2xsYXBzYWJsZUJ1dHRvbnMiLCJ0eXBlIiwiSFRNTEVsZW1lbnQiLCJuZXdDb2xsYXBzYWJsZUJ1dHRvbnMiLCJ1bnNhZmUiXSwic291cmNlUm9vdCI6IiJ9
>>>>>>> 3401ee77 (-[x] Translation Structure Changed)
